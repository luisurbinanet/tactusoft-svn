/**
 * Z_SD_CUSTOMER_MAINTAIN_ALLStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.6.2  Built on : Apr 17, 2012 (05:33:49 IST)
 */
package com.tactusoft.webservice.client.zsdcustomermaintainall;

/*
 *  Z_SD_CUSTOMER_MAINTAIN_ALLStub java implementation
 */

@SuppressWarnings({ "rawtypes", "unused", "unchecked", "serial" })
public class Z_SD_CUSTOMER_MAINTAIN_ALLStub extends
		org.apache.axis2.client.Stub {
	protected org.apache.axis2.description.AxisOperation[] _operations;

	// hashmaps to keep the fault mapping
	private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
	private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
	private java.util.HashMap faultMessageMap = new java.util.HashMap();

	private static int counter = 0;

	private static synchronized java.lang.String getUniqueSuffix() {
		// reset the counter if it is greater than 99999
		if (counter > 99999) {
			counter = 0;
		}
		counter = counter + 1;
		return java.lang.Long.toString(java.lang.System.currentTimeMillis())
				+ "_" + counter;
	}

	private void populateAxisService() throws org.apache.axis2.AxisFault {

		// creating the Service with a unique name
		_service = new org.apache.axis2.description.AxisService(
				"Z_SD_CUSTOMER_MAINTAIN_ALL" + getUniqueSuffix());
		addAnonymousOperations();

		// creating the operations
		org.apache.axis2.description.AxisOperation __operation;

		_operations = new org.apache.axis2.description.AxisOperation[1];

		__operation = new org.apache.axis2.description.OutInAxisOperation();

		__operation.setName(new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:soap:functions:mc-style",
				"zsdCustomerMaintainAll"));
		_service.addOperation(__operation);

		(__operation)
				.getMessage(
						org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_OUT_VALUE)
				.getPolicySubject()
				.attachPolicy(
						getPolicy("<wsp:Policy wsu:Id=\"748454b2ad1bcfd8384d0d11ec81db2fd3c4bfdadba06053\" xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"><wsp:ExactlyOne><wsp:All><wsaw:UsingAddressing xmlns:wsaw=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"></wsaw:UsingAddressing><saptrnbnd:OptimizedXMLTransfer wsp:Optional=\"true\" xmlns:saptrnbnd=\"http://www.sap.com/webas/710/soap/features/transportbinding/\" uri=\"http://xml.sap.com/2006/11/esi/esp/binxml\"></saptrnbnd:OptimizedXMLTransfer><sapattahnd:Enabled xmlns:sapattahnd=\"http://www.sap.com/710/features/attachment/\">false</sapattahnd:Enabled><sp:TransportBinding xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpBasicAuthentication /></wsp:Policy></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:TripleDesRsa15 /></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Strict /></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding></wsp:All></wsp:ExactlyOne></wsp:Policy>"));

		(__operation)
				.getMessage(
						org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE)
				.getPolicySubject()
				.attachPolicy(
						getPolicy("<wsp:Policy wsu:Id=\"748454b2ad1bcfd8384d0d11ec81db2fd3c4bfdadba06053\" xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"><wsp:ExactlyOne><wsp:All><wsaw:UsingAddressing xmlns:wsaw=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\"></wsaw:UsingAddressing><saptrnbnd:OptimizedXMLTransfer wsp:Optional=\"true\" xmlns:saptrnbnd=\"http://www.sap.com/webas/710/soap/features/transportbinding/\" uri=\"http://xml.sap.com/2006/11/esi/esp/binxml\"></saptrnbnd:OptimizedXMLTransfer><sapattahnd:Enabled xmlns:sapattahnd=\"http://www.sap.com/710/features/attachment/\">false</sapattahnd:Enabled><sp:TransportBinding xmlns:sp=\"http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702\"><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:TransportToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpsToken><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:HttpBasicAuthentication /></wsp:Policy></sp:HttpsToken></wsp:Policy></sp:TransportToken><sp:AlgorithmSuite><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:TripleDesRsa15 /></wsp:Policy></sp:AlgorithmSuite><sp:Layout><wsp:Policy xmlns:wsp=\"http://schemas.xmlsoap.org/ws/2004/09/policy\"><sp:Strict /></wsp:Policy></sp:Layout></wsp:Policy></sp:TransportBinding></wsp:All></wsp:ExactlyOne></wsp:Policy>"));

		_operations[0] = __operation;

	}

	// populates the faults
	private void populateFaults() {

	}

	/**
	 * Constructor that takes in a configContext
	 */

	public Z_SD_CUSTOMER_MAINTAIN_ALLStub(
			org.apache.axis2.context.ConfigurationContext configurationContext,
			java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
		this(configurationContext, targetEndpoint, false);
	}

	/**
	 * Constructor that takes in a configContext and useseperate listner
	 */
	public Z_SD_CUSTOMER_MAINTAIN_ALLStub(
			org.apache.axis2.context.ConfigurationContext configurationContext,
			java.lang.String targetEndpoint, boolean useSeparateListener)
			throws org.apache.axis2.AxisFault {
		// To populate AxisService
		populateAxisService();
		populateFaults();

		_serviceClient = new org.apache.axis2.client.ServiceClient(
				configurationContext, _service);

		_service.applyPolicy();

		_serviceClient.getOptions().setTo(
				new org.apache.axis2.addressing.EndpointReference(
						targetEndpoint));
		_serviceClient.getOptions().setUseSeparateListener(useSeparateListener);

	}

	/**
	 * Default Constructor
	 */
	public Z_SD_CUSTOMER_MAINTAIN_ALLStub(
			org.apache.axis2.context.ConfigurationContext configurationContext)
			throws org.apache.axis2.AxisFault {

		this(
				configurationContext,
				"http://ansrvora1.affinity.net:8000/sap/bc/srt/rfc/sap/z_sd_customer_maintain_all/300/z_sd_customer_maintain_all/z_sd_customer_maintain_all");

	}

	/**
	 * Default Constructor
	 */
	public Z_SD_CUSTOMER_MAINTAIN_ALLStub() throws org.apache.axis2.AxisFault {

		this(
				"http://ansrvora1.affinity.net:8000/sap/bc/srt/rfc/sap/z_sd_customer_maintain_all/300/z_sd_customer_maintain_all/z_sd_customer_maintain_all");

	}

	/**
	 * Constructor taking the target endpoint
	 */
	public Z_SD_CUSTOMER_MAINTAIN_ALLStub(java.lang.String targetEndpoint)
			throws org.apache.axis2.AxisFault {
		this(null, targetEndpoint);
	}

	/**
	 * Auto generated method signature
	 * 
	 * @see com.tactusoft.webservice.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALL#zsdCustomerMaintainAll
	 * @param zsdCustomerMaintainAll0
	 */

	public com.tactusoft.webservice.client.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALLStub.ZsdCustomerMaintainAllResponse zsdCustomerMaintainAll(

			com.tactusoft.webservice.client.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALLStub.ZsdCustomerMaintainAll zsdCustomerMaintainAll0)

	throws java.rmi.RemoteException

	{
		org.apache.axis2.context.MessageContext _messageContext = null;
		try {
			org.apache.axis2.client.OperationClient _operationClient = _serviceClient
					.createClient(_operations[0].getName());
			_operationClient
					.getOptions()
					.setAction(
							"urn:sap-com:document:sap:soap:functions:mc-style:Z_SD_CUSTOMER_MAINTAIN_ALL:ZsdCustomerMaintainAllRequest");
			_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(
					true);

			addPropertyToOperationClient(
					_operationClient,
					org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
					"&");

			// create a message context
			_messageContext = new org.apache.axis2.context.MessageContext();

			// create SOAP envelope with that payload
			org.apache.axiom.soap.SOAPEnvelope env = null;

			env = toEnvelope(getFactory(_operationClient.getOptions()
					.getSoapVersionURI()), zsdCustomerMaintainAll0,
					optimizeContent(new javax.xml.namespace.QName(
							"urn:sap-com:document:sap:soap:functions:mc-style",
							"zsdCustomerMaintainAll")),
					new javax.xml.namespace.QName(
							"urn:sap-com:document:sap:soap:functions:mc-style",
							"zsdCustomerMaintainAll"));

			// adding SOAP soap_headers
			_serviceClient.addHeadersToEnvelope(env);
			// set the message context with that soap envelope
			_messageContext.setEnvelope(env);

			// add the message contxt to the operation client
			_operationClient.addMessageContext(_messageContext);

			// execute the operation client
			_operationClient.execute(true);

			org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient
					.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
			org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext
					.getEnvelope();

			java.lang.Object object = fromOM(
					_returnEnv.getBody().getFirstElement(),
					com.tactusoft.webservice.client.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALLStub.ZsdCustomerMaintainAllResponse.class,
					getEnvelopeNamespaces(_returnEnv));

			return (com.tactusoft.webservice.client.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALLStub.ZsdCustomerMaintainAllResponse) object;

		} catch (org.apache.axis2.AxisFault f) {

			org.apache.axiom.om.OMElement faultElt = f.getDetail();
			if (faultElt != null) {
				if (faultExceptionNameMap
						.containsKey(new org.apache.axis2.client.FaultMapKey(
								faultElt.getQName(), "ZsdCustomerMaintainAll"))) {
					// make the fault by reflection
					try {
						java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
								.get(new org.apache.axis2.client.FaultMapKey(
										faultElt.getQName(),
										"ZsdCustomerMaintainAll"));
						java.lang.Class exceptionClass = java.lang.Class
								.forName(exceptionClassName);
						java.lang.reflect.Constructor constructor = exceptionClass
								.getConstructor(String.class);
						java.lang.Exception ex = (java.lang.Exception) constructor
								.newInstance(f.getMessage());
						// message class
						java.lang.String messageClassName = (java.lang.String) faultMessageMap
								.get(new org.apache.axis2.client.FaultMapKey(
										faultElt.getQName(),
										"ZsdCustomerMaintainAll"));
						java.lang.Class messageClass = java.lang.Class
								.forName(messageClassName);
						java.lang.Object messageObject = fromOM(faultElt,
								messageClass, null);
						java.lang.reflect.Method m = exceptionClass.getMethod(
								"setFaultMessage",
								new java.lang.Class[] { messageClass });
						m.invoke(ex, new java.lang.Object[] { messageObject });

						throw new java.rmi.RemoteException(ex.getMessage(), ex);
					} catch (java.lang.ClassCastException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.ClassNotFoundException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.NoSuchMethodException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.reflect.InvocationTargetException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.IllegalAccessException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					} catch (java.lang.InstantiationException e) {
						// we cannot intantiate the class - throw the original
						// Axis fault
						throw f;
					}
				} else {
					throw f;
				}
			} else {
				throw f;
			}
		} finally {
			if (_messageContext.getTransportOut() != null) {
				_messageContext.getTransportOut().getSender()
						.cleanup(_messageContext);
			}
		}
	}

	/**
	 * Auto generated method signature for Asynchronous Invocations
	 * 
	 * @see com.tactusoft.webservice.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALL#startzsdCustomerMaintainAll
	 * @param zsdCustomerMaintainAll0
	 */
	public void startzsdCustomerMaintainAll(

			com.tactusoft.webservice.client.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALLStub.ZsdCustomerMaintainAll zsdCustomerMaintainAll0,

			final com.tactusoft.webservice.client.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALLCallbackHandler callback)

	throws java.rmi.RemoteException {

		org.apache.axis2.client.OperationClient _operationClient = _serviceClient
				.createClient(_operations[0].getName());
		_operationClient
				.getOptions()
				.setAction(
						"urn:sap-com:document:sap:soap:functions:mc-style:Z_SD_CUSTOMER_MAINTAIN_ALL:ZsdCustomerMaintainAllRequest");
		_operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

		addPropertyToOperationClient(
				_operationClient,
				org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
				"&");

		// create SOAP envelope with that payload
		org.apache.axiom.soap.SOAPEnvelope env = null;
		final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

		// Style is Doc.

		env = toEnvelope(getFactory(_operationClient.getOptions()
				.getSoapVersionURI()), zsdCustomerMaintainAll0,
				optimizeContent(new javax.xml.namespace.QName(
						"urn:sap-com:document:sap:soap:functions:mc-style",
						"zsdCustomerMaintainAll")),
				new javax.xml.namespace.QName(
						"urn:sap-com:document:sap:soap:functions:mc-style",
						"zsdCustomerMaintainAll"));

		// adding SOAP soap_headers
		_serviceClient.addHeadersToEnvelope(env);
		// create message context with that soap envelope
		_messageContext.setEnvelope(env);

		// add the message context to the operation client
		_operationClient.addMessageContext(_messageContext);

		_operationClient
				.setCallback(new org.apache.axis2.client.async.AxisCallback() {
					public void onMessage(
							org.apache.axis2.context.MessageContext resultContext) {
						try {
							org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext
									.getEnvelope();

							java.lang.Object object = fromOM(
									resultEnv.getBody().getFirstElement(),
									com.tactusoft.webservice.client.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALLStub.ZsdCustomerMaintainAllResponse.class,
									getEnvelopeNamespaces(resultEnv));
							callback.receiveResultzsdCustomerMaintainAll((com.tactusoft.webservice.client.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALLStub.ZsdCustomerMaintainAllResponse) object);

						} catch (org.apache.axis2.AxisFault e) {
							callback.receiveErrorzsdCustomerMaintainAll(e);
						}
					}

					public void onError(java.lang.Exception error) {
						if (error instanceof org.apache.axis2.AxisFault) {
							org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
							org.apache.axiom.om.OMElement faultElt = f
									.getDetail();
							if (faultElt != null) {
								if (faultExceptionNameMap
										.containsKey(new org.apache.axis2.client.FaultMapKey(
												faultElt.getQName(),
												"ZsdCustomerMaintainAll"))) {
									// make the fault by reflection
									try {
										java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap
												.get(new org.apache.axis2.client.FaultMapKey(
														faultElt.getQName(),
														"ZsdCustomerMaintainAll"));
										java.lang.Class exceptionClass = java.lang.Class
												.forName(exceptionClassName);
										java.lang.reflect.Constructor constructor = exceptionClass
												.getConstructor(String.class);
										java.lang.Exception ex = (java.lang.Exception) constructor
												.newInstance(f.getMessage());
										// message class
										java.lang.String messageClassName = (java.lang.String) faultMessageMap
												.get(new org.apache.axis2.client.FaultMapKey(
														faultElt.getQName(),
														"ZsdCustomerMaintainAll"));
										java.lang.Class messageClass = java.lang.Class
												.forName(messageClassName);
										java.lang.Object messageObject = fromOM(
												faultElt, messageClass, null);
										java.lang.reflect.Method m = exceptionClass
												.getMethod(
														"setFaultMessage",
														new java.lang.Class[] { messageClass });
										m.invoke(
												ex,
												new java.lang.Object[] { messageObject });

										callback.receiveErrorzsdCustomerMaintainAll(new java.rmi.RemoteException(
												ex.getMessage(), ex));
									} catch (java.lang.ClassCastException e) {
										// we cannot intantiate the class -
										// throw the original Axis fault
										callback.receiveErrorzsdCustomerMaintainAll(f);
									} catch (java.lang.ClassNotFoundException e) {
										// we cannot intantiate the class -
										// throw the original Axis fault
										callback.receiveErrorzsdCustomerMaintainAll(f);
									} catch (java.lang.NoSuchMethodException e) {
										// we cannot intantiate the class -
										// throw the original Axis fault
										callback.receiveErrorzsdCustomerMaintainAll(f);
									} catch (java.lang.reflect.InvocationTargetException e) {
										// we cannot intantiate the class -
										// throw the original Axis fault
										callback.receiveErrorzsdCustomerMaintainAll(f);
									} catch (java.lang.IllegalAccessException e) {
										// we cannot intantiate the class -
										// throw the original Axis fault
										callback.receiveErrorzsdCustomerMaintainAll(f);
									} catch (java.lang.InstantiationException e) {
										// we cannot intantiate the class -
										// throw the original Axis fault
										callback.receiveErrorzsdCustomerMaintainAll(f);
									} catch (org.apache.axis2.AxisFault e) {
										// we cannot intantiate the class -
										// throw the original Axis fault
										callback.receiveErrorzsdCustomerMaintainAll(f);
									}
								} else {
									callback.receiveErrorzsdCustomerMaintainAll(f);
								}
							} else {
								callback.receiveErrorzsdCustomerMaintainAll(f);
							}
						} else {
							callback.receiveErrorzsdCustomerMaintainAll(error);
						}
					}

					public void onFault(
							org.apache.axis2.context.MessageContext faultContext) {
						org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils
								.getInboundFaultFromMessageContext(faultContext);
						onError(fault);
					}

					public void onComplete() {
						try {
							_messageContext.getTransportOut().getSender()
									.cleanup(_messageContext);
						} catch (org.apache.axis2.AxisFault axisFault) {
							callback.receiveErrorzsdCustomerMaintainAll(axisFault);
						}
					}
				});

		org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
		if (_operations[0].getMessageReceiver() == null
				&& _operationClient.getOptions().isUseSeparateListener()) {
			_callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
			_operations[0].setMessageReceiver(_callbackReceiver);
		}

		// execute the operation client
		_operationClient.execute(false);

	}

	/**
	 * A utility method that copies the namepaces from the SOAPEnvelope
	 */
	private java.util.Map getEnvelopeNamespaces(
			org.apache.axiom.soap.SOAPEnvelope env) {
		java.util.Map returnMap = new java.util.HashMap();
		java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
		while (namespaceIterator.hasNext()) {
			org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator
					.next();
			returnMap.put(ns.getPrefix(), ns.getNamespaceURI());
		}
		return returnMap;
	}

	// //////////////////////////////////////////////////////////////////////

	private static org.apache.neethi.Policy getPolicy(
			java.lang.String policyString) {
		return org.apache.neethi.PolicyEngine
				.getPolicy(org.apache.axiom.om.OMXMLBuilderFactory
						.createOMBuilder(new java.io.StringReader(policyString))
						.getDocument().getXMLStreamReader(false));
	}

	// ///////////////////////////////////////////////////////////////////////

	private javax.xml.namespace.QName[] opNameArray = null;

	private boolean optimizeContent(javax.xml.namespace.QName opName) {

		if (opNameArray == null) {
			return false;
		}
		for (int i = 0; i < opNameArray.length; i++) {
			if (opName.equals(opNameArray[i])) {
				return true;
			}
		}
		return false;
	}

	// http://ansrvora1.affinity.net:8000/sap/bc/srt/rfc/sap/z_sd_customer_maintain_all/300/z_sd_customer_maintain_all/z_sd_customer_maintain_all
	public static class ZsdCustomerMaintainAllResponse implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:soap:functions:mc-style",
				"ZsdCustomerMaintainAllResponse", "ns1");

		/**
		 * field for ZeKunnr
		 */

		protected Char10 localZeKunnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getZeKunnr() {
			return localZeKunnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZeKunnr
		 */
		public void setZeKunnr(Char10 param) {

			this.localZeKunnr = param;

		}

		/**
		 * field for ZoKna1
		 */

		protected Kna1 localZoKna1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Kna1
		 */
		public Kna1 getZoKna1() {
			return localZoKna1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZoKna1
		 */
		public void setZoKna1(Kna1 param) {

			this.localZoKna1 = param;

		}

		/**
		 * field for ZsyMsgid
		 */

		protected Char20 localZsyMsgid;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char20
		 */
		public Char20 getZsyMsgid() {
			return localZsyMsgid;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZsyMsgid
		 */
		public void setZsyMsgid(Char20 param) {

			this.localZsyMsgid = param;

		}

		/**
		 * field for ZsyMsgno
		 */

		protected Numeric3 localZsyMsgno;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric3
		 */
		public Numeric3 getZsyMsgno() {
			return localZsyMsgno;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZsyMsgno
		 */
		public void setZsyMsgno(Numeric3 param) {

			this.localZsyMsgno = param;

		}

		/**
		 * field for ZsyMsgty
		 */

		protected Char1 localZsyMsgty;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getZsyMsgty() {
			return localZsyMsgty;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZsyMsgty
		 */
		public void setZsyMsgty(Char1 param) {

			this.localZsyMsgty = param;

		}

		/**
		 * field for ZsyMsgv1
		 */

		protected Char50 localZsyMsgv1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char50
		 */
		public Char50 getZsyMsgv1() {
			return localZsyMsgv1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZsyMsgv1
		 */
		public void setZsyMsgv1(Char50 param) {

			this.localZsyMsgv1 = param;

		}

		/**
		 * field for ZsyMsgv2
		 */

		protected Char50 localZsyMsgv2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char50
		 */
		public Char50 getZsyMsgv2() {
			return localZsyMsgv2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZsyMsgv2
		 */
		public void setZsyMsgv2(Char50 param) {

			this.localZsyMsgv2 = param;

		}

		/**
		 * field for ZsyMsgv3
		 */

		protected Char50 localZsyMsgv3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char50
		 */
		public Char50 getZsyMsgv3() {
			return localZsyMsgv3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZsyMsgv3
		 */
		public void setZsyMsgv3(Char50 param) {

			this.localZsyMsgv3 = param;

		}

		/**
		 * field for ZsyMsgv4
		 */

		protected Char50 localZsyMsgv4;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char50
		 */
		public Char50 getZsyMsgv4() {
			return localZsyMsgv4;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZsyMsgv4
		 */
		public void setZsyMsgv4(Char50 param) {

			this.localZsyMsgv4 = param;

		}

		/**
		 * field for ZsySubrc
		 */

		protected int localZsySubrc;

		/**
		 * Auto generated getter method
		 * 
		 * @return int
		 */
		public int getZsySubrc() {
			return localZsySubrc;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZsySubrc
		 */
		public void setZsySubrc(int param) {

			this.localZsySubrc = param;

		}

		/**
		 * field for ZtUpdTxt
		 */

		protected TableOfFkuntxt localZtUpdTxt;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFkuntxt
		 */
		public TableOfFkuntxt getZtUpdTxt() {
			return localZtUpdTxt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtUpdTxt
		 */
		public void setZtUpdTxt(TableOfFkuntxt param) {

			this.localZtUpdTxt = param;

		}

		/**
		 * field for ZtXknas
		 */

		protected TableOfFknas localZtXknas;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknas
		 */
		public TableOfFknas getZtXknas() {
			return localZtXknas;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknas
		 */
		public void setZtXknas(TableOfFknas param) {

			this.localZtXknas = param;

		}

		/**
		 * field for ZtXknb5
		 */

		protected TableOfFknb5 localZtXknb5;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknb5
		 */
		public TableOfFknb5 getZtXknb5() {
			return localZtXknb5;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknb5
		 */
		public void setZtXknb5(TableOfFknb5 param) {

			this.localZtXknb5 = param;

		}

		/**
		 * field for ZtXknbk
		 */

		protected TableOfFknbk localZtXknbk;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknbk
		 */
		public TableOfFknbk getZtXknbk() {
			return localZtXknbk;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknbk
		 */
		public void setZtXknbk(TableOfFknbk param) {

			this.localZtXknbk = param;

		}

		/**
		 * field for ZtXknex
		 */

		protected TableOfFknex localZtXknex;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknex
		 */
		public TableOfFknex getZtXknex() {
			return localZtXknex;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknex
		 */
		public void setZtXknex(TableOfFknex param) {

			this.localZtXknex = param;

		}

		/**
		 * field for ZtXknva
		 */

		protected TableOfFknva localZtXknva;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknva
		 */
		public TableOfFknva getZtXknva() {
			return localZtXknva;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknva
		 */
		public void setZtXknva(TableOfFknva param) {

			this.localZtXknva = param;

		}

		/**
		 * field for ZtXknvd
		 */

		protected TableOfFknvd localZtXknvd;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvd
		 */
		public TableOfFknvd getZtXknvd() {
			return localZtXknvd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknvd
		 */
		public void setZtXknvd(TableOfFknvd param) {

			this.localZtXknvd = param;

		}

		/**
		 * field for ZtXknvi
		 */

		protected TableOfFknvi localZtXknvi;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvi
		 */
		public TableOfFknvi getZtXknvi() {
			return localZtXknvi;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknvi
		 */
		public void setZtXknvi(TableOfFknvi param) {

			this.localZtXknvi = param;

		}

		/**
		 * field for ZtXknvk
		 */

		protected TableOfFknvk localZtXknvk;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvk
		 */
		public TableOfFknvk getZtXknvk() {
			return localZtXknvk;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknvk
		 */
		public void setZtXknvk(TableOfFknvk param) {

			this.localZtXknvk = param;

		}

		/**
		 * field for ZtXknvl
		 */

		protected TableOfFknvl localZtXknvl;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvl
		 */
		public TableOfFknvl getZtXknvl() {
			return localZtXknvl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknvl
		 */
		public void setZtXknvl(TableOfFknvl param) {

			this.localZtXknvl = param;

		}

		/**
		 * field for ZtXknvp
		 */

		protected TableOfFknvp localZtXknvp;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvp
		 */
		public TableOfFknvp getZtXknvp() {
			return localZtXknvp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknvp
		 */
		public void setZtXknvp(TableOfFknvp param) {

			this.localZtXknvp = param;

		}

		/**
		 * field for ZtXknza
		 */

		protected TableOfFknza localZtXknza;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknza
		 */
		public TableOfFknza getZtXknza() {
			return localZtXknza;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknza
		 */
		public void setZtXknza(TableOfFknza param) {

			this.localZtXknza = param;

		}

		/**
		 * field for ZtYknas
		 */

		protected TableOfFknas localZtYknas;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknas
		 */
		public TableOfFknas getZtYknas() {
			return localZtYknas;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknas
		 */
		public void setZtYknas(TableOfFknas param) {

			this.localZtYknas = param;

		}

		/**
		 * field for ZtYknb5
		 */

		protected TableOfFknb5 localZtYknb5;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknb5
		 */
		public TableOfFknb5 getZtYknb5() {
			return localZtYknb5;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknb5
		 */
		public void setZtYknb5(TableOfFknb5 param) {

			this.localZtYknb5 = param;

		}

		/**
		 * field for ZtYknbk
		 */

		protected TableOfFknbk localZtYknbk;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknbk
		 */
		public TableOfFknbk getZtYknbk() {
			return localZtYknbk;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknbk
		 */
		public void setZtYknbk(TableOfFknbk param) {

			this.localZtYknbk = param;

		}

		/**
		 * field for ZtYknex
		 */

		protected TableOfFknex localZtYknex;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknex
		 */
		public TableOfFknex getZtYknex() {
			return localZtYknex;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknex
		 */
		public void setZtYknex(TableOfFknex param) {

			this.localZtYknex = param;

		}

		/**
		 * field for ZtYknva
		 */

		protected TableOfFknva localZtYknva;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknva
		 */
		public TableOfFknva getZtYknva() {
			return localZtYknva;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknva
		 */
		public void setZtYknva(TableOfFknva param) {

			this.localZtYknva = param;

		}

		/**
		 * field for ZtYknvd
		 */

		protected TableOfFknvd localZtYknvd;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvd
		 */
		public TableOfFknvd getZtYknvd() {
			return localZtYknvd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknvd
		 */
		public void setZtYknvd(TableOfFknvd param) {

			this.localZtYknvd = param;

		}

		/**
		 * field for ZtYknvi
		 */

		protected TableOfFknvi localZtYknvi;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvi
		 */
		public TableOfFknvi getZtYknvi() {
			return localZtYknvi;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknvi
		 */
		public void setZtYknvi(TableOfFknvi param) {

			this.localZtYknvi = param;

		}

		/**
		 * field for ZtYknvk
		 */

		protected TableOfFknvk localZtYknvk;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvk
		 */
		public TableOfFknvk getZtYknvk() {
			return localZtYknvk;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknvk
		 */
		public void setZtYknvk(TableOfFknvk param) {

			this.localZtYknvk = param;

		}

		/**
		 * field for ZtYknvl
		 */

		protected TableOfFknvl localZtYknvl;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvl
		 */
		public TableOfFknvl getZtYknvl() {
			return localZtYknvl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknvl
		 */
		public void setZtYknvl(TableOfFknvl param) {

			this.localZtYknvl = param;

		}

		/**
		 * field for ZtYknvp
		 */

		protected TableOfFknvp localZtYknvp;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvp
		 */
		public TableOfFknvp getZtYknvp() {
			return localZtYknvp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknvp
		 */
		public void setZtYknvp(TableOfFknvp param) {

			this.localZtYknvp = param;

		}

		/**
		 * field for ZtYknza
		 */

		protected TableOfFknza localZtYknza;

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknza
		 */
		public TableOfFknza getZtYknza() {
			return localZtYknza;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknza
		 */
		public void setZtYknza(TableOfFknza param) {

			this.localZtYknza = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix
									+ ":ZsdCustomerMaintainAllResponse",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "ZsdCustomerMaintainAllResponse", xmlWriter);
				}

			}

			if (localZeKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZeKunnr cannot be null!!");
			}
			localZeKunnr.serialize(
					new javax.xml.namespace.QName("", "ZeKunnr"), xmlWriter);

			if (localZoKna1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZoKna1 cannot be null!!");
			}
			localZoKna1.serialize(new javax.xml.namespace.QName("", "ZoKna1"),
					xmlWriter);

			if (localZsyMsgid == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZsyMsgid cannot be null!!");
			}
			localZsyMsgid.serialize(new javax.xml.namespace.QName("",
					"ZsyMsgid"), xmlWriter);

			if (localZsyMsgno == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZsyMsgno cannot be null!!");
			}
			localZsyMsgno.serialize(new javax.xml.namespace.QName("",
					"ZsyMsgno"), xmlWriter);

			if (localZsyMsgty == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZsyMsgty cannot be null!!");
			}
			localZsyMsgty.serialize(new javax.xml.namespace.QName("",
					"ZsyMsgty"), xmlWriter);

			if (localZsyMsgv1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZsyMsgv1 cannot be null!!");
			}
			localZsyMsgv1.serialize(new javax.xml.namespace.QName("",
					"ZsyMsgv1"), xmlWriter);

			if (localZsyMsgv2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZsyMsgv2 cannot be null!!");
			}
			localZsyMsgv2.serialize(new javax.xml.namespace.QName("",
					"ZsyMsgv2"), xmlWriter);

			if (localZsyMsgv3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZsyMsgv3 cannot be null!!");
			}
			localZsyMsgv3.serialize(new javax.xml.namespace.QName("",
					"ZsyMsgv3"), xmlWriter);

			if (localZsyMsgv4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZsyMsgv4 cannot be null!!");
			}
			localZsyMsgv4.serialize(new javax.xml.namespace.QName("",
					"ZsyMsgv4"), xmlWriter);

			namespace = "";
			writeStartElement(null, namespace, "ZsySubrc", xmlWriter);

			if (localZsySubrc == java.lang.Integer.MIN_VALUE) {

				throw new org.apache.axis2.databinding.ADBException(
						"ZsySubrc cannot be null!!");

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localZsySubrc));
			}

			xmlWriter.writeEndElement();

			if (localZtUpdTxt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtUpdTxt cannot be null!!");
			}
			localZtUpdTxt.serialize(new javax.xml.namespace.QName("",
					"ZtUpdTxt"), xmlWriter);

			if (localZtXknas == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknas cannot be null!!");
			}
			localZtXknas.serialize(
					new javax.xml.namespace.QName("", "ZtXknas"), xmlWriter);

			if (localZtXknb5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknb5 cannot be null!!");
			}
			localZtXknb5.serialize(
					new javax.xml.namespace.QName("", "ZtXknb5"), xmlWriter);

			if (localZtXknbk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknbk cannot be null!!");
			}
			localZtXknbk.serialize(
					new javax.xml.namespace.QName("", "ZtXknbk"), xmlWriter);

			if (localZtXknex == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknex cannot be null!!");
			}
			localZtXknex.serialize(
					new javax.xml.namespace.QName("", "ZtXknex"), xmlWriter);

			if (localZtXknva == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknva cannot be null!!");
			}
			localZtXknva.serialize(
					new javax.xml.namespace.QName("", "ZtXknva"), xmlWriter);

			if (localZtXknvd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknvd cannot be null!!");
			}
			localZtXknvd.serialize(
					new javax.xml.namespace.QName("", "ZtXknvd"), xmlWriter);

			if (localZtXknvi == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknvi cannot be null!!");
			}
			localZtXknvi.serialize(
					new javax.xml.namespace.QName("", "ZtXknvi"), xmlWriter);

			if (localZtXknvk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknvk cannot be null!!");
			}
			localZtXknvk.serialize(
					new javax.xml.namespace.QName("", "ZtXknvk"), xmlWriter);

			if (localZtXknvl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknvl cannot be null!!");
			}
			localZtXknvl.serialize(
					new javax.xml.namespace.QName("", "ZtXknvl"), xmlWriter);

			if (localZtXknvp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknvp cannot be null!!");
			}
			localZtXknvp.serialize(
					new javax.xml.namespace.QName("", "ZtXknvp"), xmlWriter);

			if (localZtXknza == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknza cannot be null!!");
			}
			localZtXknza.serialize(
					new javax.xml.namespace.QName("", "ZtXknza"), xmlWriter);

			if (localZtYknas == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknas cannot be null!!");
			}
			localZtYknas.serialize(
					new javax.xml.namespace.QName("", "ZtYknas"), xmlWriter);

			if (localZtYknb5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknb5 cannot be null!!");
			}
			localZtYknb5.serialize(
					new javax.xml.namespace.QName("", "ZtYknb5"), xmlWriter);

			if (localZtYknbk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknbk cannot be null!!");
			}
			localZtYknbk.serialize(
					new javax.xml.namespace.QName("", "ZtYknbk"), xmlWriter);

			if (localZtYknex == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknex cannot be null!!");
			}
			localZtYknex.serialize(
					new javax.xml.namespace.QName("", "ZtYknex"), xmlWriter);

			if (localZtYknva == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknva cannot be null!!");
			}
			localZtYknva.serialize(
					new javax.xml.namespace.QName("", "ZtYknva"), xmlWriter);

			if (localZtYknvd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknvd cannot be null!!");
			}
			localZtYknvd.serialize(
					new javax.xml.namespace.QName("", "ZtYknvd"), xmlWriter);

			if (localZtYknvi == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknvi cannot be null!!");
			}
			localZtYknvi.serialize(
					new javax.xml.namespace.QName("", "ZtYknvi"), xmlWriter);

			if (localZtYknvk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknvk cannot be null!!");
			}
			localZtYknvk.serialize(
					new javax.xml.namespace.QName("", "ZtYknvk"), xmlWriter);

			if (localZtYknvl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknvl cannot be null!!");
			}
			localZtYknvl.serialize(
					new javax.xml.namespace.QName("", "ZtYknvl"), xmlWriter);

			if (localZtYknvp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknvp cannot be null!!");
			}
			localZtYknvp.serialize(
					new javax.xml.namespace.QName("", "ZtYknvp"), xmlWriter);

			if (localZtYknza == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknza cannot be null!!");
			}
			localZtYknza.serialize(
					new javax.xml.namespace.QName("", "ZtYknza"), xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "ZeKunnr"));

			if (localZeKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZeKunnr cannot be null!!");
			}
			elementList.add(localZeKunnr);

			elementList.add(new javax.xml.namespace.QName("", "ZoKna1"));

			if (localZoKna1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZoKna1 cannot be null!!");
			}
			elementList.add(localZoKna1);

			elementList.add(new javax.xml.namespace.QName("", "ZsyMsgid"));

			if (localZsyMsgid == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZsyMsgid cannot be null!!");
			}
			elementList.add(localZsyMsgid);

			elementList.add(new javax.xml.namespace.QName("", "ZsyMsgno"));

			if (localZsyMsgno == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZsyMsgno cannot be null!!");
			}
			elementList.add(localZsyMsgno);

			elementList.add(new javax.xml.namespace.QName("", "ZsyMsgty"));

			if (localZsyMsgty == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZsyMsgty cannot be null!!");
			}
			elementList.add(localZsyMsgty);

			elementList.add(new javax.xml.namespace.QName("", "ZsyMsgv1"));

			if (localZsyMsgv1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZsyMsgv1 cannot be null!!");
			}
			elementList.add(localZsyMsgv1);

			elementList.add(new javax.xml.namespace.QName("", "ZsyMsgv2"));

			if (localZsyMsgv2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZsyMsgv2 cannot be null!!");
			}
			elementList.add(localZsyMsgv2);

			elementList.add(new javax.xml.namespace.QName("", "ZsyMsgv3"));

			if (localZsyMsgv3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZsyMsgv3 cannot be null!!");
			}
			elementList.add(localZsyMsgv3);

			elementList.add(new javax.xml.namespace.QName("", "ZsyMsgv4"));

			if (localZsyMsgv4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZsyMsgv4 cannot be null!!");
			}
			elementList.add(localZsyMsgv4);

			elementList.add(new javax.xml.namespace.QName("", "ZsySubrc"));

			elementList.add(org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(localZsySubrc));

			elementList.add(new javax.xml.namespace.QName("", "ZtUpdTxt"));

			if (localZtUpdTxt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtUpdTxt cannot be null!!");
			}
			elementList.add(localZtUpdTxt);

			elementList.add(new javax.xml.namespace.QName("", "ZtXknas"));

			if (localZtXknas == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknas cannot be null!!");
			}
			elementList.add(localZtXknas);

			elementList.add(new javax.xml.namespace.QName("", "ZtXknb5"));

			if (localZtXknb5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknb5 cannot be null!!");
			}
			elementList.add(localZtXknb5);

			elementList.add(new javax.xml.namespace.QName("", "ZtXknbk"));

			if (localZtXknbk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknbk cannot be null!!");
			}
			elementList.add(localZtXknbk);

			elementList.add(new javax.xml.namespace.QName("", "ZtXknex"));

			if (localZtXknex == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknex cannot be null!!");
			}
			elementList.add(localZtXknex);

			elementList.add(new javax.xml.namespace.QName("", "ZtXknva"));

			if (localZtXknva == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknva cannot be null!!");
			}
			elementList.add(localZtXknva);

			elementList.add(new javax.xml.namespace.QName("", "ZtXknvd"));

			if (localZtXknvd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknvd cannot be null!!");
			}
			elementList.add(localZtXknvd);

			elementList.add(new javax.xml.namespace.QName("", "ZtXknvi"));

			if (localZtXknvi == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknvi cannot be null!!");
			}
			elementList.add(localZtXknvi);

			elementList.add(new javax.xml.namespace.QName("", "ZtXknvk"));

			if (localZtXknvk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknvk cannot be null!!");
			}
			elementList.add(localZtXknvk);

			elementList.add(new javax.xml.namespace.QName("", "ZtXknvl"));

			if (localZtXknvl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknvl cannot be null!!");
			}
			elementList.add(localZtXknvl);

			elementList.add(new javax.xml.namespace.QName("", "ZtXknvp"));

			if (localZtXknvp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknvp cannot be null!!");
			}
			elementList.add(localZtXknvp);

			elementList.add(new javax.xml.namespace.QName("", "ZtXknza"));

			if (localZtXknza == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtXknza cannot be null!!");
			}
			elementList.add(localZtXknza);

			elementList.add(new javax.xml.namespace.QName("", "ZtYknas"));

			if (localZtYknas == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknas cannot be null!!");
			}
			elementList.add(localZtYknas);

			elementList.add(new javax.xml.namespace.QName("", "ZtYknb5"));

			if (localZtYknb5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknb5 cannot be null!!");
			}
			elementList.add(localZtYknb5);

			elementList.add(new javax.xml.namespace.QName("", "ZtYknbk"));

			if (localZtYknbk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknbk cannot be null!!");
			}
			elementList.add(localZtYknbk);

			elementList.add(new javax.xml.namespace.QName("", "ZtYknex"));

			if (localZtYknex == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknex cannot be null!!");
			}
			elementList.add(localZtYknex);

			elementList.add(new javax.xml.namespace.QName("", "ZtYknva"));

			if (localZtYknva == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknva cannot be null!!");
			}
			elementList.add(localZtYknva);

			elementList.add(new javax.xml.namespace.QName("", "ZtYknvd"));

			if (localZtYknvd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknvd cannot be null!!");
			}
			elementList.add(localZtYknvd);

			elementList.add(new javax.xml.namespace.QName("", "ZtYknvi"));

			if (localZtYknvi == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknvi cannot be null!!");
			}
			elementList.add(localZtYknvi);

			elementList.add(new javax.xml.namespace.QName("", "ZtYknvk"));

			if (localZtYknvk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknvk cannot be null!!");
			}
			elementList.add(localZtYknvk);

			elementList.add(new javax.xml.namespace.QName("", "ZtYknvl"));

			if (localZtYknvl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknvl cannot be null!!");
			}
			elementList.add(localZtYknvl);

			elementList.add(new javax.xml.namespace.QName("", "ZtYknvp"));

			if (localZtYknvp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknvp cannot be null!!");
			}
			elementList.add(localZtYknvp);

			elementList.add(new javax.xml.namespace.QName("", "ZtYknza"));

			if (localZtYknza == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZtYknza cannot be null!!");
			}
			elementList.add(localZtYknza);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static ZsdCustomerMaintainAllResponse parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				ZsdCustomerMaintainAllResponse object = new ZsdCustomerMaintainAllResponse();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"ZsdCustomerMaintainAllResponse".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (ZsdCustomerMaintainAllResponse) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZeKunnr")
									.equals(reader.getName())) {

						object.setZeKunnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZoKna1")
									.equals(reader.getName())) {

						object.setZoKna1(Kna1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZsyMsgid")
									.equals(reader.getName())) {

						object.setZsyMsgid(Char20.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZsyMsgno")
									.equals(reader.getName())) {

						object.setZsyMsgno(Numeric3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZsyMsgty")
									.equals(reader.getName())) {

						object.setZsyMsgty(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZsyMsgv1")
									.equals(reader.getName())) {

						object.setZsyMsgv1(Char50.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZsyMsgv2")
									.equals(reader.getName())) {

						object.setZsyMsgv2(Char50.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZsyMsgv3")
									.equals(reader.getName())) {

						object.setZsyMsgv3(Char50.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZsyMsgv4")
									.equals(reader.getName())) {

						object.setZsyMsgv4(Char50.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZsySubrc")
									.equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "ZsySubrc"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setZsySubrc(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToInt(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtUpdTxt")
									.equals(reader.getName())) {

						object.setZtUpdTxt(TableOfFkuntxt.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknas")
									.equals(reader.getName())) {

						object.setZtXknas(TableOfFknas.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknb5")
									.equals(reader.getName())) {

						object.setZtXknb5(TableOfFknb5.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknbk")
									.equals(reader.getName())) {

						object.setZtXknbk(TableOfFknbk.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknex")
									.equals(reader.getName())) {

						object.setZtXknex(TableOfFknex.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknva")
									.equals(reader.getName())) {

						object.setZtXknva(TableOfFknva.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknvd")
									.equals(reader.getName())) {

						object.setZtXknvd(TableOfFknvd.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknvi")
									.equals(reader.getName())) {

						object.setZtXknvi(TableOfFknvi.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknvk")
									.equals(reader.getName())) {

						object.setZtXknvk(TableOfFknvk.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknvl")
									.equals(reader.getName())) {

						object.setZtXknvl(TableOfFknvl.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknvp")
									.equals(reader.getName())) {

						object.setZtXknvp(TableOfFknvp.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknza")
									.equals(reader.getName())) {

						object.setZtXknza(TableOfFknza.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknas")
									.equals(reader.getName())) {

						object.setZtYknas(TableOfFknas.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknb5")
									.equals(reader.getName())) {

						object.setZtYknb5(TableOfFknb5.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknbk")
									.equals(reader.getName())) {

						object.setZtYknbk(TableOfFknbk.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknex")
									.equals(reader.getName())) {

						object.setZtYknex(TableOfFknex.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknva")
									.equals(reader.getName())) {

						object.setZtYknva(TableOfFknva.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknvd")
									.equals(reader.getName())) {

						object.setZtYknvd(TableOfFknvd.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknvi")
									.equals(reader.getName())) {

						object.setZtYknvi(TableOfFknvi.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknvk")
									.equals(reader.getName())) {

						object.setZtYknvk(TableOfFknvk.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknvl")
									.equals(reader.getName())) {

						object.setZtYknvl(TableOfFknvl.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknvp")
									.equals(reader.getName())) {

						object.setZtYknvp(TableOfFknvp.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknza")
									.equals(reader.getName())) {

						object.setZtYknza(TableOfFknza.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Fknza implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * Fknza Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Mandt
		 */

		protected Clnt3 localMandt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Clnt3
		 */
		public Clnt3 getMandt() {
			return localMandt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mandt
		 */
		public void setMandt(Clnt3 param) {

			this.localMandt = param;

		}

		/**
		 * field for Kunnr
		 */

		protected Char10 localKunnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKunnr() {
			return localKunnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kunnr
		 */
		public void setKunnr(Char10 param) {

			this.localKunnr = param;

		}

		/**
		 * field for Bukrs
		 */

		protected Char4 localBukrs;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getBukrs() {
			return localBukrs;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bukrs
		 */
		public void setBukrs(Char4 param) {

			this.localBukrs = param;

		}

		/**
		 * field for Empfd
		 */

		protected Char10 localEmpfd;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getEmpfd() {
			return localEmpfd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Empfd
		 */
		public void setEmpfd(Char10 param) {

			this.localEmpfd = param;

		}

		/**
		 * field for Kz
		 */

		protected Char1 localKz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getKz() {
			return localKz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kz
		 */
		public void setKz(Char1 param) {

			this.localKz = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Fknza", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Fknza", xmlWriter);
				}

			}

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			localMandt.serialize(new javax.xml.namespace.QName("", "Mandt"),
					xmlWriter);

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			localKunnr.serialize(new javax.xml.namespace.QName("", "Kunnr"),
					xmlWriter);

			if (localBukrs == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bukrs cannot be null!!");
			}
			localBukrs.serialize(new javax.xml.namespace.QName("", "Bukrs"),
					xmlWriter);

			if (localEmpfd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Empfd cannot be null!!");
			}
			localEmpfd.serialize(new javax.xml.namespace.QName("", "Empfd"),
					xmlWriter);

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			localKz.serialize(new javax.xml.namespace.QName("", "Kz"),
					xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "Mandt"));

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			elementList.add(localMandt);

			elementList.add(new javax.xml.namespace.QName("", "Kunnr"));

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			elementList.add(localKunnr);

			elementList.add(new javax.xml.namespace.QName("", "Bukrs"));

			if (localBukrs == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bukrs cannot be null!!");
			}
			elementList.add(localBukrs);

			elementList.add(new javax.xml.namespace.QName("", "Empfd"));

			if (localEmpfd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Empfd cannot be null!!");
			}
			elementList.add(localEmpfd);

			elementList.add(new javax.xml.namespace.QName("", "Kz"));

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			elementList.add(localKz);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Fknza parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Fknza object = new Fknza();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"Fknza".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Fknza) ExtensionMapper.getTypeObject(
										nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mandt")
									.equals(reader.getName())) {

						object.setMandt(Clnt3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kunnr")
									.equals(reader.getName())) {

						object.setKunnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bukrs")
									.equals(reader.getName())) {

						object.setBukrs(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Empfd")
									.equals(reader.getName())) {

						object.setEmpfd(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kz")
									.equals(reader.getName())) {

						object.setKz(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char20 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char20", "ns2");

		/**
		 * field for Char20
		 */

		protected java.lang.String localChar20;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar20() {
			return localChar20;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char20
		 */
		public void setChar20(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 20)) {
				this.localChar20 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar20.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char20", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char20", xmlWriter);
				}
			}

			if (localChar20 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char20 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar20);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar20) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char20 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char20 returnValue = new Char20();

				returnValue
						.setChar20(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char20 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char20.Factory.fromString(content, namespaceUri);
				} else {
					return Char20.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char20 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char20 object = new Char20();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char20"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar20(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char60 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char60", "ns2");

		/**
		 * field for Char60
		 */

		protected java.lang.String localChar60;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar60() {
			return localChar60;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char60
		 */
		public void setChar60(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 60)) {
				this.localChar60 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar60.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char60", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char60", xmlWriter);
				}
			}

			if (localChar60 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char60 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar60);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar60) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char60 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char60 returnValue = new Char60();

				returnValue
						.setChar60(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char60 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char60.Factory.fromString(content, namespaceUri);
				} else {
					return Char60.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char60 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char60 object = new Char60();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char60"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar60(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char25 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char25", "ns2");

		/**
		 * field for Char25
		 */

		protected java.lang.String localChar25;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar25() {
			return localChar25;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char25
		 */
		public void setChar25(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 25)) {
				this.localChar25 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar25.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char25", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char25", xmlWriter);
				}
			}

			if (localChar25 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char25 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar25);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar25) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char25 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char25 returnValue = new Char25();

				returnValue
						.setChar25(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char25 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char25.Factory.fromString(content, namespaceUri);
				} else {
					return Char25.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char25 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char25 object = new Char25();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char25"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar25(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char28 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char28", "ns2");

		/**
		 * field for Char28
		 */

		protected java.lang.String localChar28;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar28() {
			return localChar28;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char28
		 */
		public void setChar28(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 28)) {
				this.localChar28 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar28.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char28", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char28", xmlWriter);
				}
			}

			if (localChar28 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char28 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar28);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar28) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char28 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char28 returnValue = new Char28();

				returnValue
						.setChar28(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char28 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char28.Factory.fromString(content, namespaceUri);
				} else {
					return Char28.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char28 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char28 object = new Char28();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char28"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar28(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Quantum133 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "quantum13.3", "ns2");

		/**
		 * field for Quantum133
		 */

		protected java.math.BigDecimal localQuantum133;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getQuantum133() {
			return localQuantum133;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Quantum133
		 */
		public void setQuantum133(java.math.BigDecimal param) {

			java.lang.String totalDigitsDecimal = org.apache.axis2.databinding.utils.ConverterUtil
					.convertToStandardDecimalNotation("13").toString();
			if (org.apache.axis2.databinding.utils.ConverterUtil.compare(param,
					totalDigitsDecimal) > 0) {
				this.localQuantum133 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localQuantum133.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":quantum13.3", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "quantum13.3", xmlWriter);
				}
			}

			if (localQuantum133 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"quantum13.3 cannot be null !!");

			} else {

				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localQuantum133));

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localQuantum133) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Quantum133 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Quantum133 returnValue = new Quantum133();

				returnValue
						.setQuantum133(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(value));

				return returnValue;
			}

			public static Quantum133 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Quantum133.Factory.fromString(content, namespaceUri);
				} else {
					return Quantum133.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Quantum133 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Quantum133 object = new Quantum133();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "quantum13.3"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setQuantum133(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToDecimal(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Fknvk implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * Fknvk Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Mandt
		 */

		protected Clnt3 localMandt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Clnt3
		 */
		public Clnt3 getMandt() {
			return localMandt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mandt
		 */
		public void setMandt(Clnt3 param) {

			this.localMandt = param;

		}

		/**
		 * field for Parnr
		 */

		protected Numeric10 localParnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric10
		 */
		public Numeric10 getParnr() {
			return localParnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Parnr
		 */
		public void setParnr(Numeric10 param) {

			this.localParnr = param;

		}

		/**
		 * field for Kunnr
		 */

		protected Char10 localKunnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKunnr() {
			return localKunnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kunnr
		 */
		public void setKunnr(Char10 param) {

			this.localKunnr = param;

		}

		/**
		 * field for Namev
		 */

		protected Char35 localNamev;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char35
		 */
		public Char35 getNamev() {
			return localNamev;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Namev
		 */
		public void setNamev(Char35 param) {

			this.localNamev = param;

		}

		/**
		 * field for Name1
		 */

		protected Char35 localName1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char35
		 */
		public Char35 getName1() {
			return localName1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Name1
		 */
		public void setName1(Char35 param) {

			this.localName1 = param;

		}

		/**
		 * field for Ort01
		 */

		protected Char35 localOrt01;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char35
		 */
		public Char35 getOrt01() {
			return localOrt01;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Ort01
		 */
		public void setOrt01(Char35 param) {

			this.localOrt01 = param;

		}

		/**
		 * field for Adrnd
		 */

		protected Char10 localAdrnd;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getAdrnd() {
			return localAdrnd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Adrnd
		 */
		public void setAdrnd(Char10 param) {

			this.localAdrnd = param;

		}

		/**
		 * field for Adrnp
		 */

		protected Char10 localAdrnp;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getAdrnp() {
			return localAdrnp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Adrnp
		 */
		public void setAdrnp(Char10 param) {

			this.localAdrnp = param;

		}

		/**
		 * field for Abtpa
		 */

		protected Char12 localAbtpa;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char12
		 */
		public Char12 getAbtpa() {
			return localAbtpa;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Abtpa
		 */
		public void setAbtpa(Char12 param) {

			this.localAbtpa = param;

		}

		/**
		 * field for Abtnr
		 */

		protected Char4 localAbtnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getAbtnr() {
			return localAbtnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Abtnr
		 */
		public void setAbtnr(Char4 param) {

			this.localAbtnr = param;

		}

		/**
		 * field for Uepar
		 */

		protected Numeric10 localUepar;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric10
		 */
		public Numeric10 getUepar() {
			return localUepar;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Uepar
		 */
		public void setUepar(Numeric10 param) {

			this.localUepar = param;

		}

		/**
		 * field for Telf1
		 */

		protected Char16 localTelf1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char16
		 */
		public Char16 getTelf1() {
			return localTelf1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Telf1
		 */
		public void setTelf1(Char16 param) {

			this.localTelf1 = param;

		}

		/**
		 * field for Anred
		 */

		protected Char30 localAnred;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char30
		 */
		public Char30 getAnred() {
			return localAnred;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Anred
		 */
		public void setAnred(Char30 param) {

			this.localAnred = param;

		}

		/**
		 * field for Pafkt
		 */

		protected Char2 localPafkt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getPafkt() {
			return localPafkt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pafkt
		 */
		public void setPafkt(Char2 param) {

			this.localPafkt = param;

		}

		/**
		 * field for Parvo
		 */

		protected Char1 localParvo;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getParvo() {
			return localParvo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Parvo
		 */
		public void setParvo(Char1 param) {

			this.localParvo = param;

		}

		/**
		 * field for Pavip
		 */

		protected Char1 localPavip;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getPavip() {
			return localPavip;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pavip
		 */
		public void setPavip(Char1 param) {

			this.localPavip = param;

		}

		/**
		 * field for Parge
		 */

		protected Char1 localParge;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getParge() {
			return localParge;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Parge
		 */
		public void setParge(Char1 param) {

			this.localParge = param;

		}

		/**
		 * field for Parla
		 */

		protected Lang localParla;

		/**
		 * Auto generated getter method
		 * 
		 * @return Lang
		 */
		public Lang getParla() {
			return localParla;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Parla
		 */
		public void setParla(Lang param) {

			this.localParla = param;

		}

		/**
		 * field for Gbdat
		 */

		protected Date localGbdat;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getGbdat() {
			return localGbdat;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Gbdat
		 */
		public void setGbdat(Date param) {

			this.localGbdat = param;

		}

		/**
		 * field for Vrtnr
		 */

		protected Numeric10 localVrtnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric10
		 */
		public Numeric10 getVrtnr() {
			return localVrtnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vrtnr
		 */
		public void setVrtnr(Numeric10 param) {

			this.localVrtnr = param;

		}

		/**
		 * field for Bryth
		 */

		protected Char4 localBryth;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getBryth() {
			return localBryth;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bryth
		 */
		public void setBryth(Char4 param) {

			this.localBryth = param;

		}

		/**
		 * field for Akver
		 */

		protected Char2 localAkver;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getAkver() {
			return localAkver;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Akver
		 */
		public void setAkver(Char2 param) {

			this.localAkver = param;

		}

		/**
		 * field for Nmail
		 */

		protected Char1 localNmail;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getNmail() {
			return localNmail;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Nmail
		 */
		public void setNmail(Char1 param) {

			this.localNmail = param;

		}

		/**
		 * field for Parau
		 */

		protected Char40 localParau;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getParau() {
			return localParau;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Parau
		 */
		public void setParau(Char40 param) {

			this.localParau = param;

		}

		/**
		 * field for Parh1
		 */

		protected Char2 localParh1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getParh1() {
			return localParh1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Parh1
		 */
		public void setParh1(Char2 param) {

			this.localParh1 = param;

		}

		/**
		 * field for Parh2
		 */

		protected Char2 localParh2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getParh2() {
			return localParh2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Parh2
		 */
		public void setParh2(Char2 param) {

			this.localParh2 = param;

		}

		/**
		 * field for Parh3
		 */

		protected Char2 localParh3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getParh3() {
			return localParh3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Parh3
		 */
		public void setParh3(Char2 param) {

			this.localParh3 = param;

		}

		/**
		 * field for Parh4
		 */

		protected Char2 localParh4;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getParh4() {
			return localParh4;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Parh4
		 */
		public void setParh4(Char2 param) {

			this.localParh4 = param;

		}

		/**
		 * field for Parh5
		 */

		protected Char2 localParh5;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getParh5() {
			return localParh5;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Parh5
		 */
		public void setParh5(Char2 param) {

			this.localParh5 = param;

		}

		/**
		 * field for Moab1
		 */

		protected Time localMoab1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getMoab1() {
			return localMoab1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Moab1
		 */
		public void setMoab1(Time param) {

			this.localMoab1 = param;

		}

		/**
		 * field for Mobi1
		 */

		protected Time localMobi1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getMobi1() {
			return localMobi1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mobi1
		 */
		public void setMobi1(Time param) {

			this.localMobi1 = param;

		}

		/**
		 * field for Moab2
		 */

		protected Time localMoab2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getMoab2() {
			return localMoab2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Moab2
		 */
		public void setMoab2(Time param) {

			this.localMoab2 = param;

		}

		/**
		 * field for Mobi2
		 */

		protected Time localMobi2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getMobi2() {
			return localMobi2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mobi2
		 */
		public void setMobi2(Time param) {

			this.localMobi2 = param;

		}

		/**
		 * field for Diab1
		 */

		protected Time localDiab1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getDiab1() {
			return localDiab1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Diab1
		 */
		public void setDiab1(Time param) {

			this.localDiab1 = param;

		}

		/**
		 * field for Dibi1
		 */

		protected Time localDibi1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getDibi1() {
			return localDibi1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dibi1
		 */
		public void setDibi1(Time param) {

			this.localDibi1 = param;

		}

		/**
		 * field for Diab2
		 */

		protected Time localDiab2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getDiab2() {
			return localDiab2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Diab2
		 */
		public void setDiab2(Time param) {

			this.localDiab2 = param;

		}

		/**
		 * field for Dibi2
		 */

		protected Time localDibi2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getDibi2() {
			return localDibi2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dibi2
		 */
		public void setDibi2(Time param) {

			this.localDibi2 = param;

		}

		/**
		 * field for Miab1
		 */

		protected Time localMiab1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getMiab1() {
			return localMiab1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Miab1
		 */
		public void setMiab1(Time param) {

			this.localMiab1 = param;

		}

		/**
		 * field for Mibi1
		 */

		protected Time localMibi1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getMibi1() {
			return localMibi1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mibi1
		 */
		public void setMibi1(Time param) {

			this.localMibi1 = param;

		}

		/**
		 * field for Miab2
		 */

		protected Time localMiab2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getMiab2() {
			return localMiab2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Miab2
		 */
		public void setMiab2(Time param) {

			this.localMiab2 = param;

		}

		/**
		 * field for Mibi2
		 */

		protected Time localMibi2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getMibi2() {
			return localMibi2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mibi2
		 */
		public void setMibi2(Time param) {

			this.localMibi2 = param;

		}

		/**
		 * field for Doab1
		 */

		protected Time localDoab1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getDoab1() {
			return localDoab1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Doab1
		 */
		public void setDoab1(Time param) {

			this.localDoab1 = param;

		}

		/**
		 * field for Dobi1
		 */

		protected Time localDobi1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getDobi1() {
			return localDobi1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dobi1
		 */
		public void setDobi1(Time param) {

			this.localDobi1 = param;

		}

		/**
		 * field for Doab2
		 */

		protected Time localDoab2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getDoab2() {
			return localDoab2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Doab2
		 */
		public void setDoab2(Time param) {

			this.localDoab2 = param;

		}

		/**
		 * field for Dobi2
		 */

		protected Time localDobi2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getDobi2() {
			return localDobi2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dobi2
		 */
		public void setDobi2(Time param) {

			this.localDobi2 = param;

		}

		/**
		 * field for Frab1
		 */

		protected Time localFrab1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getFrab1() {
			return localFrab1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Frab1
		 */
		public void setFrab1(Time param) {

			this.localFrab1 = param;

		}

		/**
		 * field for Frbi1
		 */

		protected Time localFrbi1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getFrbi1() {
			return localFrbi1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Frbi1
		 */
		public void setFrbi1(Time param) {

			this.localFrbi1 = param;

		}

		/**
		 * field for Frab2
		 */

		protected Time localFrab2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getFrab2() {
			return localFrab2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Frab2
		 */
		public void setFrab2(Time param) {

			this.localFrab2 = param;

		}

		/**
		 * field for Frbi2
		 */

		protected Time localFrbi2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getFrbi2() {
			return localFrbi2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Frbi2
		 */
		public void setFrbi2(Time param) {

			this.localFrbi2 = param;

		}

		/**
		 * field for Saab1
		 */

		protected Time localSaab1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getSaab1() {
			return localSaab1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Saab1
		 */
		public void setSaab1(Time param) {

			this.localSaab1 = param;

		}

		/**
		 * field for Sabi1
		 */

		protected Time localSabi1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getSabi1() {
			return localSabi1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sabi1
		 */
		public void setSabi1(Time param) {

			this.localSabi1 = param;

		}

		/**
		 * field for Saab2
		 */

		protected Time localSaab2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getSaab2() {
			return localSaab2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Saab2
		 */
		public void setSaab2(Time param) {

			this.localSaab2 = param;

		}

		/**
		 * field for Sabi2
		 */

		protected Time localSabi2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getSabi2() {
			return localSabi2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sabi2
		 */
		public void setSabi2(Time param) {

			this.localSabi2 = param;

		}

		/**
		 * field for Soab1
		 */

		protected Time localSoab1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getSoab1() {
			return localSoab1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Soab1
		 */
		public void setSoab1(Time param) {

			this.localSoab1 = param;

		}

		/**
		 * field for Sobi1
		 */

		protected Time localSobi1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getSobi1() {
			return localSobi1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sobi1
		 */
		public void setSobi1(Time param) {

			this.localSobi1 = param;

		}

		/**
		 * field for Soab2
		 */

		protected Time localSoab2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getSoab2() {
			return localSoab2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Soab2
		 */
		public void setSoab2(Time param) {

			this.localSoab2 = param;

		}

		/**
		 * field for Sobi2
		 */

		protected Time localSobi2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getSobi2() {
			return localSobi2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sobi2
		 */
		public void setSobi2(Time param) {

			this.localSobi2 = param;

		}

		/**
		 * field for Pakn1
		 */

		protected Char3 localPakn1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getPakn1() {
			return localPakn1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pakn1
		 */
		public void setPakn1(Char3 param) {

			this.localPakn1 = param;

		}

		/**
		 * field for Pakn2
		 */

		protected Char3 localPakn2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getPakn2() {
			return localPakn2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pakn2
		 */
		public void setPakn2(Char3 param) {

			this.localPakn2 = param;

		}

		/**
		 * field for Pakn3
		 */

		protected Char3 localPakn3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getPakn3() {
			return localPakn3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pakn3
		 */
		public void setPakn3(Char3 param) {

			this.localPakn3 = param;

		}

		/**
		 * field for Pakn4
		 */

		protected Char3 localPakn4;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getPakn4() {
			return localPakn4;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pakn4
		 */
		public void setPakn4(Char3 param) {

			this.localPakn4 = param;

		}

		/**
		 * field for Pakn5
		 */

		protected Char3 localPakn5;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getPakn5() {
			return localPakn5;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pakn5
		 */
		public void setPakn5(Char3 param) {

			this.localPakn5 = param;

		}

		/**
		 * field for Sortl
		 */

		protected Char10 localSortl;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getSortl() {
			return localSortl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sortl
		 */
		public void setSortl(Char10 param) {

			this.localSortl = param;

		}

		/**
		 * field for Famst
		 */

		protected Char1 localFamst;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getFamst() {
			return localFamst;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Famst
		 */
		public void setFamst(Char1 param) {

			this.localFamst = param;

		}

		/**
		 * field for Spnam
		 */

		protected Char10 localSpnam;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getSpnam() {
			return localSpnam;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Spnam
		 */
		public void setSpnam(Char10 param) {

			this.localSpnam = param;

		}

		/**
		 * field for TitelAp
		 */

		protected Char35 localTitelAp;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char35
		 */
		public Char35 getTitelAp() {
			return localTitelAp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TitelAp
		 */
		public void setTitelAp(Char35 param) {

			this.localTitelAp = param;

		}

		/**
		 * field for Erdat
		 */

		protected Date localErdat;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getErdat() {
			return localErdat;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Erdat
		 */
		public void setErdat(Date param) {

			this.localErdat = param;

		}

		/**
		 * field for Ernam
		 */

		protected Char12 localErnam;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char12
		 */
		public Char12 getErnam() {
			return localErnam;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Ernam
		 */
		public void setErnam(Char12 param) {

			this.localErnam = param;

		}

		/**
		 * field for Duefl
		 */

		protected Char1 localDuefl;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getDuefl() {
			return localDuefl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Duefl
		 */
		public void setDuefl(Char1 param) {

			this.localDuefl = param;

		}

		/**
		 * field for Lifnr
		 */

		protected Char10 localLifnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getLifnr() {
			return localLifnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Lifnr
		 */
		public void setLifnr(Char10 param) {

			this.localLifnr = param;

		}

		/**
		 * field for Loevm
		 */

		protected Char1 localLoevm;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getLoevm() {
			return localLoevm;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Loevm
		 */
		public void setLoevm(Char1 param) {

			this.localLoevm = param;

		}

		/**
		 * field for Kzherk
		 */

		protected Char1 localKzherk;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getKzherk() {
			return localKzherk;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kzherk
		 */
		public void setKzherk(Char1 param) {

			this.localKzherk = param;

		}

		/**
		 * field for Adrnp2
		 */

		protected Char10 localAdrnp2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getAdrnp2() {
			return localAdrnp2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Adrnp2
		 */
		public void setAdrnp2(Char10 param) {

			this.localAdrnp2 = param;

		}

		/**
		 * field for Prsnr
		 */

		protected Char10 localPrsnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getPrsnr() {
			return localPrsnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Prsnr
		 */
		public void setPrsnr(Char10 param) {

			this.localPrsnr = param;

		}

		/**
		 * field for Kz
		 */

		protected Char1 localKz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getKz() {
			return localKz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kz
		 */
		public void setKz(Char1 param) {

			this.localKz = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Fknvk", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Fknvk", xmlWriter);
				}

			}

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			localMandt.serialize(new javax.xml.namespace.QName("", "Mandt"),
					xmlWriter);

			if (localParnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parnr cannot be null!!");
			}
			localParnr.serialize(new javax.xml.namespace.QName("", "Parnr"),
					xmlWriter);

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			localKunnr.serialize(new javax.xml.namespace.QName("", "Kunnr"),
					xmlWriter);

			if (localNamev == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Namev cannot be null!!");
			}
			localNamev.serialize(new javax.xml.namespace.QName("", "Namev"),
					xmlWriter);

			if (localName1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name1 cannot be null!!");
			}
			localName1.serialize(new javax.xml.namespace.QName("", "Name1"),
					xmlWriter);

			if (localOrt01 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ort01 cannot be null!!");
			}
			localOrt01.serialize(new javax.xml.namespace.QName("", "Ort01"),
					xmlWriter);

			if (localAdrnd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Adrnd cannot be null!!");
			}
			localAdrnd.serialize(new javax.xml.namespace.QName("", "Adrnd"),
					xmlWriter);

			if (localAdrnp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Adrnp cannot be null!!");
			}
			localAdrnp.serialize(new javax.xml.namespace.QName("", "Adrnp"),
					xmlWriter);

			if (localAbtpa == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Abtpa cannot be null!!");
			}
			localAbtpa.serialize(new javax.xml.namespace.QName("", "Abtpa"),
					xmlWriter);

			if (localAbtnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Abtnr cannot be null!!");
			}
			localAbtnr.serialize(new javax.xml.namespace.QName("", "Abtnr"),
					xmlWriter);

			if (localUepar == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Uepar cannot be null!!");
			}
			localUepar.serialize(new javax.xml.namespace.QName("", "Uepar"),
					xmlWriter);

			if (localTelf1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Telf1 cannot be null!!");
			}
			localTelf1.serialize(new javax.xml.namespace.QName("", "Telf1"),
					xmlWriter);

			if (localAnred == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Anred cannot be null!!");
			}
			localAnred.serialize(new javax.xml.namespace.QName("", "Anred"),
					xmlWriter);

			if (localPafkt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pafkt cannot be null!!");
			}
			localPafkt.serialize(new javax.xml.namespace.QName("", "Pafkt"),
					xmlWriter);

			if (localParvo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parvo cannot be null!!");
			}
			localParvo.serialize(new javax.xml.namespace.QName("", "Parvo"),
					xmlWriter);

			if (localPavip == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pavip cannot be null!!");
			}
			localPavip.serialize(new javax.xml.namespace.QName("", "Pavip"),
					xmlWriter);

			if (localParge == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parge cannot be null!!");
			}
			localParge.serialize(new javax.xml.namespace.QName("", "Parge"),
					xmlWriter);

			if (localParla == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parla cannot be null!!");
			}
			localParla.serialize(new javax.xml.namespace.QName("", "Parla"),
					xmlWriter);

			if (localGbdat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Gbdat cannot be null!!");
			}
			localGbdat.serialize(new javax.xml.namespace.QName("", "Gbdat"),
					xmlWriter);

			if (localVrtnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vrtnr cannot be null!!");
			}
			localVrtnr.serialize(new javax.xml.namespace.QName("", "Vrtnr"),
					xmlWriter);

			if (localBryth == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bryth cannot be null!!");
			}
			localBryth.serialize(new javax.xml.namespace.QName("", "Bryth"),
					xmlWriter);

			if (localAkver == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Akver cannot be null!!");
			}
			localAkver.serialize(new javax.xml.namespace.QName("", "Akver"),
					xmlWriter);

			if (localNmail == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Nmail cannot be null!!");
			}
			localNmail.serialize(new javax.xml.namespace.QName("", "Nmail"),
					xmlWriter);

			if (localParau == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parau cannot be null!!");
			}
			localParau.serialize(new javax.xml.namespace.QName("", "Parau"),
					xmlWriter);

			if (localParh1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parh1 cannot be null!!");
			}
			localParh1.serialize(new javax.xml.namespace.QName("", "Parh1"),
					xmlWriter);

			if (localParh2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parh2 cannot be null!!");
			}
			localParh2.serialize(new javax.xml.namespace.QName("", "Parh2"),
					xmlWriter);

			if (localParh3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parh3 cannot be null!!");
			}
			localParh3.serialize(new javax.xml.namespace.QName("", "Parh3"),
					xmlWriter);

			if (localParh4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parh4 cannot be null!!");
			}
			localParh4.serialize(new javax.xml.namespace.QName("", "Parh4"),
					xmlWriter);

			if (localParh5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parh5 cannot be null!!");
			}
			localParh5.serialize(new javax.xml.namespace.QName("", "Parh5"),
					xmlWriter);

			if (localMoab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Moab1 cannot be null!!");
			}
			localMoab1.serialize(new javax.xml.namespace.QName("", "Moab1"),
					xmlWriter);

			if (localMobi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mobi1 cannot be null!!");
			}
			localMobi1.serialize(new javax.xml.namespace.QName("", "Mobi1"),
					xmlWriter);

			if (localMoab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Moab2 cannot be null!!");
			}
			localMoab2.serialize(new javax.xml.namespace.QName("", "Moab2"),
					xmlWriter);

			if (localMobi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mobi2 cannot be null!!");
			}
			localMobi2.serialize(new javax.xml.namespace.QName("", "Mobi2"),
					xmlWriter);

			if (localDiab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Diab1 cannot be null!!");
			}
			localDiab1.serialize(new javax.xml.namespace.QName("", "Diab1"),
					xmlWriter);

			if (localDibi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dibi1 cannot be null!!");
			}
			localDibi1.serialize(new javax.xml.namespace.QName("", "Dibi1"),
					xmlWriter);

			if (localDiab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Diab2 cannot be null!!");
			}
			localDiab2.serialize(new javax.xml.namespace.QName("", "Diab2"),
					xmlWriter);

			if (localDibi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dibi2 cannot be null!!");
			}
			localDibi2.serialize(new javax.xml.namespace.QName("", "Dibi2"),
					xmlWriter);

			if (localMiab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Miab1 cannot be null!!");
			}
			localMiab1.serialize(new javax.xml.namespace.QName("", "Miab1"),
					xmlWriter);

			if (localMibi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mibi1 cannot be null!!");
			}
			localMibi1.serialize(new javax.xml.namespace.QName("", "Mibi1"),
					xmlWriter);

			if (localMiab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Miab2 cannot be null!!");
			}
			localMiab2.serialize(new javax.xml.namespace.QName("", "Miab2"),
					xmlWriter);

			if (localMibi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mibi2 cannot be null!!");
			}
			localMibi2.serialize(new javax.xml.namespace.QName("", "Mibi2"),
					xmlWriter);

			if (localDoab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Doab1 cannot be null!!");
			}
			localDoab1.serialize(new javax.xml.namespace.QName("", "Doab1"),
					xmlWriter);

			if (localDobi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dobi1 cannot be null!!");
			}
			localDobi1.serialize(new javax.xml.namespace.QName("", "Dobi1"),
					xmlWriter);

			if (localDoab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Doab2 cannot be null!!");
			}
			localDoab2.serialize(new javax.xml.namespace.QName("", "Doab2"),
					xmlWriter);

			if (localDobi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dobi2 cannot be null!!");
			}
			localDobi2.serialize(new javax.xml.namespace.QName("", "Dobi2"),
					xmlWriter);

			if (localFrab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Frab1 cannot be null!!");
			}
			localFrab1.serialize(new javax.xml.namespace.QName("", "Frab1"),
					xmlWriter);

			if (localFrbi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Frbi1 cannot be null!!");
			}
			localFrbi1.serialize(new javax.xml.namespace.QName("", "Frbi1"),
					xmlWriter);

			if (localFrab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Frab2 cannot be null!!");
			}
			localFrab2.serialize(new javax.xml.namespace.QName("", "Frab2"),
					xmlWriter);

			if (localFrbi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Frbi2 cannot be null!!");
			}
			localFrbi2.serialize(new javax.xml.namespace.QName("", "Frbi2"),
					xmlWriter);

			if (localSaab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Saab1 cannot be null!!");
			}
			localSaab1.serialize(new javax.xml.namespace.QName("", "Saab1"),
					xmlWriter);

			if (localSabi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sabi1 cannot be null!!");
			}
			localSabi1.serialize(new javax.xml.namespace.QName("", "Sabi1"),
					xmlWriter);

			if (localSaab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Saab2 cannot be null!!");
			}
			localSaab2.serialize(new javax.xml.namespace.QName("", "Saab2"),
					xmlWriter);

			if (localSabi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sabi2 cannot be null!!");
			}
			localSabi2.serialize(new javax.xml.namespace.QName("", "Sabi2"),
					xmlWriter);

			if (localSoab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Soab1 cannot be null!!");
			}
			localSoab1.serialize(new javax.xml.namespace.QName("", "Soab1"),
					xmlWriter);

			if (localSobi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sobi1 cannot be null!!");
			}
			localSobi1.serialize(new javax.xml.namespace.QName("", "Sobi1"),
					xmlWriter);

			if (localSoab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Soab2 cannot be null!!");
			}
			localSoab2.serialize(new javax.xml.namespace.QName("", "Soab2"),
					xmlWriter);

			if (localSobi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sobi2 cannot be null!!");
			}
			localSobi2.serialize(new javax.xml.namespace.QName("", "Sobi2"),
					xmlWriter);

			if (localPakn1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pakn1 cannot be null!!");
			}
			localPakn1.serialize(new javax.xml.namespace.QName("", "Pakn1"),
					xmlWriter);

			if (localPakn2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pakn2 cannot be null!!");
			}
			localPakn2.serialize(new javax.xml.namespace.QName("", "Pakn2"),
					xmlWriter);

			if (localPakn3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pakn3 cannot be null!!");
			}
			localPakn3.serialize(new javax.xml.namespace.QName("", "Pakn3"),
					xmlWriter);

			if (localPakn4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pakn4 cannot be null!!");
			}
			localPakn4.serialize(new javax.xml.namespace.QName("", "Pakn4"),
					xmlWriter);

			if (localPakn5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pakn5 cannot be null!!");
			}
			localPakn5.serialize(new javax.xml.namespace.QName("", "Pakn5"),
					xmlWriter);

			if (localSortl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sortl cannot be null!!");
			}
			localSortl.serialize(new javax.xml.namespace.QName("", "Sortl"),
					xmlWriter);

			if (localFamst == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Famst cannot be null!!");
			}
			localFamst.serialize(new javax.xml.namespace.QName("", "Famst"),
					xmlWriter);

			if (localSpnam == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Spnam cannot be null!!");
			}
			localSpnam.serialize(new javax.xml.namespace.QName("", "Spnam"),
					xmlWriter);

			if (localTitelAp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"TitelAp cannot be null!!");
			}
			localTitelAp.serialize(
					new javax.xml.namespace.QName("", "TitelAp"), xmlWriter);

			if (localErdat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Erdat cannot be null!!");
			}
			localErdat.serialize(new javax.xml.namespace.QName("", "Erdat"),
					xmlWriter);

			if (localErnam == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ernam cannot be null!!");
			}
			localErnam.serialize(new javax.xml.namespace.QName("", "Ernam"),
					xmlWriter);

			if (localDuefl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Duefl cannot be null!!");
			}
			localDuefl.serialize(new javax.xml.namespace.QName("", "Duefl"),
					xmlWriter);

			if (localLifnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lifnr cannot be null!!");
			}
			localLifnr.serialize(new javax.xml.namespace.QName("", "Lifnr"),
					xmlWriter);

			if (localLoevm == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Loevm cannot be null!!");
			}
			localLoevm.serialize(new javax.xml.namespace.QName("", "Loevm"),
					xmlWriter);

			if (localKzherk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kzherk cannot be null!!");
			}
			localKzherk.serialize(new javax.xml.namespace.QName("", "Kzherk"),
					xmlWriter);

			if (localAdrnp2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Adrnp2 cannot be null!!");
			}
			localAdrnp2.serialize(new javax.xml.namespace.QName("", "Adrnp2"),
					xmlWriter);

			if (localPrsnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prsnr cannot be null!!");
			}
			localPrsnr.serialize(new javax.xml.namespace.QName("", "Prsnr"),
					xmlWriter);

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			localKz.serialize(new javax.xml.namespace.QName("", "Kz"),
					xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "Mandt"));

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			elementList.add(localMandt);

			elementList.add(new javax.xml.namespace.QName("", "Parnr"));

			if (localParnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parnr cannot be null!!");
			}
			elementList.add(localParnr);

			elementList.add(new javax.xml.namespace.QName("", "Kunnr"));

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			elementList.add(localKunnr);

			elementList.add(new javax.xml.namespace.QName("", "Namev"));

			if (localNamev == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Namev cannot be null!!");
			}
			elementList.add(localNamev);

			elementList.add(new javax.xml.namespace.QName("", "Name1"));

			if (localName1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name1 cannot be null!!");
			}
			elementList.add(localName1);

			elementList.add(new javax.xml.namespace.QName("", "Ort01"));

			if (localOrt01 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ort01 cannot be null!!");
			}
			elementList.add(localOrt01);

			elementList.add(new javax.xml.namespace.QName("", "Adrnd"));

			if (localAdrnd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Adrnd cannot be null!!");
			}
			elementList.add(localAdrnd);

			elementList.add(new javax.xml.namespace.QName("", "Adrnp"));

			if (localAdrnp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Adrnp cannot be null!!");
			}
			elementList.add(localAdrnp);

			elementList.add(new javax.xml.namespace.QName("", "Abtpa"));

			if (localAbtpa == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Abtpa cannot be null!!");
			}
			elementList.add(localAbtpa);

			elementList.add(new javax.xml.namespace.QName("", "Abtnr"));

			if (localAbtnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Abtnr cannot be null!!");
			}
			elementList.add(localAbtnr);

			elementList.add(new javax.xml.namespace.QName("", "Uepar"));

			if (localUepar == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Uepar cannot be null!!");
			}
			elementList.add(localUepar);

			elementList.add(new javax.xml.namespace.QName("", "Telf1"));

			if (localTelf1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Telf1 cannot be null!!");
			}
			elementList.add(localTelf1);

			elementList.add(new javax.xml.namespace.QName("", "Anred"));

			if (localAnred == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Anred cannot be null!!");
			}
			elementList.add(localAnred);

			elementList.add(new javax.xml.namespace.QName("", "Pafkt"));

			if (localPafkt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pafkt cannot be null!!");
			}
			elementList.add(localPafkt);

			elementList.add(new javax.xml.namespace.QName("", "Parvo"));

			if (localParvo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parvo cannot be null!!");
			}
			elementList.add(localParvo);

			elementList.add(new javax.xml.namespace.QName("", "Pavip"));

			if (localPavip == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pavip cannot be null!!");
			}
			elementList.add(localPavip);

			elementList.add(new javax.xml.namespace.QName("", "Parge"));

			if (localParge == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parge cannot be null!!");
			}
			elementList.add(localParge);

			elementList.add(new javax.xml.namespace.QName("", "Parla"));

			if (localParla == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parla cannot be null!!");
			}
			elementList.add(localParla);

			elementList.add(new javax.xml.namespace.QName("", "Gbdat"));

			if (localGbdat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Gbdat cannot be null!!");
			}
			elementList.add(localGbdat);

			elementList.add(new javax.xml.namespace.QName("", "Vrtnr"));

			if (localVrtnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vrtnr cannot be null!!");
			}
			elementList.add(localVrtnr);

			elementList.add(new javax.xml.namespace.QName("", "Bryth"));

			if (localBryth == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bryth cannot be null!!");
			}
			elementList.add(localBryth);

			elementList.add(new javax.xml.namespace.QName("", "Akver"));

			if (localAkver == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Akver cannot be null!!");
			}
			elementList.add(localAkver);

			elementList.add(new javax.xml.namespace.QName("", "Nmail"));

			if (localNmail == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Nmail cannot be null!!");
			}
			elementList.add(localNmail);

			elementList.add(new javax.xml.namespace.QName("", "Parau"));

			if (localParau == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parau cannot be null!!");
			}
			elementList.add(localParau);

			elementList.add(new javax.xml.namespace.QName("", "Parh1"));

			if (localParh1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parh1 cannot be null!!");
			}
			elementList.add(localParh1);

			elementList.add(new javax.xml.namespace.QName("", "Parh2"));

			if (localParh2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parh2 cannot be null!!");
			}
			elementList.add(localParh2);

			elementList.add(new javax.xml.namespace.QName("", "Parh3"));

			if (localParh3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parh3 cannot be null!!");
			}
			elementList.add(localParh3);

			elementList.add(new javax.xml.namespace.QName("", "Parh4"));

			if (localParh4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parh4 cannot be null!!");
			}
			elementList.add(localParh4);

			elementList.add(new javax.xml.namespace.QName("", "Parh5"));

			if (localParh5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parh5 cannot be null!!");
			}
			elementList.add(localParh5);

			elementList.add(new javax.xml.namespace.QName("", "Moab1"));

			if (localMoab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Moab1 cannot be null!!");
			}
			elementList.add(localMoab1);

			elementList.add(new javax.xml.namespace.QName("", "Mobi1"));

			if (localMobi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mobi1 cannot be null!!");
			}
			elementList.add(localMobi1);

			elementList.add(new javax.xml.namespace.QName("", "Moab2"));

			if (localMoab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Moab2 cannot be null!!");
			}
			elementList.add(localMoab2);

			elementList.add(new javax.xml.namespace.QName("", "Mobi2"));

			if (localMobi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mobi2 cannot be null!!");
			}
			elementList.add(localMobi2);

			elementList.add(new javax.xml.namespace.QName("", "Diab1"));

			if (localDiab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Diab1 cannot be null!!");
			}
			elementList.add(localDiab1);

			elementList.add(new javax.xml.namespace.QName("", "Dibi1"));

			if (localDibi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dibi1 cannot be null!!");
			}
			elementList.add(localDibi1);

			elementList.add(new javax.xml.namespace.QName("", "Diab2"));

			if (localDiab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Diab2 cannot be null!!");
			}
			elementList.add(localDiab2);

			elementList.add(new javax.xml.namespace.QName("", "Dibi2"));

			if (localDibi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dibi2 cannot be null!!");
			}
			elementList.add(localDibi2);

			elementList.add(new javax.xml.namespace.QName("", "Miab1"));

			if (localMiab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Miab1 cannot be null!!");
			}
			elementList.add(localMiab1);

			elementList.add(new javax.xml.namespace.QName("", "Mibi1"));

			if (localMibi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mibi1 cannot be null!!");
			}
			elementList.add(localMibi1);

			elementList.add(new javax.xml.namespace.QName("", "Miab2"));

			if (localMiab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Miab2 cannot be null!!");
			}
			elementList.add(localMiab2);

			elementList.add(new javax.xml.namespace.QName("", "Mibi2"));

			if (localMibi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mibi2 cannot be null!!");
			}
			elementList.add(localMibi2);

			elementList.add(new javax.xml.namespace.QName("", "Doab1"));

			if (localDoab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Doab1 cannot be null!!");
			}
			elementList.add(localDoab1);

			elementList.add(new javax.xml.namespace.QName("", "Dobi1"));

			if (localDobi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dobi1 cannot be null!!");
			}
			elementList.add(localDobi1);

			elementList.add(new javax.xml.namespace.QName("", "Doab2"));

			if (localDoab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Doab2 cannot be null!!");
			}
			elementList.add(localDoab2);

			elementList.add(new javax.xml.namespace.QName("", "Dobi2"));

			if (localDobi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dobi2 cannot be null!!");
			}
			elementList.add(localDobi2);

			elementList.add(new javax.xml.namespace.QName("", "Frab1"));

			if (localFrab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Frab1 cannot be null!!");
			}
			elementList.add(localFrab1);

			elementList.add(new javax.xml.namespace.QName("", "Frbi1"));

			if (localFrbi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Frbi1 cannot be null!!");
			}
			elementList.add(localFrbi1);

			elementList.add(new javax.xml.namespace.QName("", "Frab2"));

			if (localFrab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Frab2 cannot be null!!");
			}
			elementList.add(localFrab2);

			elementList.add(new javax.xml.namespace.QName("", "Frbi2"));

			if (localFrbi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Frbi2 cannot be null!!");
			}
			elementList.add(localFrbi2);

			elementList.add(new javax.xml.namespace.QName("", "Saab1"));

			if (localSaab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Saab1 cannot be null!!");
			}
			elementList.add(localSaab1);

			elementList.add(new javax.xml.namespace.QName("", "Sabi1"));

			if (localSabi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sabi1 cannot be null!!");
			}
			elementList.add(localSabi1);

			elementList.add(new javax.xml.namespace.QName("", "Saab2"));

			if (localSaab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Saab2 cannot be null!!");
			}
			elementList.add(localSaab2);

			elementList.add(new javax.xml.namespace.QName("", "Sabi2"));

			if (localSabi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sabi2 cannot be null!!");
			}
			elementList.add(localSabi2);

			elementList.add(new javax.xml.namespace.QName("", "Soab1"));

			if (localSoab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Soab1 cannot be null!!");
			}
			elementList.add(localSoab1);

			elementList.add(new javax.xml.namespace.QName("", "Sobi1"));

			if (localSobi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sobi1 cannot be null!!");
			}
			elementList.add(localSobi1);

			elementList.add(new javax.xml.namespace.QName("", "Soab2"));

			if (localSoab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Soab2 cannot be null!!");
			}
			elementList.add(localSoab2);

			elementList.add(new javax.xml.namespace.QName("", "Sobi2"));

			if (localSobi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sobi2 cannot be null!!");
			}
			elementList.add(localSobi2);

			elementList.add(new javax.xml.namespace.QName("", "Pakn1"));

			if (localPakn1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pakn1 cannot be null!!");
			}
			elementList.add(localPakn1);

			elementList.add(new javax.xml.namespace.QName("", "Pakn2"));

			if (localPakn2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pakn2 cannot be null!!");
			}
			elementList.add(localPakn2);

			elementList.add(new javax.xml.namespace.QName("", "Pakn3"));

			if (localPakn3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pakn3 cannot be null!!");
			}
			elementList.add(localPakn3);

			elementList.add(new javax.xml.namespace.QName("", "Pakn4"));

			if (localPakn4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pakn4 cannot be null!!");
			}
			elementList.add(localPakn4);

			elementList.add(new javax.xml.namespace.QName("", "Pakn5"));

			if (localPakn5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pakn5 cannot be null!!");
			}
			elementList.add(localPakn5);

			elementList.add(new javax.xml.namespace.QName("", "Sortl"));

			if (localSortl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sortl cannot be null!!");
			}
			elementList.add(localSortl);

			elementList.add(new javax.xml.namespace.QName("", "Famst"));

			if (localFamst == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Famst cannot be null!!");
			}
			elementList.add(localFamst);

			elementList.add(new javax.xml.namespace.QName("", "Spnam"));

			if (localSpnam == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Spnam cannot be null!!");
			}
			elementList.add(localSpnam);

			elementList.add(new javax.xml.namespace.QName("", "TitelAp"));

			if (localTitelAp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"TitelAp cannot be null!!");
			}
			elementList.add(localTitelAp);

			elementList.add(new javax.xml.namespace.QName("", "Erdat"));

			if (localErdat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Erdat cannot be null!!");
			}
			elementList.add(localErdat);

			elementList.add(new javax.xml.namespace.QName("", "Ernam"));

			if (localErnam == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ernam cannot be null!!");
			}
			elementList.add(localErnam);

			elementList.add(new javax.xml.namespace.QName("", "Duefl"));

			if (localDuefl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Duefl cannot be null!!");
			}
			elementList.add(localDuefl);

			elementList.add(new javax.xml.namespace.QName("", "Lifnr"));

			if (localLifnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lifnr cannot be null!!");
			}
			elementList.add(localLifnr);

			elementList.add(new javax.xml.namespace.QName("", "Loevm"));

			if (localLoevm == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Loevm cannot be null!!");
			}
			elementList.add(localLoevm);

			elementList.add(new javax.xml.namespace.QName("", "Kzherk"));

			if (localKzherk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kzherk cannot be null!!");
			}
			elementList.add(localKzherk);

			elementList.add(new javax.xml.namespace.QName("", "Adrnp2"));

			if (localAdrnp2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Adrnp2 cannot be null!!");
			}
			elementList.add(localAdrnp2);

			elementList.add(new javax.xml.namespace.QName("", "Prsnr"));

			if (localPrsnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prsnr cannot be null!!");
			}
			elementList.add(localPrsnr);

			elementList.add(new javax.xml.namespace.QName("", "Kz"));

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			elementList.add(localKz);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Fknvk parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Fknvk object = new Fknvk();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"Fknvk".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Fknvk) ExtensionMapper.getTypeObject(
										nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mandt")
									.equals(reader.getName())) {

						object.setMandt(Clnt3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Parnr")
									.equals(reader.getName())) {

						object.setParnr(Numeric10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kunnr")
									.equals(reader.getName())) {

						object.setKunnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Namev")
									.equals(reader.getName())) {

						object.setNamev(Char35.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Name1")
									.equals(reader.getName())) {

						object.setName1(Char35.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Ort01")
									.equals(reader.getName())) {

						object.setOrt01(Char35.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Adrnd")
									.equals(reader.getName())) {

						object.setAdrnd(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Adrnp")
									.equals(reader.getName())) {

						object.setAdrnp(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Abtpa")
									.equals(reader.getName())) {

						object.setAbtpa(Char12.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Abtnr")
									.equals(reader.getName())) {

						object.setAbtnr(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Uepar")
									.equals(reader.getName())) {

						object.setUepar(Numeric10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Telf1")
									.equals(reader.getName())) {

						object.setTelf1(Char16.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Anred")
									.equals(reader.getName())) {

						object.setAnred(Char30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pafkt")
									.equals(reader.getName())) {

						object.setPafkt(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Parvo")
									.equals(reader.getName())) {

						object.setParvo(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pavip")
									.equals(reader.getName())) {

						object.setPavip(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Parge")
									.equals(reader.getName())) {

						object.setParge(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Parla")
									.equals(reader.getName())) {

						object.setParla(Lang.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Gbdat")
									.equals(reader.getName())) {

						object.setGbdat(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vrtnr")
									.equals(reader.getName())) {

						object.setVrtnr(Numeric10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bryth")
									.equals(reader.getName())) {

						object.setBryth(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Akver")
									.equals(reader.getName())) {

						object.setAkver(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Nmail")
									.equals(reader.getName())) {

						object.setNmail(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Parau")
									.equals(reader.getName())) {

						object.setParau(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Parh1")
									.equals(reader.getName())) {

						object.setParh1(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Parh2")
									.equals(reader.getName())) {

						object.setParh2(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Parh3")
									.equals(reader.getName())) {

						object.setParh3(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Parh4")
									.equals(reader.getName())) {

						object.setParh4(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Parh5")
									.equals(reader.getName())) {

						object.setParh5(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Moab1")
									.equals(reader.getName())) {

						object.setMoab1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mobi1")
									.equals(reader.getName())) {

						object.setMobi1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Moab2")
									.equals(reader.getName())) {

						object.setMoab2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mobi2")
									.equals(reader.getName())) {

						object.setMobi2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Diab1")
									.equals(reader.getName())) {

						object.setDiab1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dibi1")
									.equals(reader.getName())) {

						object.setDibi1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Diab2")
									.equals(reader.getName())) {

						object.setDiab2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dibi2")
									.equals(reader.getName())) {

						object.setDibi2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Miab1")
									.equals(reader.getName())) {

						object.setMiab1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mibi1")
									.equals(reader.getName())) {

						object.setMibi1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Miab2")
									.equals(reader.getName())) {

						object.setMiab2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mibi2")
									.equals(reader.getName())) {

						object.setMibi2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Doab1")
									.equals(reader.getName())) {

						object.setDoab1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dobi1")
									.equals(reader.getName())) {

						object.setDobi1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Doab2")
									.equals(reader.getName())) {

						object.setDoab2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dobi2")
									.equals(reader.getName())) {

						object.setDobi2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Frab1")
									.equals(reader.getName())) {

						object.setFrab1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Frbi1")
									.equals(reader.getName())) {

						object.setFrbi1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Frab2")
									.equals(reader.getName())) {

						object.setFrab2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Frbi2")
									.equals(reader.getName())) {

						object.setFrbi2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Saab1")
									.equals(reader.getName())) {

						object.setSaab1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sabi1")
									.equals(reader.getName())) {

						object.setSabi1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Saab2")
									.equals(reader.getName())) {

						object.setSaab2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sabi2")
									.equals(reader.getName())) {

						object.setSabi2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Soab1")
									.equals(reader.getName())) {

						object.setSoab1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sobi1")
									.equals(reader.getName())) {

						object.setSobi1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Soab2")
									.equals(reader.getName())) {

						object.setSoab2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sobi2")
									.equals(reader.getName())) {

						object.setSobi2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pakn1")
									.equals(reader.getName())) {

						object.setPakn1(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pakn2")
									.equals(reader.getName())) {

						object.setPakn2(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pakn3")
									.equals(reader.getName())) {

						object.setPakn3(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pakn4")
									.equals(reader.getName())) {

						object.setPakn4(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pakn5")
									.equals(reader.getName())) {

						object.setPakn5(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sortl")
									.equals(reader.getName())) {

						object.setSortl(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Famst")
									.equals(reader.getName())) {

						object.setFamst(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Spnam")
									.equals(reader.getName())) {

						object.setSpnam(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "TitelAp")
									.equals(reader.getName())) {

						object.setTitelAp(Char35.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Erdat")
									.equals(reader.getName())) {

						object.setErdat(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Ernam")
									.equals(reader.getName())) {

						object.setErnam(Char12.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Duefl")
									.equals(reader.getName())) {

						object.setDuefl(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Lifnr")
									.equals(reader.getName())) {

						object.setLifnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Loevm")
									.equals(reader.getName())) {

						object.setLoevm(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kzherk")
									.equals(reader.getName())) {

						object.setKzherk(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Adrnp2")
									.equals(reader.getName())) {

						object.setAdrnp2(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Prsnr")
									.equals(reader.getName())) {

						object.setPrsnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kz")
									.equals(reader.getName())) {

						object.setKz(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Fknvl implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * Fknvl Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Mandt
		 */

		protected Clnt3 localMandt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Clnt3
		 */
		public Clnt3 getMandt() {
			return localMandt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mandt
		 */
		public void setMandt(Clnt3 param) {

			this.localMandt = param;

		}

		/**
		 * field for Kunnr
		 */

		protected Char10 localKunnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKunnr() {
			return localKunnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kunnr
		 */
		public void setKunnr(Char10 param) {

			this.localKunnr = param;

		}

		/**
		 * field for Aland
		 */

		protected Char3 localAland;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getAland() {
			return localAland;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Aland
		 */
		public void setAland(Char3 param) {

			this.localAland = param;

		}

		/**
		 * field for Tatyp
		 */

		protected Char4 localTatyp;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getTatyp() {
			return localTatyp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Tatyp
		 */
		public void setTatyp(Char4 param) {

			this.localTatyp = param;

		}

		/**
		 * field for Licnr
		 */

		protected Char15 localLicnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char15
		 */
		public Char15 getLicnr() {
			return localLicnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Licnr
		 */
		public void setLicnr(Char15 param) {

			this.localLicnr = param;

		}

		/**
		 * field for Datab
		 */

		protected Date localDatab;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getDatab() {
			return localDatab;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Datab
		 */
		public void setDatab(Date param) {

			this.localDatab = param;

		}

		/**
		 * field for Datbi
		 */

		protected Date localDatbi;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getDatbi() {
			return localDatbi;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Datbi
		 */
		public void setDatbi(Date param) {

			this.localDatbi = param;

		}

		/**
		 * field for Belic
		 */

		protected Char1 localBelic;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getBelic() {
			return localBelic;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Belic
		 */
		public void setBelic(Char1 param) {

			this.localBelic = param;

		}

		/**
		 * field for Kz
		 */

		protected Char1 localKz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getKz() {
			return localKz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kz
		 */
		public void setKz(Char1 param) {

			this.localKz = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Fknvl", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Fknvl", xmlWriter);
				}

			}

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			localMandt.serialize(new javax.xml.namespace.QName("", "Mandt"),
					xmlWriter);

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			localKunnr.serialize(new javax.xml.namespace.QName("", "Kunnr"),
					xmlWriter);

			if (localAland == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Aland cannot be null!!");
			}
			localAland.serialize(new javax.xml.namespace.QName("", "Aland"),
					xmlWriter);

			if (localTatyp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tatyp cannot be null!!");
			}
			localTatyp.serialize(new javax.xml.namespace.QName("", "Tatyp"),
					xmlWriter);

			if (localLicnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Licnr cannot be null!!");
			}
			localLicnr.serialize(new javax.xml.namespace.QName("", "Licnr"),
					xmlWriter);

			if (localDatab == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Datab cannot be null!!");
			}
			localDatab.serialize(new javax.xml.namespace.QName("", "Datab"),
					xmlWriter);

			if (localDatbi == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Datbi cannot be null!!");
			}
			localDatbi.serialize(new javax.xml.namespace.QName("", "Datbi"),
					xmlWriter);

			if (localBelic == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Belic cannot be null!!");
			}
			localBelic.serialize(new javax.xml.namespace.QName("", "Belic"),
					xmlWriter);

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			localKz.serialize(new javax.xml.namespace.QName("", "Kz"),
					xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "Mandt"));

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			elementList.add(localMandt);

			elementList.add(new javax.xml.namespace.QName("", "Kunnr"));

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			elementList.add(localKunnr);

			elementList.add(new javax.xml.namespace.QName("", "Aland"));

			if (localAland == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Aland cannot be null!!");
			}
			elementList.add(localAland);

			elementList.add(new javax.xml.namespace.QName("", "Tatyp"));

			if (localTatyp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tatyp cannot be null!!");
			}
			elementList.add(localTatyp);

			elementList.add(new javax.xml.namespace.QName("", "Licnr"));

			if (localLicnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Licnr cannot be null!!");
			}
			elementList.add(localLicnr);

			elementList.add(new javax.xml.namespace.QName("", "Datab"));

			if (localDatab == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Datab cannot be null!!");
			}
			elementList.add(localDatab);

			elementList.add(new javax.xml.namespace.QName("", "Datbi"));

			if (localDatbi == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Datbi cannot be null!!");
			}
			elementList.add(localDatbi);

			elementList.add(new javax.xml.namespace.QName("", "Belic"));

			if (localBelic == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Belic cannot be null!!");
			}
			elementList.add(localBelic);

			elementList.add(new javax.xml.namespace.QName("", "Kz"));

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			elementList.add(localKz);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Fknvl parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Fknvl object = new Fknvl();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"Fknvl".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Fknvl) ExtensionMapper.getTypeObject(
										nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mandt")
									.equals(reader.getName())) {

						object.setMandt(Clnt3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kunnr")
									.equals(reader.getName())) {

						object.setKunnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Aland")
									.equals(reader.getName())) {

						object.setAland(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Tatyp")
									.equals(reader.getName())) {

						object.setTatyp(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Licnr")
									.equals(reader.getName())) {

						object.setLicnr(Char15.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Datab")
									.equals(reader.getName())) {

						object.setDatab(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Datbi")
									.equals(reader.getName())) {

						object.setDatbi(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Belic")
									.equals(reader.getName())) {

						object.setBelic(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kz")
									.equals(reader.getName())) {

						object.setKz(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Fknvi implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * Fknvi Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Mandt
		 */

		protected Clnt3 localMandt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Clnt3
		 */
		public Clnt3 getMandt() {
			return localMandt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mandt
		 */
		public void setMandt(Clnt3 param) {

			this.localMandt = param;

		}

		/**
		 * field for Kunnr
		 */

		protected Char10 localKunnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKunnr() {
			return localKunnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kunnr
		 */
		public void setKunnr(Char10 param) {

			this.localKunnr = param;

		}

		/**
		 * field for Aland
		 */

		protected Char3 localAland;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getAland() {
			return localAland;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Aland
		 */
		public void setAland(Char3 param) {

			this.localAland = param;

		}

		/**
		 * field for Tatyp
		 */

		protected Char4 localTatyp;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getTatyp() {
			return localTatyp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Tatyp
		 */
		public void setTatyp(Char4 param) {

			this.localTatyp = param;

		}

		/**
		 * field for Taxkd
		 */

		protected Char1 localTaxkd;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getTaxkd() {
			return localTaxkd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Taxkd
		 */
		public void setTaxkd(Char1 param) {

			this.localTaxkd = param;

		}

		/**
		 * field for Kz
		 */

		protected Char1 localKz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getKz() {
			return localKz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kz
		 */
		public void setKz(Char1 param) {

			this.localKz = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Fknvi", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Fknvi", xmlWriter);
				}

			}

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			localMandt.serialize(new javax.xml.namespace.QName("", "Mandt"),
					xmlWriter);

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			localKunnr.serialize(new javax.xml.namespace.QName("", "Kunnr"),
					xmlWriter);

			if (localAland == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Aland cannot be null!!");
			}
			localAland.serialize(new javax.xml.namespace.QName("", "Aland"),
					xmlWriter);

			if (localTatyp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tatyp cannot be null!!");
			}
			localTatyp.serialize(new javax.xml.namespace.QName("", "Tatyp"),
					xmlWriter);

			if (localTaxkd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Taxkd cannot be null!!");
			}
			localTaxkd.serialize(new javax.xml.namespace.QName("", "Taxkd"),
					xmlWriter);

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			localKz.serialize(new javax.xml.namespace.QName("", "Kz"),
					xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "Mandt"));

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			elementList.add(localMandt);

			elementList.add(new javax.xml.namespace.QName("", "Kunnr"));

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			elementList.add(localKunnr);

			elementList.add(new javax.xml.namespace.QName("", "Aland"));

			if (localAland == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Aland cannot be null!!");
			}
			elementList.add(localAland);

			elementList.add(new javax.xml.namespace.QName("", "Tatyp"));

			if (localTatyp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tatyp cannot be null!!");
			}
			elementList.add(localTatyp);

			elementList.add(new javax.xml.namespace.QName("", "Taxkd"));

			if (localTaxkd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Taxkd cannot be null!!");
			}
			elementList.add(localTaxkd);

			elementList.add(new javax.xml.namespace.QName("", "Kz"));

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			elementList.add(localKz);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Fknvi parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Fknvi object = new Fknvi();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"Fknvi".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Fknvi) ExtensionMapper.getTypeObject(
										nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mandt")
									.equals(reader.getName())) {

						object.setMandt(Clnt3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kunnr")
									.equals(reader.getName())) {

						object.setKunnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Aland")
									.equals(reader.getName())) {

						object.setAland(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Tatyp")
									.equals(reader.getName())) {

						object.setTatyp(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Taxkd")
									.equals(reader.getName())) {

						object.setTaxkd(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kz")
									.equals(reader.getName())) {

						object.setKz(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ExtensionMapper {

		public static java.lang.Object getTypeObject(
				java.lang.String namespaceURI, java.lang.String typeName,
				javax.xml.stream.XMLStreamReader reader)
				throws java.lang.Exception {

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "Fknza".equals(typeName)) {

				return Fknza.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "cuky5".equals(typeName)) {

				return Cuky5.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "unit3".equals(typeName)) {

				return Unit3.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char50".equals(typeName)) {

				return Char50.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "clnt3".equals(typeName)) {

				return Clnt3.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI)
					&& "ZsdCustomerMaintainAll.RfcExceptions".equals(typeName)) {

				return ZsdCustomerMaintainAllRfcExceptions.Factory
						.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "Fknvk".equals(typeName)) {

				return Fknvk.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char4".equals(typeName)) {

				return Char4.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "Fknvl".equals(typeName)) {

				return Fknvl.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char5".equals(typeName)) {

				return Char5.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "curr15.2".equals(typeName)) {

				return Curr152.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "Fknvi".equals(typeName)) {

				return Fknvi.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char2".equals(typeName)) {

				return Char2.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI)
					&& "RfcException.Message".equals(typeName)) {

				return RfcExceptionMessage.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char3".equals(typeName)) {

				return Char3.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "decimal11.0".equals(typeName)) {

				return Decimal110.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char1".equals(typeName)) {

				return Char1.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "Knvv".equals(typeName)) {

				return Knvv.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "Fknvd".equals(typeName)) {

				return Fknvd.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "Fknva".equals(typeName)) {

				return Fknva.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "TableOfFknza".equals(typeName)) {

				return TableOfFknza.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "Kna1".equals(typeName)) {

				return Kna1.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "TableOfFknva".equals(typeName)) {

				return TableOfFknva.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char40".equals(typeName)) {

				return Char40.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char241".equals(typeName)) {

				return Char241.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "curr13.2".equals(typeName)) {

				return Curr132.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "decimal1.0".equals(typeName)) {

				return Decimal10.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char7".equals(typeName)) {

				return Char7.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char6".equals(typeName)) {

				return Char6.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "Fknvp".equals(typeName)) {

				return Fknvp.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "Fknb5".equals(typeName)) {

				return Fknb5.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char9".equals(typeName)) {

				return Char9.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "numeric10".equals(typeName)) {

				return Numeric10.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char8".equals(typeName)) {

				return Char8.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "TableOfFknvk".equals(typeName)) {

				return TableOfFknvk.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "TableOfFknvl".equals(typeName)) {

				return TableOfFknvl.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "TableOfFknb5".equals(typeName)) {

				return TableOfFknb5.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI)
					&& "ZsdCustomerMaintainAll.RfcException".equals(typeName)) {

				return ZsdCustomerMaintainAllRfcException.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "TableOfFknvp".equals(typeName)) {

				return TableOfFknvp.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "CustAddOnData".equals(typeName)) {

				return CustAddOnData.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "TableOfFknvd".equals(typeName)) {

				return TableOfFknvd.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char80".equals(typeName)) {

				return Char80.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "TableOfFknvi".equals(typeName)) {

				return TableOfFknvi.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "time".equals(typeName)) {

				return Time.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char132".equals(typeName)) {

				return Char132.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char130".equals(typeName)) {

				return Char130.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "TableOfFknex".equals(typeName)) {

				return TableOfFknex.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char35".equals(typeName)) {

				return Char35.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char31".equals(typeName)) {

				return Char31.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "TableOfFknas".equals(typeName)) {

				return TableOfFknas.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char30".equals(typeName)) {

				return Char30.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "decimal3.0".equals(typeName)) {

				return Decimal30.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "numeric2".equals(typeName)) {

				return Numeric2.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "decimal3.1".equals(typeName)) {

				return Decimal31.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "numeric1".equals(typeName)) {

				return Numeric1.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "decimal3.2".equals(typeName)) {

				return Decimal32.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "numeric4".equals(typeName)) {

				return Numeric4.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "numeric3".equals(typeName)) {

				return Numeric3.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI)
					&& "RfcException.Message.Number".equals(typeName)) {

				return RfcExceptionMessageNumber.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "Fknbk".equals(typeName)) {

				return Fknbk.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "numeric6".equals(typeName)) {

				return Numeric6.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "numeric5".equals(typeName)) {

				return Numeric5.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "numeric8".equals(typeName)) {

				return Numeric8.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "numeric7".equals(typeName)) {

				return Numeric7.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "TableOfFkuntxt".equals(typeName)) {

				return TableOfFkuntxt.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "lang".equals(typeName)) {

				return Lang.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "date".equals(typeName)) {

				return Date.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char28".equals(typeName)) {

				return Char28.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "Bapiaddr2".equals(typeName)) {

				return Bapiaddr2.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "quantum13.3".equals(typeName)) {

				return Quantum133.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "Bapiaddr1".equals(typeName)) {

				return Bapiaddr1.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char60".equals(typeName)) {

				return Char60.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char25".equals(typeName)) {

				return Char25.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char20".equals(typeName)) {

				return Char20.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "Fkuntxt".equals(typeName)) {

				return Fkuntxt.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "Fknas".equals(typeName)) {

				return Fknas.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "curr8.2".equals(typeName)) {

				return Curr82.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "TableOfFknbk".equals(typeName)) {

				return TableOfFknbk.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char18".equals(typeName)) {

				return Char18.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char16".equals(typeName)) {

				return Char16.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char15".equals(typeName)) {

				return Char15.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char14".equals(typeName)) {

				return Char14.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char12".equals(typeName)) {

				return Char12.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char11".equals(typeName)) {

				return Char11.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:rfc:functions".equals(namespaceURI)
					&& "char10".equals(typeName)) {

				return Char10.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "Knb1".equals(typeName)) {

				return Knb1.Factory.parse(reader);

			}

			if ("urn:sap-com:document:sap:soap:functions:mc-style"
					.equals(namespaceURI) && "Fknex".equals(typeName)) {

				return Fknex.Factory.parse(reader);

			}

			throw new org.apache.axis2.databinding.ADBException(
					"Unsupported type " + namespaceURI + " " + typeName);
		}

	}

	public static class ZsdCustomerMaintainAllException implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:soap:functions:mc-style",
				"ZsdCustomerMaintainAll.Exception", "ns1");

		/**
		 * field for ZsdCustomerMaintainAllException
		 */

		protected ZsdCustomerMaintainAllRfcException localZsdCustomerMaintainAllException;

		/**
		 * Auto generated getter method
		 * 
		 * @return ZsdCustomerMaintainAllRfcException
		 */
		public ZsdCustomerMaintainAllRfcException getZsdCustomerMaintainAllException() {
			return localZsdCustomerMaintainAllException;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZsdCustomerMaintainAllException
		 */
		public void setZsdCustomerMaintainAllException(
				ZsdCustomerMaintainAllRfcException param) {

			this.localZsdCustomerMaintainAllException = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			if (localZsdCustomerMaintainAllException == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"ZsdCustomerMaintainAll.Exception cannot be null!");
			}
			localZsdCustomerMaintainAllException.serialize(MY_QNAME, xmlWriter);

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return localZsdCustomerMaintainAllException.getPullParser(MY_QNAME);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static ZsdCustomerMaintainAllException parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				ZsdCustomerMaintainAllException object = new ZsdCustomerMaintainAllException();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement()) {

							if (reader.isStartElement()
									&& new javax.xml.namespace.QName(
											"urn:sap-com:document:sap:soap:functions:mc-style",
											"ZsdCustomerMaintainAll.Exception")
											.equals(reader.getName())) {

								object.setZsdCustomerMaintainAllException(ZsdCustomerMaintainAllRfcException.Factory
										.parse(reader));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Fknvd implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * Fknvd Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Mandt
		 */

		protected Clnt3 localMandt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Clnt3
		 */
		public Clnt3 getMandt() {
			return localMandt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mandt
		 */
		public void setMandt(Clnt3 param) {

			this.localMandt = param;

		}

		/**
		 * field for Kunnr
		 */

		protected Char10 localKunnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKunnr() {
			return localKunnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kunnr
		 */
		public void setKunnr(Char10 param) {

			this.localKunnr = param;

		}

		/**
		 * field for Vkorg
		 */

		protected Char4 localVkorg;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getVkorg() {
			return localVkorg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vkorg
		 */
		public void setVkorg(Char4 param) {

			this.localVkorg = param;

		}

		/**
		 * field for Vtweg
		 */

		protected Char2 localVtweg;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getVtweg() {
			return localVtweg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vtweg
		 */
		public void setVtweg(Char2 param) {

			this.localVtweg = param;

		}

		/**
		 * field for Spart
		 */

		protected Char2 localSpart;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getSpart() {
			return localSpart;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Spart
		 */
		public void setSpart(Char2 param) {

			this.localSpart = param;

		}

		/**
		 * field for Doctp
		 */

		protected Char4 localDoctp;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getDoctp() {
			return localDoctp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Doctp
		 */
		public void setDoctp(Char4 param) {

			this.localDoctp = param;

		}

		/**
		 * field for Spras
		 */

		protected Lang localSpras;

		/**
		 * Auto generated getter method
		 * 
		 * @return Lang
		 */
		public Lang getSpras() {
			return localSpras;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Spras
		 */
		public void setSpras(Lang param) {

			this.localSpras = param;

		}

		/**
		 * field for Doanz
		 */

		protected Decimal30 localDoanz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Decimal30
		 */
		public Decimal30 getDoanz() {
			return localDoanz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Doanz
		 */
		public void setDoanz(Decimal30 param) {

			this.localDoanz = param;

		}

		/**
		 * field for Dover
		 */

		protected Char1 localDover;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getDover() {
			return localDover;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dover
		 */
		public void setDover(Char1 param) {

			this.localDover = param;

		}

		/**
		 * field for Nacha
		 */

		protected Char1 localNacha;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getNacha() {
			return localNacha;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Nacha
		 */
		public void setNacha(Char1 param) {

			this.localNacha = param;

		}

		/**
		 * field for Kz
		 */

		protected Char1 localKz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getKz() {
			return localKz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kz
		 */
		public void setKz(Char1 param) {

			this.localKz = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Fknvd", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Fknvd", xmlWriter);
				}

			}

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			localMandt.serialize(new javax.xml.namespace.QName("", "Mandt"),
					xmlWriter);

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			localKunnr.serialize(new javax.xml.namespace.QName("", "Kunnr"),
					xmlWriter);

			if (localVkorg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vkorg cannot be null!!");
			}
			localVkorg.serialize(new javax.xml.namespace.QName("", "Vkorg"),
					xmlWriter);

			if (localVtweg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vtweg cannot be null!!");
			}
			localVtweg.serialize(new javax.xml.namespace.QName("", "Vtweg"),
					xmlWriter);

			if (localSpart == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Spart cannot be null!!");
			}
			localSpart.serialize(new javax.xml.namespace.QName("", "Spart"),
					xmlWriter);

			if (localDoctp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Doctp cannot be null!!");
			}
			localDoctp.serialize(new javax.xml.namespace.QName("", "Doctp"),
					xmlWriter);

			if (localSpras == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Spras cannot be null!!");
			}
			localSpras.serialize(new javax.xml.namespace.QName("", "Spras"),
					xmlWriter);

			if (localDoanz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Doanz cannot be null!!");
			}
			localDoanz.serialize(new javax.xml.namespace.QName("", "Doanz"),
					xmlWriter);

			if (localDover == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dover cannot be null!!");
			}
			localDover.serialize(new javax.xml.namespace.QName("", "Dover"),
					xmlWriter);

			if (localNacha == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Nacha cannot be null!!");
			}
			localNacha.serialize(new javax.xml.namespace.QName("", "Nacha"),
					xmlWriter);

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			localKz.serialize(new javax.xml.namespace.QName("", "Kz"),
					xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "Mandt"));

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			elementList.add(localMandt);

			elementList.add(new javax.xml.namespace.QName("", "Kunnr"));

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			elementList.add(localKunnr);

			elementList.add(new javax.xml.namespace.QName("", "Vkorg"));

			if (localVkorg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vkorg cannot be null!!");
			}
			elementList.add(localVkorg);

			elementList.add(new javax.xml.namespace.QName("", "Vtweg"));

			if (localVtweg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vtweg cannot be null!!");
			}
			elementList.add(localVtweg);

			elementList.add(new javax.xml.namespace.QName("", "Spart"));

			if (localSpart == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Spart cannot be null!!");
			}
			elementList.add(localSpart);

			elementList.add(new javax.xml.namespace.QName("", "Doctp"));

			if (localDoctp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Doctp cannot be null!!");
			}
			elementList.add(localDoctp);

			elementList.add(new javax.xml.namespace.QName("", "Spras"));

			if (localSpras == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Spras cannot be null!!");
			}
			elementList.add(localSpras);

			elementList.add(new javax.xml.namespace.QName("", "Doanz"));

			if (localDoanz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Doanz cannot be null!!");
			}
			elementList.add(localDoanz);

			elementList.add(new javax.xml.namespace.QName("", "Dover"));

			if (localDover == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dover cannot be null!!");
			}
			elementList.add(localDover);

			elementList.add(new javax.xml.namespace.QName("", "Nacha"));

			if (localNacha == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Nacha cannot be null!!");
			}
			elementList.add(localNacha);

			elementList.add(new javax.xml.namespace.QName("", "Kz"));

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			elementList.add(localKz);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Fknvd parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Fknvd object = new Fknvd();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"Fknvd".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Fknvd) ExtensionMapper.getTypeObject(
										nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mandt")
									.equals(reader.getName())) {

						object.setMandt(Clnt3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kunnr")
									.equals(reader.getName())) {

						object.setKunnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vkorg")
									.equals(reader.getName())) {

						object.setVkorg(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vtweg")
									.equals(reader.getName())) {

						object.setVtweg(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Spart")
									.equals(reader.getName())) {

						object.setSpart(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Doctp")
									.equals(reader.getName())) {

						object.setDoctp(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Spras")
									.equals(reader.getName())) {

						object.setSpras(Lang.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Doanz")
									.equals(reader.getName())) {

						object.setDoanz(Decimal30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dover")
									.equals(reader.getName())) {

						object.setDover(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Nacha")
									.equals(reader.getName())) {

						object.setNacha(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kz")
									.equals(reader.getName())) {

						object.setKz(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Knvv implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name = Knvv
		 * Namespace URI = urn:sap-com:document:sap:soap:functions:mc-style
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for Mandt
		 */

		protected Clnt3 localMandt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Clnt3
		 */
		public Clnt3 getMandt() {
			return localMandt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mandt
		 */
		public void setMandt(Clnt3 param) {

			this.localMandt = param;

		}

		/**
		 * field for Kunnr
		 */

		protected Char10 localKunnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKunnr() {
			return localKunnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kunnr
		 */
		public void setKunnr(Char10 param) {

			this.localKunnr = param;

		}

		/**
		 * field for Vkorg
		 */

		protected Char4 localVkorg;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getVkorg() {
			return localVkorg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vkorg
		 */
		public void setVkorg(Char4 param) {

			this.localVkorg = param;

		}

		/**
		 * field for Vtweg
		 */

		protected Char2 localVtweg;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getVtweg() {
			return localVtweg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vtweg
		 */
		public void setVtweg(Char2 param) {

			this.localVtweg = param;

		}

		/**
		 * field for Spart
		 */

		protected Char2 localSpart;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getSpart() {
			return localSpart;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Spart
		 */
		public void setSpart(Char2 param) {

			this.localSpart = param;

		}

		/**
		 * field for Ernam
		 */

		protected Char12 localErnam;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char12
		 */
		public Char12 getErnam() {
			return localErnam;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Ernam
		 */
		public void setErnam(Char12 param) {

			this.localErnam = param;

		}

		/**
		 * field for Erdat
		 */

		protected Date localErdat;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getErdat() {
			return localErdat;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Erdat
		 */
		public void setErdat(Date param) {

			this.localErdat = param;

		}

		/**
		 * field for Begru
		 */

		protected Char4 localBegru;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getBegru() {
			return localBegru;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Begru
		 */
		public void setBegru(Char4 param) {

			this.localBegru = param;

		}

		/**
		 * field for Loevm
		 */

		protected Char1 localLoevm;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getLoevm() {
			return localLoevm;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Loevm
		 */
		public void setLoevm(Char1 param) {

			this.localLoevm = param;

		}

		/**
		 * field for Versg
		 */

		protected Char1 localVersg;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getVersg() {
			return localVersg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Versg
		 */
		public void setVersg(Char1 param) {

			this.localVersg = param;

		}

		/**
		 * field for Aufsd
		 */

		protected Char2 localAufsd;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getAufsd() {
			return localAufsd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Aufsd
		 */
		public void setAufsd(Char2 param) {

			this.localAufsd = param;

		}

		/**
		 * field for Kalks
		 */

		protected Char1 localKalks;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getKalks() {
			return localKalks;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kalks
		 */
		public void setKalks(Char1 param) {

			this.localKalks = param;

		}

		/**
		 * field for Kdgrp
		 */

		protected Char2 localKdgrp;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getKdgrp() {
			return localKdgrp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kdgrp
		 */
		public void setKdgrp(Char2 param) {

			this.localKdgrp = param;

		}

		/**
		 * field for Bzirk
		 */

		protected Char6 localBzirk;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char6
		 */
		public Char6 getBzirk() {
			return localBzirk;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bzirk
		 */
		public void setBzirk(Char6 param) {

			this.localBzirk = param;

		}

		/**
		 * field for Konda
		 */

		protected Char2 localKonda;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getKonda() {
			return localKonda;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Konda
		 */
		public void setKonda(Char2 param) {

			this.localKonda = param;

		}

		/**
		 * field for Pltyp
		 */

		protected Char2 localPltyp;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getPltyp() {
			return localPltyp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pltyp
		 */
		public void setPltyp(Char2 param) {

			this.localPltyp = param;

		}

		/**
		 * field for Awahr
		 */

		protected Numeric3 localAwahr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric3
		 */
		public Numeric3 getAwahr() {
			return localAwahr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Awahr
		 */
		public void setAwahr(Numeric3 param) {

			this.localAwahr = param;

		}

		/**
		 * field for Inco1
		 */

		protected Char3 localInco1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getInco1() {
			return localInco1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Inco1
		 */
		public void setInco1(Char3 param) {

			this.localInco1 = param;

		}

		/**
		 * field for Inco2
		 */

		protected Char28 localInco2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char28
		 */
		public Char28 getInco2() {
			return localInco2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Inco2
		 */
		public void setInco2(Char28 param) {

			this.localInco2 = param;

		}

		/**
		 * field for Lifsd
		 */

		protected Char2 localLifsd;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getLifsd() {
			return localLifsd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Lifsd
		 */
		public void setLifsd(Char2 param) {

			this.localLifsd = param;

		}

		/**
		 * field for Autlf
		 */

		protected Char1 localAutlf;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getAutlf() {
			return localAutlf;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Autlf
		 */
		public void setAutlf(Char1 param) {

			this.localAutlf = param;

		}

		/**
		 * field for Antlf
		 */

		protected Decimal10 localAntlf;

		/**
		 * Auto generated getter method
		 * 
		 * @return Decimal10
		 */
		public Decimal10 getAntlf() {
			return localAntlf;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Antlf
		 */
		public void setAntlf(Decimal10 param) {

			this.localAntlf = param;

		}

		/**
		 * field for Kztlf
		 */

		protected Char1 localKztlf;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getKztlf() {
			return localKztlf;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kztlf
		 */
		public void setKztlf(Char1 param) {

			this.localKztlf = param;

		}

		/**
		 * field for Kzazu
		 */

		protected Char1 localKzazu;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getKzazu() {
			return localKzazu;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kzazu
		 */
		public void setKzazu(Char1 param) {

			this.localKzazu = param;

		}

		/**
		 * field for Chspl
		 */

		protected Char1 localChspl;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getChspl() {
			return localChspl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Chspl
		 */
		public void setChspl(Char1 param) {

			this.localChspl = param;

		}

		/**
		 * field for Lprio
		 */

		protected Numeric2 localLprio;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric2
		 */
		public Numeric2 getLprio() {
			return localLprio;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Lprio
		 */
		public void setLprio(Numeric2 param) {

			this.localLprio = param;

		}

		/**
		 * field for Eikto
		 */

		protected Char12 localEikto;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char12
		 */
		public Char12 getEikto() {
			return localEikto;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Eikto
		 */
		public void setEikto(Char12 param) {

			this.localEikto = param;

		}

		/**
		 * field for Vsbed
		 */

		protected Char2 localVsbed;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getVsbed() {
			return localVsbed;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vsbed
		 */
		public void setVsbed(Char2 param) {

			this.localVsbed = param;

		}

		/**
		 * field for Faksd
		 */

		protected Char2 localFaksd;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getFaksd() {
			return localFaksd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Faksd
		 */
		public void setFaksd(Char2 param) {

			this.localFaksd = param;

		}

		/**
		 * field for Mrnkz
		 */

		protected Char1 localMrnkz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getMrnkz() {
			return localMrnkz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mrnkz
		 */
		public void setMrnkz(Char1 param) {

			this.localMrnkz = param;

		}

		/**
		 * field for Perfk
		 */

		protected Char2 localPerfk;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getPerfk() {
			return localPerfk;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Perfk
		 */
		public void setPerfk(Char2 param) {

			this.localPerfk = param;

		}

		/**
		 * field for Perrl
		 */

		protected Char2 localPerrl;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getPerrl() {
			return localPerrl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Perrl
		 */
		public void setPerrl(Char2 param) {

			this.localPerrl = param;

		}

		/**
		 * field for Kvakz
		 */

		protected Char1 localKvakz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getKvakz() {
			return localKvakz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kvakz
		 */
		public void setKvakz(Char1 param) {

			this.localKvakz = param;

		}

		/**
		 * field for Kvawt
		 */

		protected Curr132 localKvawt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Curr132
		 */
		public Curr132 getKvawt() {
			return localKvawt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kvawt
		 */
		public void setKvawt(Curr132 param) {

			this.localKvawt = param;

		}

		/**
		 * field for Waers
		 */

		protected Cuky5 localWaers;

		/**
		 * Auto generated getter method
		 * 
		 * @return Cuky5
		 */
		public Cuky5 getWaers() {
			return localWaers;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Waers
		 */
		public void setWaers(Cuky5 param) {

			this.localWaers = param;

		}

		/**
		 * field for Klabc
		 */

		protected Char2 localKlabc;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getKlabc() {
			return localKlabc;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Klabc
		 */
		public void setKlabc(Char2 param) {

			this.localKlabc = param;

		}

		/**
		 * field for Ktgrd
		 */

		protected Char2 localKtgrd;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getKtgrd() {
			return localKtgrd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Ktgrd
		 */
		public void setKtgrd(Char2 param) {

			this.localKtgrd = param;

		}

		/**
		 * field for Zterm
		 */

		protected Char4 localZterm;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getZterm() {
			return localZterm;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Zterm
		 */
		public void setZterm(Char4 param) {

			this.localZterm = param;

		}

		/**
		 * field for Vwerk
		 */

		protected Char4 localVwerk;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getVwerk() {
			return localVwerk;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vwerk
		 */
		public void setVwerk(Char4 param) {

			this.localVwerk = param;

		}

		/**
		 * field for Vkgrp
		 */

		protected Char3 localVkgrp;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getVkgrp() {
			return localVkgrp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vkgrp
		 */
		public void setVkgrp(Char3 param) {

			this.localVkgrp = param;

		}

		/**
		 * field for Vkbur
		 */

		protected Char4 localVkbur;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getVkbur() {
			return localVkbur;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vkbur
		 */
		public void setVkbur(Char4 param) {

			this.localVkbur = param;

		}

		/**
		 * field for Vsort
		 */

		protected Char10 localVsort;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getVsort() {
			return localVsort;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vsort
		 */
		public void setVsort(Char10 param) {

			this.localVsort = param;

		}

		/**
		 * field for Kvgr1
		 */

		protected Char3 localKvgr1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getKvgr1() {
			return localKvgr1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kvgr1
		 */
		public void setKvgr1(Char3 param) {

			this.localKvgr1 = param;

		}

		/**
		 * field for Kvgr2
		 */

		protected Char3 localKvgr2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getKvgr2() {
			return localKvgr2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kvgr2
		 */
		public void setKvgr2(Char3 param) {

			this.localKvgr2 = param;

		}

		/**
		 * field for Kvgr3
		 */

		protected Char3 localKvgr3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getKvgr3() {
			return localKvgr3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kvgr3
		 */
		public void setKvgr3(Char3 param) {

			this.localKvgr3 = param;

		}

		/**
		 * field for Kvgr4
		 */

		protected Char3 localKvgr4;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getKvgr4() {
			return localKvgr4;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kvgr4
		 */
		public void setKvgr4(Char3 param) {

			this.localKvgr4 = param;

		}

		/**
		 * field for Kvgr5
		 */

		protected Char3 localKvgr5;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getKvgr5() {
			return localKvgr5;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kvgr5
		 */
		public void setKvgr5(Char3 param) {

			this.localKvgr5 = param;

		}

		/**
		 * field for Bokre
		 */

		protected Char1 localBokre;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getBokre() {
			return localBokre;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bokre
		 */
		public void setBokre(Char1 param) {

			this.localBokre = param;

		}

		/**
		 * field for Boidt
		 */

		protected Date localBoidt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getBoidt() {
			return localBoidt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Boidt
		 */
		public void setBoidt(Date param) {

			this.localBoidt = param;

		}

		/**
		 * field for Kurst
		 */

		protected Char4 localKurst;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getKurst() {
			return localKurst;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kurst
		 */
		public void setKurst(Char4 param) {

			this.localKurst = param;

		}

		/**
		 * field for Prfre
		 */

		protected Char1 localPrfre;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getPrfre() {
			return localPrfre;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Prfre
		 */
		public void setPrfre(Char1 param) {

			this.localPrfre = param;

		}

		/**
		 * field for Prat1
		 */

		protected Char1 localPrat1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getPrat1() {
			return localPrat1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Prat1
		 */
		public void setPrat1(Char1 param) {

			this.localPrat1 = param;

		}

		/**
		 * field for Prat2
		 */

		protected Char1 localPrat2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getPrat2() {
			return localPrat2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Prat2
		 */
		public void setPrat2(Char1 param) {

			this.localPrat2 = param;

		}

		/**
		 * field for Prat3
		 */

		protected Char1 localPrat3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getPrat3() {
			return localPrat3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Prat3
		 */
		public void setPrat3(Char1 param) {

			this.localPrat3 = param;

		}

		/**
		 * field for Prat4
		 */

		protected Char1 localPrat4;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getPrat4() {
			return localPrat4;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Prat4
		 */
		public void setPrat4(Char1 param) {

			this.localPrat4 = param;

		}

		/**
		 * field for Prat5
		 */

		protected Char1 localPrat5;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getPrat5() {
			return localPrat5;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Prat5
		 */
		public void setPrat5(Char1 param) {

			this.localPrat5 = param;

		}

		/**
		 * field for Prat6
		 */

		protected Char1 localPrat6;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getPrat6() {
			return localPrat6;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Prat6
		 */
		public void setPrat6(Char1 param) {

			this.localPrat6 = param;

		}

		/**
		 * field for Prat7
		 */

		protected Char1 localPrat7;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getPrat7() {
			return localPrat7;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Prat7
		 */
		public void setPrat7(Char1 param) {

			this.localPrat7 = param;

		}

		/**
		 * field for Prat8
		 */

		protected Char1 localPrat8;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getPrat8() {
			return localPrat8;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Prat8
		 */
		public void setPrat8(Char1 param) {

			this.localPrat8 = param;

		}

		/**
		 * field for Prat9
		 */

		protected Char1 localPrat9;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getPrat9() {
			return localPrat9;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Prat9
		 */
		public void setPrat9(Char1 param) {

			this.localPrat9 = param;

		}

		/**
		 * field for Prata
		 */

		protected Char1 localPrata;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getPrata() {
			return localPrata;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Prata
		 */
		public void setPrata(Char1 param) {

			this.localPrata = param;

		}

		/**
		 * field for Kabss
		 */

		protected Char4 localKabss;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getKabss() {
			return localKabss;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kabss
		 */
		public void setKabss(Char4 param) {

			this.localKabss = param;

		}

		/**
		 * field for Kkber
		 */

		protected Char4 localKkber;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getKkber() {
			return localKkber;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kkber
		 */
		public void setKkber(Char4 param) {

			this.localKkber = param;

		}

		/**
		 * field for Cassd
		 */

		protected Char2 localCassd;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getCassd() {
			return localCassd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Cassd
		 */
		public void setCassd(Char2 param) {

			this.localCassd = param;

		}

		/**
		 * field for Rdoff
		 */

		protected Char1 localRdoff;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getRdoff() {
			return localRdoff;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Rdoff
		 */
		public void setRdoff(Char1 param) {

			this.localRdoff = param;

		}

		/**
		 * field for Agrel
		 */

		protected Char1 localAgrel;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getAgrel() {
			return localAgrel;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Agrel
		 */
		public void setAgrel(Char1 param) {

			this.localAgrel = param;

		}

		/**
		 * field for Megru
		 */

		protected Char4 localMegru;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getMegru() {
			return localMegru;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Megru
		 */
		public void setMegru(Char4 param) {

			this.localMegru = param;

		}

		/**
		 * field for Uebto
		 */

		protected Decimal31 localUebto;

		/**
		 * Auto generated getter method
		 * 
		 * @return Decimal31
		 */
		public Decimal31 getUebto() {
			return localUebto;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Uebto
		 */
		public void setUebto(Decimal31 param) {

			this.localUebto = param;

		}

		/**
		 * field for Untto
		 */

		protected Decimal31 localUntto;

		/**
		 * Auto generated getter method
		 * 
		 * @return Decimal31
		 */
		public Decimal31 getUntto() {
			return localUntto;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Untto
		 */
		public void setUntto(Decimal31 param) {

			this.localUntto = param;

		}

		/**
		 * field for Uebtk
		 */

		protected Char1 localUebtk;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getUebtk() {
			return localUebtk;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Uebtk
		 */
		public void setUebtk(Char1 param) {

			this.localUebtk = param;

		}

		/**
		 * field for Pvksm
		 */

		protected Char2 localPvksm;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getPvksm() {
			return localPvksm;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pvksm
		 */
		public void setPvksm(Char2 param) {

			this.localPvksm = param;

		}

		/**
		 * field for Podkz
		 */

		protected Char1 localPodkz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getPodkz() {
			return localPodkz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Podkz
		 */
		public void setPodkz(Char1 param) {

			this.localPodkz = param;

		}

		/**
		 * field for Podtg
		 */

		protected Decimal110 localPodtg;

		/**
		 * Auto generated getter method
		 * 
		 * @return Decimal110
		 */
		public Decimal110 getPodtg() {
			return localPodtg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Podtg
		 */
		public void setPodtg(Decimal110 param) {

			this.localPodtg = param;

		}

		/**
		 * field for Blind
		 */

		protected Char1 localBlind;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getBlind() {
			return localBlind;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Blind
		 */
		public void setBlind(Char1 param) {

			this.localBlind = param;

		}

		/**
		 * field for CarrierNotif
		 */

		protected Char1 localCarrierNotif;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getCarrierNotif() {
			return localCarrierNotif;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CarrierNotif
		 */
		public void setCarrierNotif(Char1 param) {

			this.localCarrierNotif = param;

		}

		/**
		 * field for _Bev1_Emlgpfand
		 */

		protected Char1 local_Bev1_Emlgpfand;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 get_Bev1_Emlgpfand() {
			return local_Bev1_Emlgpfand;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _Bev1_Emlgpfand
		 */
		public void set_Bev1_Emlgpfand(Char1 param) {

			this.local_Bev1_Emlgpfand = param;

		}

		/**
		 * field for _Bev1_Emlgforts
		 */

		protected Char1 local_Bev1_Emlgforts;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 get_Bev1_Emlgforts() {
			return local_Bev1_Emlgforts;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _Bev1_Emlgforts
		 */
		public void set_Bev1_Emlgforts(Char1 param) {

			this.local_Bev1_Emlgforts = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Knvv", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Knvv", xmlWriter);
				}

			}

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			localMandt.serialize(new javax.xml.namespace.QName("", "Mandt"),
					xmlWriter);

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			localKunnr.serialize(new javax.xml.namespace.QName("", "Kunnr"),
					xmlWriter);

			if (localVkorg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vkorg cannot be null!!");
			}
			localVkorg.serialize(new javax.xml.namespace.QName("", "Vkorg"),
					xmlWriter);

			if (localVtweg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vtweg cannot be null!!");
			}
			localVtweg.serialize(new javax.xml.namespace.QName("", "Vtweg"),
					xmlWriter);

			if (localSpart == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Spart cannot be null!!");
			}
			localSpart.serialize(new javax.xml.namespace.QName("", "Spart"),
					xmlWriter);

			if (localErnam == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ernam cannot be null!!");
			}
			localErnam.serialize(new javax.xml.namespace.QName("", "Ernam"),
					xmlWriter);

			if (localErdat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Erdat cannot be null!!");
			}
			localErdat.serialize(new javax.xml.namespace.QName("", "Erdat"),
					xmlWriter);

			if (localBegru == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Begru cannot be null!!");
			}
			localBegru.serialize(new javax.xml.namespace.QName("", "Begru"),
					xmlWriter);

			if (localLoevm == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Loevm cannot be null!!");
			}
			localLoevm.serialize(new javax.xml.namespace.QName("", "Loevm"),
					xmlWriter);

			if (localVersg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Versg cannot be null!!");
			}
			localVersg.serialize(new javax.xml.namespace.QName("", "Versg"),
					xmlWriter);

			if (localAufsd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Aufsd cannot be null!!");
			}
			localAufsd.serialize(new javax.xml.namespace.QName("", "Aufsd"),
					xmlWriter);

			if (localKalks == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kalks cannot be null!!");
			}
			localKalks.serialize(new javax.xml.namespace.QName("", "Kalks"),
					xmlWriter);

			if (localKdgrp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kdgrp cannot be null!!");
			}
			localKdgrp.serialize(new javax.xml.namespace.QName("", "Kdgrp"),
					xmlWriter);

			if (localBzirk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bzirk cannot be null!!");
			}
			localBzirk.serialize(new javax.xml.namespace.QName("", "Bzirk"),
					xmlWriter);

			if (localKonda == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Konda cannot be null!!");
			}
			localKonda.serialize(new javax.xml.namespace.QName("", "Konda"),
					xmlWriter);

			if (localPltyp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pltyp cannot be null!!");
			}
			localPltyp.serialize(new javax.xml.namespace.QName("", "Pltyp"),
					xmlWriter);

			if (localAwahr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Awahr cannot be null!!");
			}
			localAwahr.serialize(new javax.xml.namespace.QName("", "Awahr"),
					xmlWriter);

			if (localInco1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Inco1 cannot be null!!");
			}
			localInco1.serialize(new javax.xml.namespace.QName("", "Inco1"),
					xmlWriter);

			if (localInco2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Inco2 cannot be null!!");
			}
			localInco2.serialize(new javax.xml.namespace.QName("", "Inco2"),
					xmlWriter);

			if (localLifsd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lifsd cannot be null!!");
			}
			localLifsd.serialize(new javax.xml.namespace.QName("", "Lifsd"),
					xmlWriter);

			if (localAutlf == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Autlf cannot be null!!");
			}
			localAutlf.serialize(new javax.xml.namespace.QName("", "Autlf"),
					xmlWriter);

			if (localAntlf == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Antlf cannot be null!!");
			}
			localAntlf.serialize(new javax.xml.namespace.QName("", "Antlf"),
					xmlWriter);

			if (localKztlf == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kztlf cannot be null!!");
			}
			localKztlf.serialize(new javax.xml.namespace.QName("", "Kztlf"),
					xmlWriter);

			if (localKzazu == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kzazu cannot be null!!");
			}
			localKzazu.serialize(new javax.xml.namespace.QName("", "Kzazu"),
					xmlWriter);

			if (localChspl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Chspl cannot be null!!");
			}
			localChspl.serialize(new javax.xml.namespace.QName("", "Chspl"),
					xmlWriter);

			if (localLprio == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lprio cannot be null!!");
			}
			localLprio.serialize(new javax.xml.namespace.QName("", "Lprio"),
					xmlWriter);

			if (localEikto == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Eikto cannot be null!!");
			}
			localEikto.serialize(new javax.xml.namespace.QName("", "Eikto"),
					xmlWriter);

			if (localVsbed == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vsbed cannot be null!!");
			}
			localVsbed.serialize(new javax.xml.namespace.QName("", "Vsbed"),
					xmlWriter);

			if (localFaksd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Faksd cannot be null!!");
			}
			localFaksd.serialize(new javax.xml.namespace.QName("", "Faksd"),
					xmlWriter);

			if (localMrnkz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mrnkz cannot be null!!");
			}
			localMrnkz.serialize(new javax.xml.namespace.QName("", "Mrnkz"),
					xmlWriter);

			if (localPerfk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Perfk cannot be null!!");
			}
			localPerfk.serialize(new javax.xml.namespace.QName("", "Perfk"),
					xmlWriter);

			if (localPerrl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Perrl cannot be null!!");
			}
			localPerrl.serialize(new javax.xml.namespace.QName("", "Perrl"),
					xmlWriter);

			if (localKvakz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kvakz cannot be null!!");
			}
			localKvakz.serialize(new javax.xml.namespace.QName("", "Kvakz"),
					xmlWriter);

			if (localKvawt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kvawt cannot be null!!");
			}
			localKvawt.serialize(new javax.xml.namespace.QName("", "Kvawt"),
					xmlWriter);

			if (localWaers == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Waers cannot be null!!");
			}
			localWaers.serialize(new javax.xml.namespace.QName("", "Waers"),
					xmlWriter);

			if (localKlabc == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Klabc cannot be null!!");
			}
			localKlabc.serialize(new javax.xml.namespace.QName("", "Klabc"),
					xmlWriter);

			if (localKtgrd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ktgrd cannot be null!!");
			}
			localKtgrd.serialize(new javax.xml.namespace.QName("", "Ktgrd"),
					xmlWriter);

			if (localZterm == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zterm cannot be null!!");
			}
			localZterm.serialize(new javax.xml.namespace.QName("", "Zterm"),
					xmlWriter);

			if (localVwerk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vwerk cannot be null!!");
			}
			localVwerk.serialize(new javax.xml.namespace.QName("", "Vwerk"),
					xmlWriter);

			if (localVkgrp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vkgrp cannot be null!!");
			}
			localVkgrp.serialize(new javax.xml.namespace.QName("", "Vkgrp"),
					xmlWriter);

			if (localVkbur == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vkbur cannot be null!!");
			}
			localVkbur.serialize(new javax.xml.namespace.QName("", "Vkbur"),
					xmlWriter);

			if (localVsort == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vsort cannot be null!!");
			}
			localVsort.serialize(new javax.xml.namespace.QName("", "Vsort"),
					xmlWriter);

			if (localKvgr1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kvgr1 cannot be null!!");
			}
			localKvgr1.serialize(new javax.xml.namespace.QName("", "Kvgr1"),
					xmlWriter);

			if (localKvgr2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kvgr2 cannot be null!!");
			}
			localKvgr2.serialize(new javax.xml.namespace.QName("", "Kvgr2"),
					xmlWriter);

			if (localKvgr3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kvgr3 cannot be null!!");
			}
			localKvgr3.serialize(new javax.xml.namespace.QName("", "Kvgr3"),
					xmlWriter);

			if (localKvgr4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kvgr4 cannot be null!!");
			}
			localKvgr4.serialize(new javax.xml.namespace.QName("", "Kvgr4"),
					xmlWriter);

			if (localKvgr5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kvgr5 cannot be null!!");
			}
			localKvgr5.serialize(new javax.xml.namespace.QName("", "Kvgr5"),
					xmlWriter);

			if (localBokre == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bokre cannot be null!!");
			}
			localBokre.serialize(new javax.xml.namespace.QName("", "Bokre"),
					xmlWriter);

			if (localBoidt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Boidt cannot be null!!");
			}
			localBoidt.serialize(new javax.xml.namespace.QName("", "Boidt"),
					xmlWriter);

			if (localKurst == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kurst cannot be null!!");
			}
			localKurst.serialize(new javax.xml.namespace.QName("", "Kurst"),
					xmlWriter);

			if (localPrfre == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prfre cannot be null!!");
			}
			localPrfre.serialize(new javax.xml.namespace.QName("", "Prfre"),
					xmlWriter);

			if (localPrat1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prat1 cannot be null!!");
			}
			localPrat1.serialize(new javax.xml.namespace.QName("", "Prat1"),
					xmlWriter);

			if (localPrat2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prat2 cannot be null!!");
			}
			localPrat2.serialize(new javax.xml.namespace.QName("", "Prat2"),
					xmlWriter);

			if (localPrat3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prat3 cannot be null!!");
			}
			localPrat3.serialize(new javax.xml.namespace.QName("", "Prat3"),
					xmlWriter);

			if (localPrat4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prat4 cannot be null!!");
			}
			localPrat4.serialize(new javax.xml.namespace.QName("", "Prat4"),
					xmlWriter);

			if (localPrat5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prat5 cannot be null!!");
			}
			localPrat5.serialize(new javax.xml.namespace.QName("", "Prat5"),
					xmlWriter);

			if (localPrat6 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prat6 cannot be null!!");
			}
			localPrat6.serialize(new javax.xml.namespace.QName("", "Prat6"),
					xmlWriter);

			if (localPrat7 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prat7 cannot be null!!");
			}
			localPrat7.serialize(new javax.xml.namespace.QName("", "Prat7"),
					xmlWriter);

			if (localPrat8 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prat8 cannot be null!!");
			}
			localPrat8.serialize(new javax.xml.namespace.QName("", "Prat8"),
					xmlWriter);

			if (localPrat9 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prat9 cannot be null!!");
			}
			localPrat9.serialize(new javax.xml.namespace.QName("", "Prat9"),
					xmlWriter);

			if (localPrata == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prata cannot be null!!");
			}
			localPrata.serialize(new javax.xml.namespace.QName("", "Prata"),
					xmlWriter);

			if (localKabss == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kabss cannot be null!!");
			}
			localKabss.serialize(new javax.xml.namespace.QName("", "Kabss"),
					xmlWriter);

			if (localKkber == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kkber cannot be null!!");
			}
			localKkber.serialize(new javax.xml.namespace.QName("", "Kkber"),
					xmlWriter);

			if (localCassd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Cassd cannot be null!!");
			}
			localCassd.serialize(new javax.xml.namespace.QName("", "Cassd"),
					xmlWriter);

			if (localRdoff == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Rdoff cannot be null!!");
			}
			localRdoff.serialize(new javax.xml.namespace.QName("", "Rdoff"),
					xmlWriter);

			if (localAgrel == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Agrel cannot be null!!");
			}
			localAgrel.serialize(new javax.xml.namespace.QName("", "Agrel"),
					xmlWriter);

			if (localMegru == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Megru cannot be null!!");
			}
			localMegru.serialize(new javax.xml.namespace.QName("", "Megru"),
					xmlWriter);

			if (localUebto == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Uebto cannot be null!!");
			}
			localUebto.serialize(new javax.xml.namespace.QName("", "Uebto"),
					xmlWriter);

			if (localUntto == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Untto cannot be null!!");
			}
			localUntto.serialize(new javax.xml.namespace.QName("", "Untto"),
					xmlWriter);

			if (localUebtk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Uebtk cannot be null!!");
			}
			localUebtk.serialize(new javax.xml.namespace.QName("", "Uebtk"),
					xmlWriter);

			if (localPvksm == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pvksm cannot be null!!");
			}
			localPvksm.serialize(new javax.xml.namespace.QName("", "Pvksm"),
					xmlWriter);

			if (localPodkz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Podkz cannot be null!!");
			}
			localPodkz.serialize(new javax.xml.namespace.QName("", "Podkz"),
					xmlWriter);

			if (localPodtg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Podtg cannot be null!!");
			}
			localPodtg.serialize(new javax.xml.namespace.QName("", "Podtg"),
					xmlWriter);

			if (localBlind == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Blind cannot be null!!");
			}
			localBlind.serialize(new javax.xml.namespace.QName("", "Blind"),
					xmlWriter);

			if (localCarrierNotif == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"CarrierNotif cannot be null!!");
			}
			localCarrierNotif.serialize(new javax.xml.namespace.QName("",
					"CarrierNotif"), xmlWriter);

			if (local_Bev1_Emlgpfand == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-bev1_-emlgpfand cannot be null!!");
			}
			local_Bev1_Emlgpfand.serialize(new javax.xml.namespace.QName("",
					"_-bev1_-emlgpfand"), xmlWriter);

			if (local_Bev1_Emlgforts == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-bev1_-emlgforts cannot be null!!");
			}
			local_Bev1_Emlgforts.serialize(new javax.xml.namespace.QName("",
					"_-bev1_-emlgforts"), xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "Mandt"));

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			elementList.add(localMandt);

			elementList.add(new javax.xml.namespace.QName("", "Kunnr"));

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			elementList.add(localKunnr);

			elementList.add(new javax.xml.namespace.QName("", "Vkorg"));

			if (localVkorg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vkorg cannot be null!!");
			}
			elementList.add(localVkorg);

			elementList.add(new javax.xml.namespace.QName("", "Vtweg"));

			if (localVtweg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vtweg cannot be null!!");
			}
			elementList.add(localVtweg);

			elementList.add(new javax.xml.namespace.QName("", "Spart"));

			if (localSpart == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Spart cannot be null!!");
			}
			elementList.add(localSpart);

			elementList.add(new javax.xml.namespace.QName("", "Ernam"));

			if (localErnam == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ernam cannot be null!!");
			}
			elementList.add(localErnam);

			elementList.add(new javax.xml.namespace.QName("", "Erdat"));

			if (localErdat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Erdat cannot be null!!");
			}
			elementList.add(localErdat);

			elementList.add(new javax.xml.namespace.QName("", "Begru"));

			if (localBegru == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Begru cannot be null!!");
			}
			elementList.add(localBegru);

			elementList.add(new javax.xml.namespace.QName("", "Loevm"));

			if (localLoevm == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Loevm cannot be null!!");
			}
			elementList.add(localLoevm);

			elementList.add(new javax.xml.namespace.QName("", "Versg"));

			if (localVersg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Versg cannot be null!!");
			}
			elementList.add(localVersg);

			elementList.add(new javax.xml.namespace.QName("", "Aufsd"));

			if (localAufsd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Aufsd cannot be null!!");
			}
			elementList.add(localAufsd);

			elementList.add(new javax.xml.namespace.QName("", "Kalks"));

			if (localKalks == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kalks cannot be null!!");
			}
			elementList.add(localKalks);

			elementList.add(new javax.xml.namespace.QName("", "Kdgrp"));

			if (localKdgrp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kdgrp cannot be null!!");
			}
			elementList.add(localKdgrp);

			elementList.add(new javax.xml.namespace.QName("", "Bzirk"));

			if (localBzirk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bzirk cannot be null!!");
			}
			elementList.add(localBzirk);

			elementList.add(new javax.xml.namespace.QName("", "Konda"));

			if (localKonda == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Konda cannot be null!!");
			}
			elementList.add(localKonda);

			elementList.add(new javax.xml.namespace.QName("", "Pltyp"));

			if (localPltyp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pltyp cannot be null!!");
			}
			elementList.add(localPltyp);

			elementList.add(new javax.xml.namespace.QName("", "Awahr"));

			if (localAwahr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Awahr cannot be null!!");
			}
			elementList.add(localAwahr);

			elementList.add(new javax.xml.namespace.QName("", "Inco1"));

			if (localInco1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Inco1 cannot be null!!");
			}
			elementList.add(localInco1);

			elementList.add(new javax.xml.namespace.QName("", "Inco2"));

			if (localInco2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Inco2 cannot be null!!");
			}
			elementList.add(localInco2);

			elementList.add(new javax.xml.namespace.QName("", "Lifsd"));

			if (localLifsd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lifsd cannot be null!!");
			}
			elementList.add(localLifsd);

			elementList.add(new javax.xml.namespace.QName("", "Autlf"));

			if (localAutlf == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Autlf cannot be null!!");
			}
			elementList.add(localAutlf);

			elementList.add(new javax.xml.namespace.QName("", "Antlf"));

			if (localAntlf == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Antlf cannot be null!!");
			}
			elementList.add(localAntlf);

			elementList.add(new javax.xml.namespace.QName("", "Kztlf"));

			if (localKztlf == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kztlf cannot be null!!");
			}
			elementList.add(localKztlf);

			elementList.add(new javax.xml.namespace.QName("", "Kzazu"));

			if (localKzazu == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kzazu cannot be null!!");
			}
			elementList.add(localKzazu);

			elementList.add(new javax.xml.namespace.QName("", "Chspl"));

			if (localChspl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Chspl cannot be null!!");
			}
			elementList.add(localChspl);

			elementList.add(new javax.xml.namespace.QName("", "Lprio"));

			if (localLprio == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lprio cannot be null!!");
			}
			elementList.add(localLprio);

			elementList.add(new javax.xml.namespace.QName("", "Eikto"));

			if (localEikto == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Eikto cannot be null!!");
			}
			elementList.add(localEikto);

			elementList.add(new javax.xml.namespace.QName("", "Vsbed"));

			if (localVsbed == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vsbed cannot be null!!");
			}
			elementList.add(localVsbed);

			elementList.add(new javax.xml.namespace.QName("", "Faksd"));

			if (localFaksd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Faksd cannot be null!!");
			}
			elementList.add(localFaksd);

			elementList.add(new javax.xml.namespace.QName("", "Mrnkz"));

			if (localMrnkz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mrnkz cannot be null!!");
			}
			elementList.add(localMrnkz);

			elementList.add(new javax.xml.namespace.QName("", "Perfk"));

			if (localPerfk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Perfk cannot be null!!");
			}
			elementList.add(localPerfk);

			elementList.add(new javax.xml.namespace.QName("", "Perrl"));

			if (localPerrl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Perrl cannot be null!!");
			}
			elementList.add(localPerrl);

			elementList.add(new javax.xml.namespace.QName("", "Kvakz"));

			if (localKvakz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kvakz cannot be null!!");
			}
			elementList.add(localKvakz);

			elementList.add(new javax.xml.namespace.QName("", "Kvawt"));

			if (localKvawt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kvawt cannot be null!!");
			}
			elementList.add(localKvawt);

			elementList.add(new javax.xml.namespace.QName("", "Waers"));

			if (localWaers == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Waers cannot be null!!");
			}
			elementList.add(localWaers);

			elementList.add(new javax.xml.namespace.QName("", "Klabc"));

			if (localKlabc == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Klabc cannot be null!!");
			}
			elementList.add(localKlabc);

			elementList.add(new javax.xml.namespace.QName("", "Ktgrd"));

			if (localKtgrd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ktgrd cannot be null!!");
			}
			elementList.add(localKtgrd);

			elementList.add(new javax.xml.namespace.QName("", "Zterm"));

			if (localZterm == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zterm cannot be null!!");
			}
			elementList.add(localZterm);

			elementList.add(new javax.xml.namespace.QName("", "Vwerk"));

			if (localVwerk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vwerk cannot be null!!");
			}
			elementList.add(localVwerk);

			elementList.add(new javax.xml.namespace.QName("", "Vkgrp"));

			if (localVkgrp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vkgrp cannot be null!!");
			}
			elementList.add(localVkgrp);

			elementList.add(new javax.xml.namespace.QName("", "Vkbur"));

			if (localVkbur == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vkbur cannot be null!!");
			}
			elementList.add(localVkbur);

			elementList.add(new javax.xml.namespace.QName("", "Vsort"));

			if (localVsort == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vsort cannot be null!!");
			}
			elementList.add(localVsort);

			elementList.add(new javax.xml.namespace.QName("", "Kvgr1"));

			if (localKvgr1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kvgr1 cannot be null!!");
			}
			elementList.add(localKvgr1);

			elementList.add(new javax.xml.namespace.QName("", "Kvgr2"));

			if (localKvgr2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kvgr2 cannot be null!!");
			}
			elementList.add(localKvgr2);

			elementList.add(new javax.xml.namespace.QName("", "Kvgr3"));

			if (localKvgr3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kvgr3 cannot be null!!");
			}
			elementList.add(localKvgr3);

			elementList.add(new javax.xml.namespace.QName("", "Kvgr4"));

			if (localKvgr4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kvgr4 cannot be null!!");
			}
			elementList.add(localKvgr4);

			elementList.add(new javax.xml.namespace.QName("", "Kvgr5"));

			if (localKvgr5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kvgr5 cannot be null!!");
			}
			elementList.add(localKvgr5);

			elementList.add(new javax.xml.namespace.QName("", "Bokre"));

			if (localBokre == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bokre cannot be null!!");
			}
			elementList.add(localBokre);

			elementList.add(new javax.xml.namespace.QName("", "Boidt"));

			if (localBoidt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Boidt cannot be null!!");
			}
			elementList.add(localBoidt);

			elementList.add(new javax.xml.namespace.QName("", "Kurst"));

			if (localKurst == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kurst cannot be null!!");
			}
			elementList.add(localKurst);

			elementList.add(new javax.xml.namespace.QName("", "Prfre"));

			if (localPrfre == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prfre cannot be null!!");
			}
			elementList.add(localPrfre);

			elementList.add(new javax.xml.namespace.QName("", "Prat1"));

			if (localPrat1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prat1 cannot be null!!");
			}
			elementList.add(localPrat1);

			elementList.add(new javax.xml.namespace.QName("", "Prat2"));

			if (localPrat2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prat2 cannot be null!!");
			}
			elementList.add(localPrat2);

			elementList.add(new javax.xml.namespace.QName("", "Prat3"));

			if (localPrat3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prat3 cannot be null!!");
			}
			elementList.add(localPrat3);

			elementList.add(new javax.xml.namespace.QName("", "Prat4"));

			if (localPrat4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prat4 cannot be null!!");
			}
			elementList.add(localPrat4);

			elementList.add(new javax.xml.namespace.QName("", "Prat5"));

			if (localPrat5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prat5 cannot be null!!");
			}
			elementList.add(localPrat5);

			elementList.add(new javax.xml.namespace.QName("", "Prat6"));

			if (localPrat6 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prat6 cannot be null!!");
			}
			elementList.add(localPrat6);

			elementList.add(new javax.xml.namespace.QName("", "Prat7"));

			if (localPrat7 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prat7 cannot be null!!");
			}
			elementList.add(localPrat7);

			elementList.add(new javax.xml.namespace.QName("", "Prat8"));

			if (localPrat8 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prat8 cannot be null!!");
			}
			elementList.add(localPrat8);

			elementList.add(new javax.xml.namespace.QName("", "Prat9"));

			if (localPrat9 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prat9 cannot be null!!");
			}
			elementList.add(localPrat9);

			elementList.add(new javax.xml.namespace.QName("", "Prata"));

			if (localPrata == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prata cannot be null!!");
			}
			elementList.add(localPrata);

			elementList.add(new javax.xml.namespace.QName("", "Kabss"));

			if (localKabss == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kabss cannot be null!!");
			}
			elementList.add(localKabss);

			elementList.add(new javax.xml.namespace.QName("", "Kkber"));

			if (localKkber == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kkber cannot be null!!");
			}
			elementList.add(localKkber);

			elementList.add(new javax.xml.namespace.QName("", "Cassd"));

			if (localCassd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Cassd cannot be null!!");
			}
			elementList.add(localCassd);

			elementList.add(new javax.xml.namespace.QName("", "Rdoff"));

			if (localRdoff == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Rdoff cannot be null!!");
			}
			elementList.add(localRdoff);

			elementList.add(new javax.xml.namespace.QName("", "Agrel"));

			if (localAgrel == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Agrel cannot be null!!");
			}
			elementList.add(localAgrel);

			elementList.add(new javax.xml.namespace.QName("", "Megru"));

			if (localMegru == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Megru cannot be null!!");
			}
			elementList.add(localMegru);

			elementList.add(new javax.xml.namespace.QName("", "Uebto"));

			if (localUebto == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Uebto cannot be null!!");
			}
			elementList.add(localUebto);

			elementList.add(new javax.xml.namespace.QName("", "Untto"));

			if (localUntto == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Untto cannot be null!!");
			}
			elementList.add(localUntto);

			elementList.add(new javax.xml.namespace.QName("", "Uebtk"));

			if (localUebtk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Uebtk cannot be null!!");
			}
			elementList.add(localUebtk);

			elementList.add(new javax.xml.namespace.QName("", "Pvksm"));

			if (localPvksm == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pvksm cannot be null!!");
			}
			elementList.add(localPvksm);

			elementList.add(new javax.xml.namespace.QName("", "Podkz"));

			if (localPodkz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Podkz cannot be null!!");
			}
			elementList.add(localPodkz);

			elementList.add(new javax.xml.namespace.QName("", "Podtg"));

			if (localPodtg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Podtg cannot be null!!");
			}
			elementList.add(localPodtg);

			elementList.add(new javax.xml.namespace.QName("", "Blind"));

			if (localBlind == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Blind cannot be null!!");
			}
			elementList.add(localBlind);

			elementList.add(new javax.xml.namespace.QName("", "CarrierNotif"));

			if (localCarrierNotif == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"CarrierNotif cannot be null!!");
			}
			elementList.add(localCarrierNotif);

			elementList.add(new javax.xml.namespace.QName("",
					"_-bev1_-emlgpfand"));

			if (local_Bev1_Emlgpfand == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-bev1_-emlgpfand cannot be null!!");
			}
			elementList.add(local_Bev1_Emlgpfand);

			elementList.add(new javax.xml.namespace.QName("",
					"_-bev1_-emlgforts"));

			if (local_Bev1_Emlgforts == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-bev1_-emlgforts cannot be null!!");
			}
			elementList.add(local_Bev1_Emlgforts);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Knvv parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Knvv object = new Knvv();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"Knvv".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Knvv) ExtensionMapper.getTypeObject(
										nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mandt")
									.equals(reader.getName())) {

						object.setMandt(Clnt3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kunnr")
									.equals(reader.getName())) {

						object.setKunnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vkorg")
									.equals(reader.getName())) {

						object.setVkorg(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vtweg")
									.equals(reader.getName())) {

						object.setVtweg(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Spart")
									.equals(reader.getName())) {

						object.setSpart(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Ernam")
									.equals(reader.getName())) {

						object.setErnam(Char12.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Erdat")
									.equals(reader.getName())) {

						object.setErdat(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Begru")
									.equals(reader.getName())) {

						object.setBegru(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Loevm")
									.equals(reader.getName())) {

						object.setLoevm(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Versg")
									.equals(reader.getName())) {

						object.setVersg(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Aufsd")
									.equals(reader.getName())) {

						object.setAufsd(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kalks")
									.equals(reader.getName())) {

						object.setKalks(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kdgrp")
									.equals(reader.getName())) {

						object.setKdgrp(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bzirk")
									.equals(reader.getName())) {

						object.setBzirk(Char6.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Konda")
									.equals(reader.getName())) {

						object.setKonda(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pltyp")
									.equals(reader.getName())) {

						object.setPltyp(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Awahr")
									.equals(reader.getName())) {

						object.setAwahr(Numeric3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Inco1")
									.equals(reader.getName())) {

						object.setInco1(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Inco2")
									.equals(reader.getName())) {

						object.setInco2(Char28.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Lifsd")
									.equals(reader.getName())) {

						object.setLifsd(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Autlf")
									.equals(reader.getName())) {

						object.setAutlf(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Antlf")
									.equals(reader.getName())) {

						object.setAntlf(Decimal10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kztlf")
									.equals(reader.getName())) {

						object.setKztlf(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kzazu")
									.equals(reader.getName())) {

						object.setKzazu(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Chspl")
									.equals(reader.getName())) {

						object.setChspl(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Lprio")
									.equals(reader.getName())) {

						object.setLprio(Numeric2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Eikto")
									.equals(reader.getName())) {

						object.setEikto(Char12.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vsbed")
									.equals(reader.getName())) {

						object.setVsbed(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Faksd")
									.equals(reader.getName())) {

						object.setFaksd(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mrnkz")
									.equals(reader.getName())) {

						object.setMrnkz(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Perfk")
									.equals(reader.getName())) {

						object.setPerfk(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Perrl")
									.equals(reader.getName())) {

						object.setPerrl(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kvakz")
									.equals(reader.getName())) {

						object.setKvakz(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kvawt")
									.equals(reader.getName())) {

						object.setKvawt(Curr132.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Waers")
									.equals(reader.getName())) {

						object.setWaers(Cuky5.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Klabc")
									.equals(reader.getName())) {

						object.setKlabc(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Ktgrd")
									.equals(reader.getName())) {

						object.setKtgrd(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Zterm")
									.equals(reader.getName())) {

						object.setZterm(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vwerk")
									.equals(reader.getName())) {

						object.setVwerk(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vkgrp")
									.equals(reader.getName())) {

						object.setVkgrp(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vkbur")
									.equals(reader.getName())) {

						object.setVkbur(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vsort")
									.equals(reader.getName())) {

						object.setVsort(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kvgr1")
									.equals(reader.getName())) {

						object.setKvgr1(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kvgr2")
									.equals(reader.getName())) {

						object.setKvgr2(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kvgr3")
									.equals(reader.getName())) {

						object.setKvgr3(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kvgr4")
									.equals(reader.getName())) {

						object.setKvgr4(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kvgr5")
									.equals(reader.getName())) {

						object.setKvgr5(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bokre")
									.equals(reader.getName())) {

						object.setBokre(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Boidt")
									.equals(reader.getName())) {

						object.setBoidt(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kurst")
									.equals(reader.getName())) {

						object.setKurst(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Prfre")
									.equals(reader.getName())) {

						object.setPrfre(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Prat1")
									.equals(reader.getName())) {

						object.setPrat1(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Prat2")
									.equals(reader.getName())) {

						object.setPrat2(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Prat3")
									.equals(reader.getName())) {

						object.setPrat3(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Prat4")
									.equals(reader.getName())) {

						object.setPrat4(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Prat5")
									.equals(reader.getName())) {

						object.setPrat5(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Prat6")
									.equals(reader.getName())) {

						object.setPrat6(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Prat7")
									.equals(reader.getName())) {

						object.setPrat7(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Prat8")
									.equals(reader.getName())) {

						object.setPrat8(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Prat9")
									.equals(reader.getName())) {

						object.setPrat9(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Prata")
									.equals(reader.getName())) {

						object.setPrata(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kabss")
									.equals(reader.getName())) {

						object.setKabss(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kkber")
									.equals(reader.getName())) {

						object.setKkber(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Cassd")
									.equals(reader.getName())) {

						object.setCassd(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Rdoff")
									.equals(reader.getName())) {

						object.setRdoff(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Agrel")
									.equals(reader.getName())) {

						object.setAgrel(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Megru")
									.equals(reader.getName())) {

						object.setMegru(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Uebto")
									.equals(reader.getName())) {

						object.setUebto(Decimal31.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Untto")
									.equals(reader.getName())) {

						object.setUntto(Decimal31.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Uebtk")
									.equals(reader.getName())) {

						object.setUebtk(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pvksm")
									.equals(reader.getName())) {

						object.setPvksm(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Podkz")
									.equals(reader.getName())) {

						object.setPodkz(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Podtg")
									.equals(reader.getName())) {

						object.setPodtg(Decimal110.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Blind")
									.equals(reader.getName())) {

						object.setBlind(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "CarrierNotif")
									.equals(reader.getName())) {

						object.setCarrierNotif(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"_-bev1_-emlgpfand").equals(reader
									.getName())) {

						object.set_Bev1_Emlgpfand(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"_-bev1_-emlgforts").equals(reader
									.getName())) {

						object.set_Bev1_Emlgforts(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Fknva implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * Fknva Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Mandt
		 */

		protected Clnt3 localMandt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Clnt3
		 */
		public Clnt3 getMandt() {
			return localMandt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mandt
		 */
		public void setMandt(Clnt3 param) {

			this.localMandt = param;

		}

		/**
		 * field for Kunnr
		 */

		protected Char10 localKunnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKunnr() {
			return localKunnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kunnr
		 */
		public void setKunnr(Char10 param) {

			this.localKunnr = param;

		}

		/**
		 * field for Ablad
		 */

		protected Char25 localAblad;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char25
		 */
		public Char25 getAblad() {
			return localAblad;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Ablad
		 */
		public void setAblad(Char25 param) {

			this.localAblad = param;

		}

		/**
		 * field for Lfdnr
		 */

		protected Numeric2 localLfdnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric2
		 */
		public Numeric2 getLfdnr() {
			return localLfdnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Lfdnr
		 */
		public void setLfdnr(Numeric2 param) {

			this.localLfdnr = param;

		}

		/**
		 * field for Knfak
		 */

		protected Char2 localKnfak;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getKnfak() {
			return localKnfak;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Knfak
		 */
		public void setKnfak(Char2 param) {

			this.localKnfak = param;

		}

		/**
		 * field for Wanid
		 */

		protected Char3 localWanid;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getWanid() {
			return localWanid;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Wanid
		 */
		public void setWanid(Char3 param) {

			this.localWanid = param;

		}

		/**
		 * field for Tpqua
		 */

		protected Char1 localTpqua;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getTpqua() {
			return localTpqua;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Tpqua
		 */
		public void setTpqua(Char1 param) {

			this.localTpqua = param;

		}

		/**
		 * field for Tpgrp
		 */

		protected Char2 localTpgrp;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getTpgrp() {
			return localTpgrp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Tpgrp
		 */
		public void setTpgrp(Char2 param) {

			this.localTpgrp = param;

		}

		/**
		 * field for Stzkl
		 */

		protected Decimal32 localStzkl;

		/**
		 * Auto generated getter method
		 * 
		 * @return Decimal32
		 */
		public Decimal32 getStzkl() {
			return localStzkl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Stzkl
		 */
		public void setStzkl(Decimal32 param) {

			this.localStzkl = param;

		}

		/**
		 * field for Stzzu
		 */

		protected Decimal30 localStzzu;

		/**
		 * Auto generated getter method
		 * 
		 * @return Decimal30
		 */
		public Decimal30 getStzzu() {
			return localStzzu;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Stzzu
		 */
		public void setStzzu(Decimal30 param) {

			this.localStzzu = param;

		}

		/**
		 * field for Moab1
		 */

		protected Time localMoab1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getMoab1() {
			return localMoab1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Moab1
		 */
		public void setMoab1(Time param) {

			this.localMoab1 = param;

		}

		/**
		 * field for Mobi1
		 */

		protected Time localMobi1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getMobi1() {
			return localMobi1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mobi1
		 */
		public void setMobi1(Time param) {

			this.localMobi1 = param;

		}

		/**
		 * field for Moab2
		 */

		protected Time localMoab2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getMoab2() {
			return localMoab2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Moab2
		 */
		public void setMoab2(Time param) {

			this.localMoab2 = param;

		}

		/**
		 * field for Mobi2
		 */

		protected Time localMobi2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getMobi2() {
			return localMobi2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mobi2
		 */
		public void setMobi2(Time param) {

			this.localMobi2 = param;

		}

		/**
		 * field for Diab1
		 */

		protected Time localDiab1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getDiab1() {
			return localDiab1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Diab1
		 */
		public void setDiab1(Time param) {

			this.localDiab1 = param;

		}

		/**
		 * field for Dibi1
		 */

		protected Time localDibi1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getDibi1() {
			return localDibi1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dibi1
		 */
		public void setDibi1(Time param) {

			this.localDibi1 = param;

		}

		/**
		 * field for Diab2
		 */

		protected Time localDiab2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getDiab2() {
			return localDiab2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Diab2
		 */
		public void setDiab2(Time param) {

			this.localDiab2 = param;

		}

		/**
		 * field for Dibi2
		 */

		protected Time localDibi2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getDibi2() {
			return localDibi2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dibi2
		 */
		public void setDibi2(Time param) {

			this.localDibi2 = param;

		}

		/**
		 * field for Miab1
		 */

		protected Time localMiab1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getMiab1() {
			return localMiab1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Miab1
		 */
		public void setMiab1(Time param) {

			this.localMiab1 = param;

		}

		/**
		 * field for Mibi1
		 */

		protected Time localMibi1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getMibi1() {
			return localMibi1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mibi1
		 */
		public void setMibi1(Time param) {

			this.localMibi1 = param;

		}

		/**
		 * field for Miab2
		 */

		protected Time localMiab2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getMiab2() {
			return localMiab2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Miab2
		 */
		public void setMiab2(Time param) {

			this.localMiab2 = param;

		}

		/**
		 * field for Mibi2
		 */

		protected Time localMibi2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getMibi2() {
			return localMibi2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mibi2
		 */
		public void setMibi2(Time param) {

			this.localMibi2 = param;

		}

		/**
		 * field for Doab1
		 */

		protected Time localDoab1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getDoab1() {
			return localDoab1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Doab1
		 */
		public void setDoab1(Time param) {

			this.localDoab1 = param;

		}

		/**
		 * field for Dobi1
		 */

		protected Time localDobi1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getDobi1() {
			return localDobi1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dobi1
		 */
		public void setDobi1(Time param) {

			this.localDobi1 = param;

		}

		/**
		 * field for Doab2
		 */

		protected Time localDoab2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getDoab2() {
			return localDoab2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Doab2
		 */
		public void setDoab2(Time param) {

			this.localDoab2 = param;

		}

		/**
		 * field for Dobi2
		 */

		protected Time localDobi2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getDobi2() {
			return localDobi2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dobi2
		 */
		public void setDobi2(Time param) {

			this.localDobi2 = param;

		}

		/**
		 * field for Frab1
		 */

		protected Time localFrab1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getFrab1() {
			return localFrab1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Frab1
		 */
		public void setFrab1(Time param) {

			this.localFrab1 = param;

		}

		/**
		 * field for Frbi1
		 */

		protected Time localFrbi1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getFrbi1() {
			return localFrbi1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Frbi1
		 */
		public void setFrbi1(Time param) {

			this.localFrbi1 = param;

		}

		/**
		 * field for Frab2
		 */

		protected Time localFrab2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getFrab2() {
			return localFrab2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Frab2
		 */
		public void setFrab2(Time param) {

			this.localFrab2 = param;

		}

		/**
		 * field for Frbi2
		 */

		protected Time localFrbi2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getFrbi2() {
			return localFrbi2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Frbi2
		 */
		public void setFrbi2(Time param) {

			this.localFrbi2 = param;

		}

		/**
		 * field for Saab1
		 */

		protected Time localSaab1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getSaab1() {
			return localSaab1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Saab1
		 */
		public void setSaab1(Time param) {

			this.localSaab1 = param;

		}

		/**
		 * field for Sabi1
		 */

		protected Time localSabi1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getSabi1() {
			return localSabi1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sabi1
		 */
		public void setSabi1(Time param) {

			this.localSabi1 = param;

		}

		/**
		 * field for Saab2
		 */

		protected Time localSaab2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getSaab2() {
			return localSaab2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Saab2
		 */
		public void setSaab2(Time param) {

			this.localSaab2 = param;

		}

		/**
		 * field for Sabi2
		 */

		protected Time localSabi2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getSabi2() {
			return localSabi2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sabi2
		 */
		public void setSabi2(Time param) {

			this.localSabi2 = param;

		}

		/**
		 * field for Soab1
		 */

		protected Time localSoab1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getSoab1() {
			return localSoab1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Soab1
		 */
		public void setSoab1(Time param) {

			this.localSoab1 = param;

		}

		/**
		 * field for Sobi1
		 */

		protected Time localSobi1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getSobi1() {
			return localSobi1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sobi1
		 */
		public void setSobi1(Time param) {

			this.localSobi1 = param;

		}

		/**
		 * field for Soab2
		 */

		protected Time localSoab2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getSoab2() {
			return localSoab2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Soab2
		 */
		public void setSoab2(Time param) {

			this.localSoab2 = param;

		}

		/**
		 * field for Sobi2
		 */

		protected Time localSobi2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getSobi2() {
			return localSobi2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sobi2
		 */
		public void setSobi2(Time param) {

			this.localSobi2 = param;

		}

		/**
		 * field for Defab
		 */

		protected Char1 localDefab;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getDefab() {
			return localDefab;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Defab
		 */
		public void setDefab(Char1 param) {

			this.localDefab = param;

		}

		/**
		 * field for Kz
		 */

		protected Char1 localKz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getKz() {
			return localKz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kz
		 */
		public void setKz(Char1 param) {

			this.localKz = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Fknva", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Fknva", xmlWriter);
				}

			}

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			localMandt.serialize(new javax.xml.namespace.QName("", "Mandt"),
					xmlWriter);

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			localKunnr.serialize(new javax.xml.namespace.QName("", "Kunnr"),
					xmlWriter);

			if (localAblad == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ablad cannot be null!!");
			}
			localAblad.serialize(new javax.xml.namespace.QName("", "Ablad"),
					xmlWriter);

			if (localLfdnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lfdnr cannot be null!!");
			}
			localLfdnr.serialize(new javax.xml.namespace.QName("", "Lfdnr"),
					xmlWriter);

			if (localKnfak == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Knfak cannot be null!!");
			}
			localKnfak.serialize(new javax.xml.namespace.QName("", "Knfak"),
					xmlWriter);

			if (localWanid == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Wanid cannot be null!!");
			}
			localWanid.serialize(new javax.xml.namespace.QName("", "Wanid"),
					xmlWriter);

			if (localTpqua == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tpqua cannot be null!!");
			}
			localTpqua.serialize(new javax.xml.namespace.QName("", "Tpqua"),
					xmlWriter);

			if (localTpgrp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tpgrp cannot be null!!");
			}
			localTpgrp.serialize(new javax.xml.namespace.QName("", "Tpgrp"),
					xmlWriter);

			if (localStzkl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stzkl cannot be null!!");
			}
			localStzkl.serialize(new javax.xml.namespace.QName("", "Stzkl"),
					xmlWriter);

			if (localStzzu == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stzzu cannot be null!!");
			}
			localStzzu.serialize(new javax.xml.namespace.QName("", "Stzzu"),
					xmlWriter);

			if (localMoab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Moab1 cannot be null!!");
			}
			localMoab1.serialize(new javax.xml.namespace.QName("", "Moab1"),
					xmlWriter);

			if (localMobi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mobi1 cannot be null!!");
			}
			localMobi1.serialize(new javax.xml.namespace.QName("", "Mobi1"),
					xmlWriter);

			if (localMoab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Moab2 cannot be null!!");
			}
			localMoab2.serialize(new javax.xml.namespace.QName("", "Moab2"),
					xmlWriter);

			if (localMobi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mobi2 cannot be null!!");
			}
			localMobi2.serialize(new javax.xml.namespace.QName("", "Mobi2"),
					xmlWriter);

			if (localDiab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Diab1 cannot be null!!");
			}
			localDiab1.serialize(new javax.xml.namespace.QName("", "Diab1"),
					xmlWriter);

			if (localDibi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dibi1 cannot be null!!");
			}
			localDibi1.serialize(new javax.xml.namespace.QName("", "Dibi1"),
					xmlWriter);

			if (localDiab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Diab2 cannot be null!!");
			}
			localDiab2.serialize(new javax.xml.namespace.QName("", "Diab2"),
					xmlWriter);

			if (localDibi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dibi2 cannot be null!!");
			}
			localDibi2.serialize(new javax.xml.namespace.QName("", "Dibi2"),
					xmlWriter);

			if (localMiab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Miab1 cannot be null!!");
			}
			localMiab1.serialize(new javax.xml.namespace.QName("", "Miab1"),
					xmlWriter);

			if (localMibi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mibi1 cannot be null!!");
			}
			localMibi1.serialize(new javax.xml.namespace.QName("", "Mibi1"),
					xmlWriter);

			if (localMiab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Miab2 cannot be null!!");
			}
			localMiab2.serialize(new javax.xml.namespace.QName("", "Miab2"),
					xmlWriter);

			if (localMibi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mibi2 cannot be null!!");
			}
			localMibi2.serialize(new javax.xml.namespace.QName("", "Mibi2"),
					xmlWriter);

			if (localDoab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Doab1 cannot be null!!");
			}
			localDoab1.serialize(new javax.xml.namespace.QName("", "Doab1"),
					xmlWriter);

			if (localDobi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dobi1 cannot be null!!");
			}
			localDobi1.serialize(new javax.xml.namespace.QName("", "Dobi1"),
					xmlWriter);

			if (localDoab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Doab2 cannot be null!!");
			}
			localDoab2.serialize(new javax.xml.namespace.QName("", "Doab2"),
					xmlWriter);

			if (localDobi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dobi2 cannot be null!!");
			}
			localDobi2.serialize(new javax.xml.namespace.QName("", "Dobi2"),
					xmlWriter);

			if (localFrab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Frab1 cannot be null!!");
			}
			localFrab1.serialize(new javax.xml.namespace.QName("", "Frab1"),
					xmlWriter);

			if (localFrbi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Frbi1 cannot be null!!");
			}
			localFrbi1.serialize(new javax.xml.namespace.QName("", "Frbi1"),
					xmlWriter);

			if (localFrab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Frab2 cannot be null!!");
			}
			localFrab2.serialize(new javax.xml.namespace.QName("", "Frab2"),
					xmlWriter);

			if (localFrbi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Frbi2 cannot be null!!");
			}
			localFrbi2.serialize(new javax.xml.namespace.QName("", "Frbi2"),
					xmlWriter);

			if (localSaab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Saab1 cannot be null!!");
			}
			localSaab1.serialize(new javax.xml.namespace.QName("", "Saab1"),
					xmlWriter);

			if (localSabi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sabi1 cannot be null!!");
			}
			localSabi1.serialize(new javax.xml.namespace.QName("", "Sabi1"),
					xmlWriter);

			if (localSaab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Saab2 cannot be null!!");
			}
			localSaab2.serialize(new javax.xml.namespace.QName("", "Saab2"),
					xmlWriter);

			if (localSabi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sabi2 cannot be null!!");
			}
			localSabi2.serialize(new javax.xml.namespace.QName("", "Sabi2"),
					xmlWriter);

			if (localSoab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Soab1 cannot be null!!");
			}
			localSoab1.serialize(new javax.xml.namespace.QName("", "Soab1"),
					xmlWriter);

			if (localSobi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sobi1 cannot be null!!");
			}
			localSobi1.serialize(new javax.xml.namespace.QName("", "Sobi1"),
					xmlWriter);

			if (localSoab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Soab2 cannot be null!!");
			}
			localSoab2.serialize(new javax.xml.namespace.QName("", "Soab2"),
					xmlWriter);

			if (localSobi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sobi2 cannot be null!!");
			}
			localSobi2.serialize(new javax.xml.namespace.QName("", "Sobi2"),
					xmlWriter);

			if (localDefab == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Defab cannot be null!!");
			}
			localDefab.serialize(new javax.xml.namespace.QName("", "Defab"),
					xmlWriter);

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			localKz.serialize(new javax.xml.namespace.QName("", "Kz"),
					xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "Mandt"));

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			elementList.add(localMandt);

			elementList.add(new javax.xml.namespace.QName("", "Kunnr"));

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			elementList.add(localKunnr);

			elementList.add(new javax.xml.namespace.QName("", "Ablad"));

			if (localAblad == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ablad cannot be null!!");
			}
			elementList.add(localAblad);

			elementList.add(new javax.xml.namespace.QName("", "Lfdnr"));

			if (localLfdnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lfdnr cannot be null!!");
			}
			elementList.add(localLfdnr);

			elementList.add(new javax.xml.namespace.QName("", "Knfak"));

			if (localKnfak == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Knfak cannot be null!!");
			}
			elementList.add(localKnfak);

			elementList.add(new javax.xml.namespace.QName("", "Wanid"));

			if (localWanid == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Wanid cannot be null!!");
			}
			elementList.add(localWanid);

			elementList.add(new javax.xml.namespace.QName("", "Tpqua"));

			if (localTpqua == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tpqua cannot be null!!");
			}
			elementList.add(localTpqua);

			elementList.add(new javax.xml.namespace.QName("", "Tpgrp"));

			if (localTpgrp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tpgrp cannot be null!!");
			}
			elementList.add(localTpgrp);

			elementList.add(new javax.xml.namespace.QName("", "Stzkl"));

			if (localStzkl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stzkl cannot be null!!");
			}
			elementList.add(localStzkl);

			elementList.add(new javax.xml.namespace.QName("", "Stzzu"));

			if (localStzzu == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stzzu cannot be null!!");
			}
			elementList.add(localStzzu);

			elementList.add(new javax.xml.namespace.QName("", "Moab1"));

			if (localMoab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Moab1 cannot be null!!");
			}
			elementList.add(localMoab1);

			elementList.add(new javax.xml.namespace.QName("", "Mobi1"));

			if (localMobi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mobi1 cannot be null!!");
			}
			elementList.add(localMobi1);

			elementList.add(new javax.xml.namespace.QName("", "Moab2"));

			if (localMoab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Moab2 cannot be null!!");
			}
			elementList.add(localMoab2);

			elementList.add(new javax.xml.namespace.QName("", "Mobi2"));

			if (localMobi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mobi2 cannot be null!!");
			}
			elementList.add(localMobi2);

			elementList.add(new javax.xml.namespace.QName("", "Diab1"));

			if (localDiab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Diab1 cannot be null!!");
			}
			elementList.add(localDiab1);

			elementList.add(new javax.xml.namespace.QName("", "Dibi1"));

			if (localDibi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dibi1 cannot be null!!");
			}
			elementList.add(localDibi1);

			elementList.add(new javax.xml.namespace.QName("", "Diab2"));

			if (localDiab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Diab2 cannot be null!!");
			}
			elementList.add(localDiab2);

			elementList.add(new javax.xml.namespace.QName("", "Dibi2"));

			if (localDibi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dibi2 cannot be null!!");
			}
			elementList.add(localDibi2);

			elementList.add(new javax.xml.namespace.QName("", "Miab1"));

			if (localMiab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Miab1 cannot be null!!");
			}
			elementList.add(localMiab1);

			elementList.add(new javax.xml.namespace.QName("", "Mibi1"));

			if (localMibi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mibi1 cannot be null!!");
			}
			elementList.add(localMibi1);

			elementList.add(new javax.xml.namespace.QName("", "Miab2"));

			if (localMiab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Miab2 cannot be null!!");
			}
			elementList.add(localMiab2);

			elementList.add(new javax.xml.namespace.QName("", "Mibi2"));

			if (localMibi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mibi2 cannot be null!!");
			}
			elementList.add(localMibi2);

			elementList.add(new javax.xml.namespace.QName("", "Doab1"));

			if (localDoab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Doab1 cannot be null!!");
			}
			elementList.add(localDoab1);

			elementList.add(new javax.xml.namespace.QName("", "Dobi1"));

			if (localDobi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dobi1 cannot be null!!");
			}
			elementList.add(localDobi1);

			elementList.add(new javax.xml.namespace.QName("", "Doab2"));

			if (localDoab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Doab2 cannot be null!!");
			}
			elementList.add(localDoab2);

			elementList.add(new javax.xml.namespace.QName("", "Dobi2"));

			if (localDobi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dobi2 cannot be null!!");
			}
			elementList.add(localDobi2);

			elementList.add(new javax.xml.namespace.QName("", "Frab1"));

			if (localFrab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Frab1 cannot be null!!");
			}
			elementList.add(localFrab1);

			elementList.add(new javax.xml.namespace.QName("", "Frbi1"));

			if (localFrbi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Frbi1 cannot be null!!");
			}
			elementList.add(localFrbi1);

			elementList.add(new javax.xml.namespace.QName("", "Frab2"));

			if (localFrab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Frab2 cannot be null!!");
			}
			elementList.add(localFrab2);

			elementList.add(new javax.xml.namespace.QName("", "Frbi2"));

			if (localFrbi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Frbi2 cannot be null!!");
			}
			elementList.add(localFrbi2);

			elementList.add(new javax.xml.namespace.QName("", "Saab1"));

			if (localSaab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Saab1 cannot be null!!");
			}
			elementList.add(localSaab1);

			elementList.add(new javax.xml.namespace.QName("", "Sabi1"));

			if (localSabi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sabi1 cannot be null!!");
			}
			elementList.add(localSabi1);

			elementList.add(new javax.xml.namespace.QName("", "Saab2"));

			if (localSaab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Saab2 cannot be null!!");
			}
			elementList.add(localSaab2);

			elementList.add(new javax.xml.namespace.QName("", "Sabi2"));

			if (localSabi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sabi2 cannot be null!!");
			}
			elementList.add(localSabi2);

			elementList.add(new javax.xml.namespace.QName("", "Soab1"));

			if (localSoab1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Soab1 cannot be null!!");
			}
			elementList.add(localSoab1);

			elementList.add(new javax.xml.namespace.QName("", "Sobi1"));

			if (localSobi1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sobi1 cannot be null!!");
			}
			elementList.add(localSobi1);

			elementList.add(new javax.xml.namespace.QName("", "Soab2"));

			if (localSoab2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Soab2 cannot be null!!");
			}
			elementList.add(localSoab2);

			elementList.add(new javax.xml.namespace.QName("", "Sobi2"));

			if (localSobi2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sobi2 cannot be null!!");
			}
			elementList.add(localSobi2);

			elementList.add(new javax.xml.namespace.QName("", "Defab"));

			if (localDefab == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Defab cannot be null!!");
			}
			elementList.add(localDefab);

			elementList.add(new javax.xml.namespace.QName("", "Kz"));

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			elementList.add(localKz);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Fknva parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Fknva object = new Fknva();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"Fknva".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Fknva) ExtensionMapper.getTypeObject(
										nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mandt")
									.equals(reader.getName())) {

						object.setMandt(Clnt3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kunnr")
									.equals(reader.getName())) {

						object.setKunnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Ablad")
									.equals(reader.getName())) {

						object.setAblad(Char25.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Lfdnr")
									.equals(reader.getName())) {

						object.setLfdnr(Numeric2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Knfak")
									.equals(reader.getName())) {

						object.setKnfak(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Wanid")
									.equals(reader.getName())) {

						object.setWanid(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Tpqua")
									.equals(reader.getName())) {

						object.setTpqua(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Tpgrp")
									.equals(reader.getName())) {

						object.setTpgrp(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Stzkl")
									.equals(reader.getName())) {

						object.setStzkl(Decimal32.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Stzzu")
									.equals(reader.getName())) {

						object.setStzzu(Decimal30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Moab1")
									.equals(reader.getName())) {

						object.setMoab1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mobi1")
									.equals(reader.getName())) {

						object.setMobi1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Moab2")
									.equals(reader.getName())) {

						object.setMoab2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mobi2")
									.equals(reader.getName())) {

						object.setMobi2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Diab1")
									.equals(reader.getName())) {

						object.setDiab1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dibi1")
									.equals(reader.getName())) {

						object.setDibi1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Diab2")
									.equals(reader.getName())) {

						object.setDiab2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dibi2")
									.equals(reader.getName())) {

						object.setDibi2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Miab1")
									.equals(reader.getName())) {

						object.setMiab1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mibi1")
									.equals(reader.getName())) {

						object.setMibi1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Miab2")
									.equals(reader.getName())) {

						object.setMiab2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mibi2")
									.equals(reader.getName())) {

						object.setMibi2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Doab1")
									.equals(reader.getName())) {

						object.setDoab1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dobi1")
									.equals(reader.getName())) {

						object.setDobi1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Doab2")
									.equals(reader.getName())) {

						object.setDoab2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dobi2")
									.equals(reader.getName())) {

						object.setDobi2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Frab1")
									.equals(reader.getName())) {

						object.setFrab1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Frbi1")
									.equals(reader.getName())) {

						object.setFrbi1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Frab2")
									.equals(reader.getName())) {

						object.setFrab2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Frbi2")
									.equals(reader.getName())) {

						object.setFrbi2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Saab1")
									.equals(reader.getName())) {

						object.setSaab1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sabi1")
									.equals(reader.getName())) {

						object.setSabi1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Saab2")
									.equals(reader.getName())) {

						object.setSaab2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sabi2")
									.equals(reader.getName())) {

						object.setSabi2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Soab1")
									.equals(reader.getName())) {

						object.setSoab1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sobi1")
									.equals(reader.getName())) {

						object.setSobi1(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Soab2")
									.equals(reader.getName())) {

						object.setSoab2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sobi2")
									.equals(reader.getName())) {

						object.setSobi2(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Defab")
									.equals(reader.getName())) {

						object.setDefab(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kz")
									.equals(reader.getName())) {

						object.setKz(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Kna1 implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name = Kna1
		 * Namespace URI = urn:sap-com:document:sap:soap:functions:mc-style
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for Mandt
		 */

		protected Clnt3 localMandt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Clnt3
		 */
		public Clnt3 getMandt() {
			return localMandt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mandt
		 */
		public void setMandt(Clnt3 param) {

			this.localMandt = param;

		}

		/**
		 * field for Kunnr
		 */

		protected Char10 localKunnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKunnr() {
			return localKunnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kunnr
		 */
		public void setKunnr(Char10 param) {

			this.localKunnr = param;

		}

		/**
		 * field for Land1
		 */

		protected Char3 localLand1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getLand1() {
			return localLand1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Land1
		 */
		public void setLand1(Char3 param) {

			this.localLand1 = param;

		}

		/**
		 * field for Name1
		 */

		protected Char35 localName1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char35
		 */
		public Char35 getName1() {
			return localName1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Name1
		 */
		public void setName1(Char35 param) {

			this.localName1 = param;

		}

		/**
		 * field for Name2
		 */

		protected Char35 localName2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char35
		 */
		public Char35 getName2() {
			return localName2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Name2
		 */
		public void setName2(Char35 param) {

			this.localName2 = param;

		}

		/**
		 * field for Ort01
		 */

		protected Char35 localOrt01;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char35
		 */
		public Char35 getOrt01() {
			return localOrt01;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Ort01
		 */
		public void setOrt01(Char35 param) {

			this.localOrt01 = param;

		}

		/**
		 * field for Pstlz
		 */

		protected Char10 localPstlz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getPstlz() {
			return localPstlz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pstlz
		 */
		public void setPstlz(Char10 param) {

			this.localPstlz = param;

		}

		/**
		 * field for Regio
		 */

		protected Char3 localRegio;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getRegio() {
			return localRegio;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Regio
		 */
		public void setRegio(Char3 param) {

			this.localRegio = param;

		}

		/**
		 * field for Sortl
		 */

		protected Char10 localSortl;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getSortl() {
			return localSortl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sortl
		 */
		public void setSortl(Char10 param) {

			this.localSortl = param;

		}

		/**
		 * field for Stras
		 */

		protected Char35 localStras;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char35
		 */
		public Char35 getStras() {
			return localStras;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Stras
		 */
		public void setStras(Char35 param) {

			this.localStras = param;

		}

		/**
		 * field for Telf1
		 */

		protected Char16 localTelf1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char16
		 */
		public Char16 getTelf1() {
			return localTelf1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Telf1
		 */
		public void setTelf1(Char16 param) {

			this.localTelf1 = param;

		}

		/**
		 * field for Telfx
		 */

		protected Char31 localTelfx;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char31
		 */
		public Char31 getTelfx() {
			return localTelfx;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Telfx
		 */
		public void setTelfx(Char31 param) {

			this.localTelfx = param;

		}

		/**
		 * field for Xcpdk
		 */

		protected Char1 localXcpdk;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getXcpdk() {
			return localXcpdk;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Xcpdk
		 */
		public void setXcpdk(Char1 param) {

			this.localXcpdk = param;

		}

		/**
		 * field for Adrnr
		 */

		protected Char10 localAdrnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getAdrnr() {
			return localAdrnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Adrnr
		 */
		public void setAdrnr(Char10 param) {

			this.localAdrnr = param;

		}

		/**
		 * field for Mcod1
		 */

		protected Char25 localMcod1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char25
		 */
		public Char25 getMcod1() {
			return localMcod1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mcod1
		 */
		public void setMcod1(Char25 param) {

			this.localMcod1 = param;

		}

		/**
		 * field for Mcod2
		 */

		protected Char25 localMcod2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char25
		 */
		public Char25 getMcod2() {
			return localMcod2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mcod2
		 */
		public void setMcod2(Char25 param) {

			this.localMcod2 = param;

		}

		/**
		 * field for Mcod3
		 */

		protected Char25 localMcod3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char25
		 */
		public Char25 getMcod3() {
			return localMcod3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mcod3
		 */
		public void setMcod3(Char25 param) {

			this.localMcod3 = param;

		}

		/**
		 * field for Anred
		 */

		protected Char15 localAnred;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char15
		 */
		public Char15 getAnred() {
			return localAnred;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Anred
		 */
		public void setAnred(Char15 param) {

			this.localAnred = param;

		}

		/**
		 * field for Aufsd
		 */

		protected Char2 localAufsd;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getAufsd() {
			return localAufsd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Aufsd
		 */
		public void setAufsd(Char2 param) {

			this.localAufsd = param;

		}

		/**
		 * field for Bahne
		 */

		protected Char25 localBahne;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char25
		 */
		public Char25 getBahne() {
			return localBahne;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bahne
		 */
		public void setBahne(Char25 param) {

			this.localBahne = param;

		}

		/**
		 * field for Bahns
		 */

		protected Char25 localBahns;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char25
		 */
		public Char25 getBahns() {
			return localBahns;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bahns
		 */
		public void setBahns(Char25 param) {

			this.localBahns = param;

		}

		/**
		 * field for Bbbnr
		 */

		protected Numeric7 localBbbnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric7
		 */
		public Numeric7 getBbbnr() {
			return localBbbnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bbbnr
		 */
		public void setBbbnr(Numeric7 param) {

			this.localBbbnr = param;

		}

		/**
		 * field for Bbsnr
		 */

		protected Numeric5 localBbsnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric5
		 */
		public Numeric5 getBbsnr() {
			return localBbsnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bbsnr
		 */
		public void setBbsnr(Numeric5 param) {

			this.localBbsnr = param;

		}

		/**
		 * field for Begru
		 */

		protected Char4 localBegru;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getBegru() {
			return localBegru;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Begru
		 */
		public void setBegru(Char4 param) {

			this.localBegru = param;

		}

		/**
		 * field for Brsch
		 */

		protected Char4 localBrsch;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getBrsch() {
			return localBrsch;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Brsch
		 */
		public void setBrsch(Char4 param) {

			this.localBrsch = param;

		}

		/**
		 * field for Bubkz
		 */

		protected Numeric1 localBubkz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric1
		 */
		public Numeric1 getBubkz() {
			return localBubkz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bubkz
		 */
		public void setBubkz(Numeric1 param) {

			this.localBubkz = param;

		}

		/**
		 * field for Datlt
		 */

		protected Char14 localDatlt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char14
		 */
		public Char14 getDatlt() {
			return localDatlt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Datlt
		 */
		public void setDatlt(Char14 param) {

			this.localDatlt = param;

		}

		/**
		 * field for Erdat
		 */

		protected Date localErdat;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getErdat() {
			return localErdat;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Erdat
		 */
		public void setErdat(Date param) {

			this.localErdat = param;

		}

		/**
		 * field for Ernam
		 */

		protected Char12 localErnam;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char12
		 */
		public Char12 getErnam() {
			return localErnam;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Ernam
		 */
		public void setErnam(Char12 param) {

			this.localErnam = param;

		}

		/**
		 * field for Exabl
		 */

		protected Char1 localExabl;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getExabl() {
			return localExabl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Exabl
		 */
		public void setExabl(Char1 param) {

			this.localExabl = param;

		}

		/**
		 * field for Faksd
		 */

		protected Char2 localFaksd;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getFaksd() {
			return localFaksd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Faksd
		 */
		public void setFaksd(Char2 param) {

			this.localFaksd = param;

		}

		/**
		 * field for Fiskn
		 */

		protected Char10 localFiskn;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getFiskn() {
			return localFiskn;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Fiskn
		 */
		public void setFiskn(Char10 param) {

			this.localFiskn = param;

		}

		/**
		 * field for Knazk
		 */

		protected Char2 localKnazk;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getKnazk() {
			return localKnazk;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Knazk
		 */
		public void setKnazk(Char2 param) {

			this.localKnazk = param;

		}

		/**
		 * field for Knrza
		 */

		protected Char10 localKnrza;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKnrza() {
			return localKnrza;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Knrza
		 */
		public void setKnrza(Char10 param) {

			this.localKnrza = param;

		}

		/**
		 * field for Konzs
		 */

		protected Char10 localKonzs;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKonzs() {
			return localKonzs;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Konzs
		 */
		public void setKonzs(Char10 param) {

			this.localKonzs = param;

		}

		/**
		 * field for Ktokd
		 */

		protected Char4 localKtokd;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getKtokd() {
			return localKtokd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Ktokd
		 */
		public void setKtokd(Char4 param) {

			this.localKtokd = param;

		}

		/**
		 * field for Kukla
		 */

		protected Char2 localKukla;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getKukla() {
			return localKukla;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kukla
		 */
		public void setKukla(Char2 param) {

			this.localKukla = param;

		}

		/**
		 * field for Lifnr
		 */

		protected Char10 localLifnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getLifnr() {
			return localLifnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Lifnr
		 */
		public void setLifnr(Char10 param) {

			this.localLifnr = param;

		}

		/**
		 * field for Lifsd
		 */

		protected Char2 localLifsd;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getLifsd() {
			return localLifsd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Lifsd
		 */
		public void setLifsd(Char2 param) {

			this.localLifsd = param;

		}

		/**
		 * field for Locco
		 */

		protected Char10 localLocco;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getLocco() {
			return localLocco;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Locco
		 */
		public void setLocco(Char10 param) {

			this.localLocco = param;

		}

		/**
		 * field for Loevm
		 */

		protected Char1 localLoevm;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getLoevm() {
			return localLoevm;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Loevm
		 */
		public void setLoevm(Char1 param) {

			this.localLoevm = param;

		}

		/**
		 * field for Name3
		 */

		protected Char35 localName3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char35
		 */
		public Char35 getName3() {
			return localName3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Name3
		 */
		public void setName3(Char35 param) {

			this.localName3 = param;

		}

		/**
		 * field for Name4
		 */

		protected Char35 localName4;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char35
		 */
		public Char35 getName4() {
			return localName4;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Name4
		 */
		public void setName4(Char35 param) {

			this.localName4 = param;

		}

		/**
		 * field for Niels
		 */

		protected Char2 localNiels;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getNiels() {
			return localNiels;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Niels
		 */
		public void setNiels(Char2 param) {

			this.localNiels = param;

		}

		/**
		 * field for Ort02
		 */

		protected Char35 localOrt02;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char35
		 */
		public Char35 getOrt02() {
			return localOrt02;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Ort02
		 */
		public void setOrt02(Char35 param) {

			this.localOrt02 = param;

		}

		/**
		 * field for Pfach
		 */

		protected Char10 localPfach;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getPfach() {
			return localPfach;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pfach
		 */
		public void setPfach(Char10 param) {

			this.localPfach = param;

		}

		/**
		 * field for Pstl2
		 */

		protected Char10 localPstl2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getPstl2() {
			return localPstl2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pstl2
		 */
		public void setPstl2(Char10 param) {

			this.localPstl2 = param;

		}

		/**
		 * field for Counc
		 */

		protected Char3 localCounc;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getCounc() {
			return localCounc;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Counc
		 */
		public void setCounc(Char3 param) {

			this.localCounc = param;

		}

		/**
		 * field for Cityc
		 */

		protected Char4 localCityc;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getCityc() {
			return localCityc;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Cityc
		 */
		public void setCityc(Char4 param) {

			this.localCityc = param;

		}

		/**
		 * field for Rpmkr
		 */

		protected Char5 localRpmkr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char5
		 */
		public Char5 getRpmkr() {
			return localRpmkr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Rpmkr
		 */
		public void setRpmkr(Char5 param) {

			this.localRpmkr = param;

		}

		/**
		 * field for Sperr
		 */

		protected Char1 localSperr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getSperr() {
			return localSperr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sperr
		 */
		public void setSperr(Char1 param) {

			this.localSperr = param;

		}

		/**
		 * field for Spras
		 */

		protected Lang localSpras;

		/**
		 * Auto generated getter method
		 * 
		 * @return Lang
		 */
		public Lang getSpras() {
			return localSpras;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Spras
		 */
		public void setSpras(Lang param) {

			this.localSpras = param;

		}

		/**
		 * field for Stcd1
		 */

		protected Char16 localStcd1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char16
		 */
		public Char16 getStcd1() {
			return localStcd1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Stcd1
		 */
		public void setStcd1(Char16 param) {

			this.localStcd1 = param;

		}

		/**
		 * field for Stcd2
		 */

		protected Char11 localStcd2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char11
		 */
		public Char11 getStcd2() {
			return localStcd2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Stcd2
		 */
		public void setStcd2(Char11 param) {

			this.localStcd2 = param;

		}

		/**
		 * field for Stkza
		 */

		protected Char1 localStkza;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getStkza() {
			return localStkza;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Stkza
		 */
		public void setStkza(Char1 param) {

			this.localStkza = param;

		}

		/**
		 * field for Stkzu
		 */

		protected Char1 localStkzu;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getStkzu() {
			return localStkzu;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Stkzu
		 */
		public void setStkzu(Char1 param) {

			this.localStkzu = param;

		}

		/**
		 * field for Telbx
		 */

		protected Char15 localTelbx;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char15
		 */
		public Char15 getTelbx() {
			return localTelbx;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Telbx
		 */
		public void setTelbx(Char15 param) {

			this.localTelbx = param;

		}

		/**
		 * field for Telf2
		 */

		protected Char16 localTelf2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char16
		 */
		public Char16 getTelf2() {
			return localTelf2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Telf2
		 */
		public void setTelf2(Char16 param) {

			this.localTelf2 = param;

		}

		/**
		 * field for Teltx
		 */

		protected Char30 localTeltx;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char30
		 */
		public Char30 getTeltx() {
			return localTeltx;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Teltx
		 */
		public void setTeltx(Char30 param) {

			this.localTeltx = param;

		}

		/**
		 * field for Telx1
		 */

		protected Char30 localTelx1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char30
		 */
		public Char30 getTelx1() {
			return localTelx1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Telx1
		 */
		public void setTelx1(Char30 param) {

			this.localTelx1 = param;

		}

		/**
		 * field for Lzone
		 */

		protected Char10 localLzone;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getLzone() {
			return localLzone;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Lzone
		 */
		public void setLzone(Char10 param) {

			this.localLzone = param;

		}

		/**
		 * field for Xzemp
		 */

		protected Char1 localXzemp;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getXzemp() {
			return localXzemp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Xzemp
		 */
		public void setXzemp(Char1 param) {

			this.localXzemp = param;

		}

		/**
		 * field for Vbund
		 */

		protected Char6 localVbund;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char6
		 */
		public Char6 getVbund() {
			return localVbund;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vbund
		 */
		public void setVbund(Char6 param) {

			this.localVbund = param;

		}

		/**
		 * field for Stceg
		 */

		protected Char20 localStceg;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char20
		 */
		public Char20 getStceg() {
			return localStceg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Stceg
		 */
		public void setStceg(Char20 param) {

			this.localStceg = param;

		}

		/**
		 * field for Dear1
		 */

		protected Char1 localDear1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getDear1() {
			return localDear1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dear1
		 */
		public void setDear1(Char1 param) {

			this.localDear1 = param;

		}

		/**
		 * field for Dear2
		 */

		protected Char1 localDear2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getDear2() {
			return localDear2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dear2
		 */
		public void setDear2(Char1 param) {

			this.localDear2 = param;

		}

		/**
		 * field for Dear3
		 */

		protected Char1 localDear3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getDear3() {
			return localDear3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dear3
		 */
		public void setDear3(Char1 param) {

			this.localDear3 = param;

		}

		/**
		 * field for Dear4
		 */

		protected Char1 localDear4;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getDear4() {
			return localDear4;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dear4
		 */
		public void setDear4(Char1 param) {

			this.localDear4 = param;

		}

		/**
		 * field for Dear5
		 */

		protected Char1 localDear5;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getDear5() {
			return localDear5;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dear5
		 */
		public void setDear5(Char1 param) {

			this.localDear5 = param;

		}

		/**
		 * field for Gform
		 */

		protected Char2 localGform;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getGform() {
			return localGform;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Gform
		 */
		public void setGform(Char2 param) {

			this.localGform = param;

		}

		/**
		 * field for Bran1
		 */

		protected Char10 localBran1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getBran1() {
			return localBran1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bran1
		 */
		public void setBran1(Char10 param) {

			this.localBran1 = param;

		}

		/**
		 * field for Bran2
		 */

		protected Char10 localBran2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getBran2() {
			return localBran2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bran2
		 */
		public void setBran2(Char10 param) {

			this.localBran2 = param;

		}

		/**
		 * field for Bran3
		 */

		protected Char10 localBran3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getBran3() {
			return localBran3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bran3
		 */
		public void setBran3(Char10 param) {

			this.localBran3 = param;

		}

		/**
		 * field for Bran4
		 */

		protected Char10 localBran4;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getBran4() {
			return localBran4;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bran4
		 */
		public void setBran4(Char10 param) {

			this.localBran4 = param;

		}

		/**
		 * field for Bran5
		 */

		protected Char10 localBran5;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getBran5() {
			return localBran5;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bran5
		 */
		public void setBran5(Char10 param) {

			this.localBran5 = param;

		}

		/**
		 * field for Ekont
		 */

		protected Char10 localEkont;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getEkont() {
			return localEkont;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Ekont
		 */
		public void setEkont(Char10 param) {

			this.localEkont = param;

		}

		/**
		 * field for Umsat
		 */

		protected Curr82 localUmsat;

		/**
		 * Auto generated getter method
		 * 
		 * @return Curr82
		 */
		public Curr82 getUmsat() {
			return localUmsat;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Umsat
		 */
		public void setUmsat(Curr82 param) {

			this.localUmsat = param;

		}

		/**
		 * field for Umjah
		 */

		protected Numeric4 localUmjah;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric4
		 */
		public Numeric4 getUmjah() {
			return localUmjah;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Umjah
		 */
		public void setUmjah(Numeric4 param) {

			this.localUmjah = param;

		}

		/**
		 * field for Uwaer
		 */

		protected Cuky5 localUwaer;

		/**
		 * Auto generated getter method
		 * 
		 * @return Cuky5
		 */
		public Cuky5 getUwaer() {
			return localUwaer;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Uwaer
		 */
		public void setUwaer(Cuky5 param) {

			this.localUwaer = param;

		}

		/**
		 * field for Jmzah
		 */

		protected Numeric6 localJmzah;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric6
		 */
		public Numeric6 getJmzah() {
			return localJmzah;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Jmzah
		 */
		public void setJmzah(Numeric6 param) {

			this.localJmzah = param;

		}

		/**
		 * field for Jmjah
		 */

		protected Numeric4 localJmjah;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric4
		 */
		public Numeric4 getJmjah() {
			return localJmjah;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Jmjah
		 */
		public void setJmjah(Numeric4 param) {

			this.localJmjah = param;

		}

		/**
		 * field for Katr1
		 */

		protected Char2 localKatr1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getKatr1() {
			return localKatr1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Katr1
		 */
		public void setKatr1(Char2 param) {

			this.localKatr1 = param;

		}

		/**
		 * field for Katr2
		 */

		protected Char2 localKatr2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getKatr2() {
			return localKatr2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Katr2
		 */
		public void setKatr2(Char2 param) {

			this.localKatr2 = param;

		}

		/**
		 * field for Katr3
		 */

		protected Char2 localKatr3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getKatr3() {
			return localKatr3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Katr3
		 */
		public void setKatr3(Char2 param) {

			this.localKatr3 = param;

		}

		/**
		 * field for Katr4
		 */

		protected Char2 localKatr4;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getKatr4() {
			return localKatr4;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Katr4
		 */
		public void setKatr4(Char2 param) {

			this.localKatr4 = param;

		}

		/**
		 * field for Katr5
		 */

		protected Char2 localKatr5;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getKatr5() {
			return localKatr5;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Katr5
		 */
		public void setKatr5(Char2 param) {

			this.localKatr5 = param;

		}

		/**
		 * field for Katr6
		 */

		protected Char3 localKatr6;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getKatr6() {
			return localKatr6;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Katr6
		 */
		public void setKatr6(Char3 param) {

			this.localKatr6 = param;

		}

		/**
		 * field for Katr7
		 */

		protected Char3 localKatr7;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getKatr7() {
			return localKatr7;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Katr7
		 */
		public void setKatr7(Char3 param) {

			this.localKatr7 = param;

		}

		/**
		 * field for Katr8
		 */

		protected Char3 localKatr8;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getKatr8() {
			return localKatr8;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Katr8
		 */
		public void setKatr8(Char3 param) {

			this.localKatr8 = param;

		}

		/**
		 * field for Katr9
		 */

		protected Char3 localKatr9;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getKatr9() {
			return localKatr9;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Katr9
		 */
		public void setKatr9(Char3 param) {

			this.localKatr9 = param;

		}

		/**
		 * field for Katr10
		 */

		protected Char3 localKatr10;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getKatr10() {
			return localKatr10;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Katr10
		 */
		public void setKatr10(Char3 param) {

			this.localKatr10 = param;

		}

		/**
		 * field for Stkzn
		 */

		protected Char1 localStkzn;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getStkzn() {
			return localStkzn;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Stkzn
		 */
		public void setStkzn(Char1 param) {

			this.localStkzn = param;

		}

		/**
		 * field for Umsa1
		 */

		protected Curr152 localUmsa1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Curr152
		 */
		public Curr152 getUmsa1() {
			return localUmsa1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Umsa1
		 */
		public void setUmsa1(Curr152 param) {

			this.localUmsa1 = param;

		}

		/**
		 * field for Txjcd
		 */

		protected Char15 localTxjcd;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char15
		 */
		public Char15 getTxjcd() {
			return localTxjcd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Txjcd
		 */
		public void setTxjcd(Char15 param) {

			this.localTxjcd = param;

		}

		/**
		 * field for Periv
		 */

		protected Char2 localPeriv;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getPeriv() {
			return localPeriv;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Periv
		 */
		public void setPeriv(Char2 param) {

			this.localPeriv = param;

		}

		/**
		 * field for Abrvw
		 */

		protected Char3 localAbrvw;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getAbrvw() {
			return localAbrvw;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Abrvw
		 */
		public void setAbrvw(Char3 param) {

			this.localAbrvw = param;

		}

		/**
		 * field for Inspbydebi
		 */

		protected Char1 localInspbydebi;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getInspbydebi() {
			return localInspbydebi;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Inspbydebi
		 */
		public void setInspbydebi(Char1 param) {

			this.localInspbydebi = param;

		}

		/**
		 * field for Inspatdebi
		 */

		protected Char1 localInspatdebi;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getInspatdebi() {
			return localInspatdebi;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Inspatdebi
		 */
		public void setInspatdebi(Char1 param) {

			this.localInspatdebi = param;

		}

		/**
		 * field for Ktocd
		 */

		protected Char4 localKtocd;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getKtocd() {
			return localKtocd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Ktocd
		 */
		public void setKtocd(Char4 param) {

			this.localKtocd = param;

		}

		/**
		 * field for Pfort
		 */

		protected Char35 localPfort;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char35
		 */
		public Char35 getPfort() {
			return localPfort;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pfort
		 */
		public void setPfort(Char35 param) {

			this.localPfort = param;

		}

		/**
		 * field for Werks
		 */

		protected Char4 localWerks;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getWerks() {
			return localWerks;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Werks
		 */
		public void setWerks(Char4 param) {

			this.localWerks = param;

		}

		/**
		 * field for Dtams
		 */

		protected Char1 localDtams;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getDtams() {
			return localDtams;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dtams
		 */
		public void setDtams(Char1 param) {

			this.localDtams = param;

		}

		/**
		 * field for Dtaws
		 */

		protected Char2 localDtaws;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getDtaws() {
			return localDtaws;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dtaws
		 */
		public void setDtaws(Char2 param) {

			this.localDtaws = param;

		}

		/**
		 * field for Duefl
		 */

		protected Char1 localDuefl;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getDuefl() {
			return localDuefl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Duefl
		 */
		public void setDuefl(Char1 param) {

			this.localDuefl = param;

		}

		/**
		 * field for Hzuor
		 */

		protected Numeric2 localHzuor;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric2
		 */
		public Numeric2 getHzuor() {
			return localHzuor;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Hzuor
		 */
		public void setHzuor(Numeric2 param) {

			this.localHzuor = param;

		}

		/**
		 * field for Sperz
		 */

		protected Char1 localSperz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getSperz() {
			return localSperz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sperz
		 */
		public void setSperz(Char1 param) {

			this.localSperz = param;

		}

		/**
		 * field for Etikg
		 */

		protected Char10 localEtikg;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getEtikg() {
			return localEtikg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Etikg
		 */
		public void setEtikg(Char10 param) {

			this.localEtikg = param;

		}

		/**
		 * field for Civve
		 */

		protected Char1 localCivve;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getCivve() {
			return localCivve;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Civve
		 */
		public void setCivve(Char1 param) {

			this.localCivve = param;

		}

		/**
		 * field for Milve
		 */

		protected Char1 localMilve;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getMilve() {
			return localMilve;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Milve
		 */
		public void setMilve(Char1 param) {

			this.localMilve = param;

		}

		/**
		 * field for Kdkg1
		 */

		protected Char2 localKdkg1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getKdkg1() {
			return localKdkg1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kdkg1
		 */
		public void setKdkg1(Char2 param) {

			this.localKdkg1 = param;

		}

		/**
		 * field for Kdkg2
		 */

		protected Char2 localKdkg2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getKdkg2() {
			return localKdkg2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kdkg2
		 */
		public void setKdkg2(Char2 param) {

			this.localKdkg2 = param;

		}

		/**
		 * field for Kdkg3
		 */

		protected Char2 localKdkg3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getKdkg3() {
			return localKdkg3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kdkg3
		 */
		public void setKdkg3(Char2 param) {

			this.localKdkg3 = param;

		}

		/**
		 * field for Kdkg4
		 */

		protected Char2 localKdkg4;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getKdkg4() {
			return localKdkg4;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kdkg4
		 */
		public void setKdkg4(Char2 param) {

			this.localKdkg4 = param;

		}

		/**
		 * field for Kdkg5
		 */

		protected Char2 localKdkg5;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getKdkg5() {
			return localKdkg5;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kdkg5
		 */
		public void setKdkg5(Char2 param) {

			this.localKdkg5 = param;

		}

		/**
		 * field for Xknza
		 */

		protected Char1 localXknza;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getXknza() {
			return localXknza;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Xknza
		 */
		public void setXknza(Char1 param) {

			this.localXknza = param;

		}

		/**
		 * field for Fityp
		 */

		protected Char2 localFityp;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getFityp() {
			return localFityp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Fityp
		 */
		public void setFityp(Char2 param) {

			this.localFityp = param;

		}

		/**
		 * field for Stcdt
		 */

		protected Char2 localStcdt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getStcdt() {
			return localStcdt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Stcdt
		 */
		public void setStcdt(Char2 param) {

			this.localStcdt = param;

		}

		/**
		 * field for Stcd3
		 */

		protected Char18 localStcd3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char18
		 */
		public Char18 getStcd3() {
			return localStcd3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Stcd3
		 */
		public void setStcd3(Char18 param) {

			this.localStcd3 = param;

		}

		/**
		 * field for Stcd4
		 */

		protected Char18 localStcd4;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char18
		 */
		public Char18 getStcd4() {
			return localStcd4;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Stcd4
		 */
		public void setStcd4(Char18 param) {

			this.localStcd4 = param;

		}

		/**
		 * field for Xicms
		 */

		protected Char1 localXicms;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getXicms() {
			return localXicms;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Xicms
		 */
		public void setXicms(Char1 param) {

			this.localXicms = param;

		}

		/**
		 * field for Xxipi
		 */

		protected Char1 localXxipi;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getXxipi() {
			return localXxipi;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Xxipi
		 */
		public void setXxipi(Char1 param) {

			this.localXxipi = param;

		}

		/**
		 * field for Xsubt
		 */

		protected Char3 localXsubt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getXsubt() {
			return localXsubt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Xsubt
		 */
		public void setXsubt(Char3 param) {

			this.localXsubt = param;

		}

		/**
		 * field for Cfopc
		 */

		protected Char2 localCfopc;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getCfopc() {
			return localCfopc;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Cfopc
		 */
		public void setCfopc(Char2 param) {

			this.localCfopc = param;

		}

		/**
		 * field for Txlw1
		 */

		protected Char3 localTxlw1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getTxlw1() {
			return localTxlw1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Txlw1
		 */
		public void setTxlw1(Char3 param) {

			this.localTxlw1 = param;

		}

		/**
		 * field for Txlw2
		 */

		protected Char3 localTxlw2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getTxlw2() {
			return localTxlw2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Txlw2
		 */
		public void setTxlw2(Char3 param) {

			this.localTxlw2 = param;

		}

		/**
		 * field for Ccc01
		 */

		protected Char1 localCcc01;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getCcc01() {
			return localCcc01;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Ccc01
		 */
		public void setCcc01(Char1 param) {

			this.localCcc01 = param;

		}

		/**
		 * field for Ccc02
		 */

		protected Char1 localCcc02;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getCcc02() {
			return localCcc02;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Ccc02
		 */
		public void setCcc02(Char1 param) {

			this.localCcc02 = param;

		}

		/**
		 * field for Ccc03
		 */

		protected Char1 localCcc03;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getCcc03() {
			return localCcc03;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Ccc03
		 */
		public void setCcc03(Char1 param) {

			this.localCcc03 = param;

		}

		/**
		 * field for Ccc04
		 */

		protected Char1 localCcc04;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getCcc04() {
			return localCcc04;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Ccc04
		 */
		public void setCcc04(Char1 param) {

			this.localCcc04 = param;

		}

		/**
		 * field for Cassd
		 */

		protected Char2 localCassd;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getCassd() {
			return localCassd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Cassd
		 */
		public void setCassd(Char2 param) {

			this.localCassd = param;

		}

		/**
		 * field for Knurl
		 */

		protected Char132 localKnurl;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char132
		 */
		public Char132 getKnurl() {
			return localKnurl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Knurl
		 */
		public void setKnurl(Char132 param) {

			this.localKnurl = param;

		}

		/**
		 * field for J1Kfrepre
		 */

		protected Char10 localJ1Kfrepre;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getJ1Kfrepre() {
			return localJ1Kfrepre;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            J1Kfrepre
		 */
		public void setJ1Kfrepre(Char10 param) {

			this.localJ1Kfrepre = param;

		}

		/**
		 * field for J1Kftbus
		 */

		protected Char30 localJ1Kftbus;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char30
		 */
		public Char30 getJ1Kftbus() {
			return localJ1Kftbus;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            J1Kftbus
		 */
		public void setJ1Kftbus(Char30 param) {

			this.localJ1Kftbus = param;

		}

		/**
		 * field for J1Kftind
		 */

		protected Char30 localJ1Kftind;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char30
		 */
		public Char30 getJ1Kftind() {
			return localJ1Kftind;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            J1Kftind
		 */
		public void setJ1Kftind(Char30 param) {

			this.localJ1Kftind = param;

		}

		/**
		 * field for Confs
		 */

		protected Char1 localConfs;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getConfs() {
			return localConfs;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Confs
		 */
		public void setConfs(Char1 param) {

			this.localConfs = param;

		}

		/**
		 * field for Updat
		 */

		protected Date localUpdat;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getUpdat() {
			return localUpdat;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Updat
		 */
		public void setUpdat(Date param) {

			this.localUpdat = param;

		}

		/**
		 * field for Uptim
		 */

		protected Time localUptim;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getUptim() {
			return localUptim;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Uptim
		 */
		public void setUptim(Time param) {

			this.localUptim = param;

		}

		/**
		 * field for Nodel
		 */

		protected Char1 localNodel;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getNodel() {
			return localNodel;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Nodel
		 */
		public void setNodel(Char1 param) {

			this.localNodel = param;

		}

		/**
		 * field for Dear6
		 */

		protected Char1 localDear6;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getDear6() {
			return localDear6;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dear6
		 */
		public void setDear6(Char1 param) {

			this.localDear6 = param;

		}

		/**
		 * field for _Vso_RPalhgt
		 */

		protected Quantum133 local_Vso_RPalhgt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Quantum133
		 */
		public Quantum133 get_Vso_RPalhgt() {
			return local_Vso_RPalhgt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _Vso_RPalhgt
		 */
		public void set_Vso_RPalhgt(Quantum133 param) {

			this.local_Vso_RPalhgt = param;

		}

		/**
		 * field for _Vso_RPalUl
		 */

		protected Unit3 local_Vso_RPalUl;

		/**
		 * Auto generated getter method
		 * 
		 * @return Unit3
		 */
		public Unit3 get_Vso_RPalUl() {
			return local_Vso_RPalUl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _Vso_RPalUl
		 */
		public void set_Vso_RPalUl(Unit3 param) {

			this.local_Vso_RPalUl = param;

		}

		/**
		 * field for _Vso_RPkMat
		 */

		protected Char1 local_Vso_RPkMat;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 get_Vso_RPkMat() {
			return local_Vso_RPkMat;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _Vso_RPkMat
		 */
		public void set_Vso_RPkMat(Char1 param) {

			this.local_Vso_RPkMat = param;

		}

		/**
		 * field for _Vso_RMatpal
		 */

		protected Char18 local_Vso_RMatpal;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char18
		 */
		public Char18 get_Vso_RMatpal() {
			return local_Vso_RMatpal;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _Vso_RMatpal
		 */
		public void set_Vso_RMatpal(Char18 param) {

			this.local_Vso_RMatpal = param;

		}

		/**
		 * field for _Vso_RINoLyr
		 */

		protected Numeric2 local_Vso_RINoLyr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric2
		 */
		public Numeric2 get_Vso_RINoLyr() {
			return local_Vso_RINoLyr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _Vso_RINoLyr
		 */
		public void set_Vso_RINoLyr(Numeric2 param) {

			this.local_Vso_RINoLyr = param;

		}

		/**
		 * field for _Vso_ROneMat
		 */

		protected Char1 local_Vso_ROneMat;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 get_Vso_ROneMat() {
			return local_Vso_ROneMat;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _Vso_ROneMat
		 */
		public void set_Vso_ROneMat(Char1 param) {

			this.local_Vso_ROneMat = param;

		}

		/**
		 * field for _Vso_ROneSort
		 */

		protected Char1 local_Vso_ROneSort;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 get_Vso_ROneSort() {
			return local_Vso_ROneSort;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _Vso_ROneSort
		 */
		public void set_Vso_ROneSort(Char1 param) {

			this.local_Vso_ROneSort = param;

		}

		/**
		 * field for _Vso_RUldSide
		 */

		protected Numeric1 local_Vso_RUldSide;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric1
		 */
		public Numeric1 get_Vso_RUldSide() {
			return local_Vso_RUldSide;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _Vso_RUldSide
		 */
		public void set_Vso_RUldSide(Numeric1 param) {

			this.local_Vso_RUldSide = param;

		}

		/**
		 * field for _Vso_RLoadPref
		 */

		protected Numeric1 local_Vso_RLoadPref;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric1
		 */
		public Numeric1 get_Vso_RLoadPref() {
			return local_Vso_RLoadPref;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _Vso_RLoadPref
		 */
		public void set_Vso_RLoadPref(Numeric1 param) {

			this.local_Vso_RLoadPref = param;

		}

		/**
		 * field for _Vso_RDpoint
		 */

		protected Char10 local_Vso_RDpoint;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 get_Vso_RDpoint() {
			return local_Vso_RDpoint;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            _Vso_RDpoint
		 */
		public void set_Vso_RDpoint(Char10 param) {

			this.local_Vso_RDpoint = param;

		}

		/**
		 * field for Alc
		 */

		protected Char8 localAlc;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char8
		 */
		public Char8 getAlc() {
			return localAlc;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Alc
		 */
		public void setAlc(Char8 param) {

			this.localAlc = param;

		}

		/**
		 * field for PmtOffice
		 */

		protected Char5 localPmtOffice;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char5
		 */
		public Char5 getPmtOffice() {
			return localPmtOffice;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PmtOffice
		 */
		public void setPmtOffice(Char5 param) {

			this.localPmtOffice = param;

		}

		/**
		 * field for FeeSchedule
		 */

		protected Char4 localFeeSchedule;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getFeeSchedule() {
			return localFeeSchedule;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FeeSchedule
		 */
		public void setFeeSchedule(Char4 param) {

			this.localFeeSchedule = param;

		}

		/**
		 * field for Duns
		 */

		protected Char9 localDuns;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char9
		 */
		public Char9 getDuns() {
			return localDuns;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Duns
		 */
		public void setDuns(Char9 param) {

			this.localDuns = param;

		}

		/**
		 * field for Duns4
		 */

		protected Char4 localDuns4;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getDuns4() {
			return localDuns4;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Duns4
		 */
		public void setDuns4(Char4 param) {

			this.localDuns4 = param;

		}

		/**
		 * field for Psofg
		 */

		protected Char10 localPsofg;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getPsofg() {
			return localPsofg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Psofg
		 */
		public void setPsofg(Char10 param) {

			this.localPsofg = param;

		}

		/**
		 * field for Psois
		 */

		protected Char20 localPsois;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char20
		 */
		public Char20 getPsois() {
			return localPsois;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Psois
		 */
		public void setPsois(Char20 param) {

			this.localPsois = param;

		}

		/**
		 * field for Pson1
		 */

		protected Char35 localPson1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char35
		 */
		public Char35 getPson1() {
			return localPson1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pson1
		 */
		public void setPson1(Char35 param) {

			this.localPson1 = param;

		}

		/**
		 * field for Pson2
		 */

		protected Char35 localPson2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char35
		 */
		public Char35 getPson2() {
			return localPson2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pson2
		 */
		public void setPson2(Char35 param) {

			this.localPson2 = param;

		}

		/**
		 * field for Pson3
		 */

		protected Char35 localPson3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char35
		 */
		public Char35 getPson3() {
			return localPson3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pson3
		 */
		public void setPson3(Char35 param) {

			this.localPson3 = param;

		}

		/**
		 * field for Psovn
		 */

		protected Char35 localPsovn;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char35
		 */
		public Char35 getPsovn() {
			return localPsovn;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Psovn
		 */
		public void setPsovn(Char35 param) {

			this.localPsovn = param;

		}

		/**
		 * field for Psotl
		 */

		protected Char20 localPsotl;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char20
		 */
		public Char20 getPsotl() {
			return localPsotl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Psotl
		 */
		public void setPsotl(Char20 param) {

			this.localPsotl = param;

		}

		/**
		 * field for Psohs
		 */

		protected Char6 localPsohs;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char6
		 */
		public Char6 getPsohs() {
			return localPsohs;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Psohs
		 */
		public void setPsohs(Char6 param) {

			this.localPsohs = param;

		}

		/**
		 * field for Psost
		 */

		protected Char28 localPsost;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char28
		 */
		public Char28 getPsost() {
			return localPsost;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Psost
		 */
		public void setPsost(Char28 param) {

			this.localPsost = param;

		}

		/**
		 * field for Psoo1
		 */

		protected Char50 localPsoo1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char50
		 */
		public Char50 getPsoo1() {
			return localPsoo1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Psoo1
		 */
		public void setPsoo1(Char50 param) {

			this.localPsoo1 = param;

		}

		/**
		 * field for Psoo2
		 */

		protected Char50 localPsoo2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char50
		 */
		public Char50 getPsoo2() {
			return localPsoo2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Psoo2
		 */
		public void setPsoo2(Char50 param) {

			this.localPsoo2 = param;

		}

		/**
		 * field for Psoo3
		 */

		protected Char50 localPsoo3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char50
		 */
		public Char50 getPsoo3() {
			return localPsoo3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Psoo3
		 */
		public void setPsoo3(Char50 param) {

			this.localPsoo3 = param;

		}

		/**
		 * field for Psoo4
		 */

		protected Char50 localPsoo4;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char50
		 */
		public Char50 getPsoo4() {
			return localPsoo4;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Psoo4
		 */
		public void setPsoo4(Char50 param) {

			this.localPsoo4 = param;

		}

		/**
		 * field for Psoo5
		 */

		protected Char50 localPsoo5;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char50
		 */
		public Char50 getPsoo5() {
			return localPsoo5;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Psoo5
		 */
		public void setPsoo5(Char50 param) {

			this.localPsoo5 = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Kna1", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Kna1", xmlWriter);
				}

			}

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			localMandt.serialize(new javax.xml.namespace.QName("", "Mandt"),
					xmlWriter);

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			localKunnr.serialize(new javax.xml.namespace.QName("", "Kunnr"),
					xmlWriter);

			if (localLand1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Land1 cannot be null!!");
			}
			localLand1.serialize(new javax.xml.namespace.QName("", "Land1"),
					xmlWriter);

			if (localName1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name1 cannot be null!!");
			}
			localName1.serialize(new javax.xml.namespace.QName("", "Name1"),
					xmlWriter);

			if (localName2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name2 cannot be null!!");
			}
			localName2.serialize(new javax.xml.namespace.QName("", "Name2"),
					xmlWriter);

			if (localOrt01 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ort01 cannot be null!!");
			}
			localOrt01.serialize(new javax.xml.namespace.QName("", "Ort01"),
					xmlWriter);

			if (localPstlz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pstlz cannot be null!!");
			}
			localPstlz.serialize(new javax.xml.namespace.QName("", "Pstlz"),
					xmlWriter);

			if (localRegio == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Regio cannot be null!!");
			}
			localRegio.serialize(new javax.xml.namespace.QName("", "Regio"),
					xmlWriter);

			if (localSortl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sortl cannot be null!!");
			}
			localSortl.serialize(new javax.xml.namespace.QName("", "Sortl"),
					xmlWriter);

			if (localStras == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stras cannot be null!!");
			}
			localStras.serialize(new javax.xml.namespace.QName("", "Stras"),
					xmlWriter);

			if (localTelf1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Telf1 cannot be null!!");
			}
			localTelf1.serialize(new javax.xml.namespace.QName("", "Telf1"),
					xmlWriter);

			if (localTelfx == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Telfx cannot be null!!");
			}
			localTelfx.serialize(new javax.xml.namespace.QName("", "Telfx"),
					xmlWriter);

			if (localXcpdk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xcpdk cannot be null!!");
			}
			localXcpdk.serialize(new javax.xml.namespace.QName("", "Xcpdk"),
					xmlWriter);

			if (localAdrnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Adrnr cannot be null!!");
			}
			localAdrnr.serialize(new javax.xml.namespace.QName("", "Adrnr"),
					xmlWriter);

			if (localMcod1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mcod1 cannot be null!!");
			}
			localMcod1.serialize(new javax.xml.namespace.QName("", "Mcod1"),
					xmlWriter);

			if (localMcod2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mcod2 cannot be null!!");
			}
			localMcod2.serialize(new javax.xml.namespace.QName("", "Mcod2"),
					xmlWriter);

			if (localMcod3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mcod3 cannot be null!!");
			}
			localMcod3.serialize(new javax.xml.namespace.QName("", "Mcod3"),
					xmlWriter);

			if (localAnred == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Anred cannot be null!!");
			}
			localAnred.serialize(new javax.xml.namespace.QName("", "Anred"),
					xmlWriter);

			if (localAufsd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Aufsd cannot be null!!");
			}
			localAufsd.serialize(new javax.xml.namespace.QName("", "Aufsd"),
					xmlWriter);

			if (localBahne == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bahne cannot be null!!");
			}
			localBahne.serialize(new javax.xml.namespace.QName("", "Bahne"),
					xmlWriter);

			if (localBahns == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bahns cannot be null!!");
			}
			localBahns.serialize(new javax.xml.namespace.QName("", "Bahns"),
					xmlWriter);

			if (localBbbnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bbbnr cannot be null!!");
			}
			localBbbnr.serialize(new javax.xml.namespace.QName("", "Bbbnr"),
					xmlWriter);

			if (localBbsnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bbsnr cannot be null!!");
			}
			localBbsnr.serialize(new javax.xml.namespace.QName("", "Bbsnr"),
					xmlWriter);

			if (localBegru == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Begru cannot be null!!");
			}
			localBegru.serialize(new javax.xml.namespace.QName("", "Begru"),
					xmlWriter);

			if (localBrsch == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Brsch cannot be null!!");
			}
			localBrsch.serialize(new javax.xml.namespace.QName("", "Brsch"),
					xmlWriter);

			if (localBubkz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bubkz cannot be null!!");
			}
			localBubkz.serialize(new javax.xml.namespace.QName("", "Bubkz"),
					xmlWriter);

			if (localDatlt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Datlt cannot be null!!");
			}
			localDatlt.serialize(new javax.xml.namespace.QName("", "Datlt"),
					xmlWriter);

			if (localErdat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Erdat cannot be null!!");
			}
			localErdat.serialize(new javax.xml.namespace.QName("", "Erdat"),
					xmlWriter);

			if (localErnam == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ernam cannot be null!!");
			}
			localErnam.serialize(new javax.xml.namespace.QName("", "Ernam"),
					xmlWriter);

			if (localExabl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Exabl cannot be null!!");
			}
			localExabl.serialize(new javax.xml.namespace.QName("", "Exabl"),
					xmlWriter);

			if (localFaksd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Faksd cannot be null!!");
			}
			localFaksd.serialize(new javax.xml.namespace.QName("", "Faksd"),
					xmlWriter);

			if (localFiskn == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Fiskn cannot be null!!");
			}
			localFiskn.serialize(new javax.xml.namespace.QName("", "Fiskn"),
					xmlWriter);

			if (localKnazk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Knazk cannot be null!!");
			}
			localKnazk.serialize(new javax.xml.namespace.QName("", "Knazk"),
					xmlWriter);

			if (localKnrza == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Knrza cannot be null!!");
			}
			localKnrza.serialize(new javax.xml.namespace.QName("", "Knrza"),
					xmlWriter);

			if (localKonzs == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Konzs cannot be null!!");
			}
			localKonzs.serialize(new javax.xml.namespace.QName("", "Konzs"),
					xmlWriter);

			if (localKtokd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ktokd cannot be null!!");
			}
			localKtokd.serialize(new javax.xml.namespace.QName("", "Ktokd"),
					xmlWriter);

			if (localKukla == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kukla cannot be null!!");
			}
			localKukla.serialize(new javax.xml.namespace.QName("", "Kukla"),
					xmlWriter);

			if (localLifnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lifnr cannot be null!!");
			}
			localLifnr.serialize(new javax.xml.namespace.QName("", "Lifnr"),
					xmlWriter);

			if (localLifsd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lifsd cannot be null!!");
			}
			localLifsd.serialize(new javax.xml.namespace.QName("", "Lifsd"),
					xmlWriter);

			if (localLocco == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Locco cannot be null!!");
			}
			localLocco.serialize(new javax.xml.namespace.QName("", "Locco"),
					xmlWriter);

			if (localLoevm == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Loevm cannot be null!!");
			}
			localLoevm.serialize(new javax.xml.namespace.QName("", "Loevm"),
					xmlWriter);

			if (localName3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name3 cannot be null!!");
			}
			localName3.serialize(new javax.xml.namespace.QName("", "Name3"),
					xmlWriter);

			if (localName4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name4 cannot be null!!");
			}
			localName4.serialize(new javax.xml.namespace.QName("", "Name4"),
					xmlWriter);

			if (localNiels == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Niels cannot be null!!");
			}
			localNiels.serialize(new javax.xml.namespace.QName("", "Niels"),
					xmlWriter);

			if (localOrt02 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ort02 cannot be null!!");
			}
			localOrt02.serialize(new javax.xml.namespace.QName("", "Ort02"),
					xmlWriter);

			if (localPfach == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pfach cannot be null!!");
			}
			localPfach.serialize(new javax.xml.namespace.QName("", "Pfach"),
					xmlWriter);

			if (localPstl2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pstl2 cannot be null!!");
			}
			localPstl2.serialize(new javax.xml.namespace.QName("", "Pstl2"),
					xmlWriter);

			if (localCounc == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Counc cannot be null!!");
			}
			localCounc.serialize(new javax.xml.namespace.QName("", "Counc"),
					xmlWriter);

			if (localCityc == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Cityc cannot be null!!");
			}
			localCityc.serialize(new javax.xml.namespace.QName("", "Cityc"),
					xmlWriter);

			if (localRpmkr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Rpmkr cannot be null!!");
			}
			localRpmkr.serialize(new javax.xml.namespace.QName("", "Rpmkr"),
					xmlWriter);

			if (localSperr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sperr cannot be null!!");
			}
			localSperr.serialize(new javax.xml.namespace.QName("", "Sperr"),
					xmlWriter);

			if (localSpras == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Spras cannot be null!!");
			}
			localSpras.serialize(new javax.xml.namespace.QName("", "Spras"),
					xmlWriter);

			if (localStcd1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stcd1 cannot be null!!");
			}
			localStcd1.serialize(new javax.xml.namespace.QName("", "Stcd1"),
					xmlWriter);

			if (localStcd2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stcd2 cannot be null!!");
			}
			localStcd2.serialize(new javax.xml.namespace.QName("", "Stcd2"),
					xmlWriter);

			if (localStkza == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stkza cannot be null!!");
			}
			localStkza.serialize(new javax.xml.namespace.QName("", "Stkza"),
					xmlWriter);

			if (localStkzu == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stkzu cannot be null!!");
			}
			localStkzu.serialize(new javax.xml.namespace.QName("", "Stkzu"),
					xmlWriter);

			if (localTelbx == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Telbx cannot be null!!");
			}
			localTelbx.serialize(new javax.xml.namespace.QName("", "Telbx"),
					xmlWriter);

			if (localTelf2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Telf2 cannot be null!!");
			}
			localTelf2.serialize(new javax.xml.namespace.QName("", "Telf2"),
					xmlWriter);

			if (localTeltx == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Teltx cannot be null!!");
			}
			localTeltx.serialize(new javax.xml.namespace.QName("", "Teltx"),
					xmlWriter);

			if (localTelx1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Telx1 cannot be null!!");
			}
			localTelx1.serialize(new javax.xml.namespace.QName("", "Telx1"),
					xmlWriter);

			if (localLzone == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lzone cannot be null!!");
			}
			localLzone.serialize(new javax.xml.namespace.QName("", "Lzone"),
					xmlWriter);

			if (localXzemp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xzemp cannot be null!!");
			}
			localXzemp.serialize(new javax.xml.namespace.QName("", "Xzemp"),
					xmlWriter);

			if (localVbund == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vbund cannot be null!!");
			}
			localVbund.serialize(new javax.xml.namespace.QName("", "Vbund"),
					xmlWriter);

			if (localStceg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stceg cannot be null!!");
			}
			localStceg.serialize(new javax.xml.namespace.QName("", "Stceg"),
					xmlWriter);

			if (localDear1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dear1 cannot be null!!");
			}
			localDear1.serialize(new javax.xml.namespace.QName("", "Dear1"),
					xmlWriter);

			if (localDear2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dear2 cannot be null!!");
			}
			localDear2.serialize(new javax.xml.namespace.QName("", "Dear2"),
					xmlWriter);

			if (localDear3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dear3 cannot be null!!");
			}
			localDear3.serialize(new javax.xml.namespace.QName("", "Dear3"),
					xmlWriter);

			if (localDear4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dear4 cannot be null!!");
			}
			localDear4.serialize(new javax.xml.namespace.QName("", "Dear4"),
					xmlWriter);

			if (localDear5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dear5 cannot be null!!");
			}
			localDear5.serialize(new javax.xml.namespace.QName("", "Dear5"),
					xmlWriter);

			if (localGform == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Gform cannot be null!!");
			}
			localGform.serialize(new javax.xml.namespace.QName("", "Gform"),
					xmlWriter);

			if (localBran1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bran1 cannot be null!!");
			}
			localBran1.serialize(new javax.xml.namespace.QName("", "Bran1"),
					xmlWriter);

			if (localBran2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bran2 cannot be null!!");
			}
			localBran2.serialize(new javax.xml.namespace.QName("", "Bran2"),
					xmlWriter);

			if (localBran3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bran3 cannot be null!!");
			}
			localBran3.serialize(new javax.xml.namespace.QName("", "Bran3"),
					xmlWriter);

			if (localBran4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bran4 cannot be null!!");
			}
			localBran4.serialize(new javax.xml.namespace.QName("", "Bran4"),
					xmlWriter);

			if (localBran5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bran5 cannot be null!!");
			}
			localBran5.serialize(new javax.xml.namespace.QName("", "Bran5"),
					xmlWriter);

			if (localEkont == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ekont cannot be null!!");
			}
			localEkont.serialize(new javax.xml.namespace.QName("", "Ekont"),
					xmlWriter);

			if (localUmsat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Umsat cannot be null!!");
			}
			localUmsat.serialize(new javax.xml.namespace.QName("", "Umsat"),
					xmlWriter);

			if (localUmjah == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Umjah cannot be null!!");
			}
			localUmjah.serialize(new javax.xml.namespace.QName("", "Umjah"),
					xmlWriter);

			if (localUwaer == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Uwaer cannot be null!!");
			}
			localUwaer.serialize(new javax.xml.namespace.QName("", "Uwaer"),
					xmlWriter);

			if (localJmzah == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Jmzah cannot be null!!");
			}
			localJmzah.serialize(new javax.xml.namespace.QName("", "Jmzah"),
					xmlWriter);

			if (localJmjah == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Jmjah cannot be null!!");
			}
			localJmjah.serialize(new javax.xml.namespace.QName("", "Jmjah"),
					xmlWriter);

			if (localKatr1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr1 cannot be null!!");
			}
			localKatr1.serialize(new javax.xml.namespace.QName("", "Katr1"),
					xmlWriter);

			if (localKatr2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr2 cannot be null!!");
			}
			localKatr2.serialize(new javax.xml.namespace.QName("", "Katr2"),
					xmlWriter);

			if (localKatr3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr3 cannot be null!!");
			}
			localKatr3.serialize(new javax.xml.namespace.QName("", "Katr3"),
					xmlWriter);

			if (localKatr4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr4 cannot be null!!");
			}
			localKatr4.serialize(new javax.xml.namespace.QName("", "Katr4"),
					xmlWriter);

			if (localKatr5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr5 cannot be null!!");
			}
			localKatr5.serialize(new javax.xml.namespace.QName("", "Katr5"),
					xmlWriter);

			if (localKatr6 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr6 cannot be null!!");
			}
			localKatr6.serialize(new javax.xml.namespace.QName("", "Katr6"),
					xmlWriter);

			if (localKatr7 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr7 cannot be null!!");
			}
			localKatr7.serialize(new javax.xml.namespace.QName("", "Katr7"),
					xmlWriter);

			if (localKatr8 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr8 cannot be null!!");
			}
			localKatr8.serialize(new javax.xml.namespace.QName("", "Katr8"),
					xmlWriter);

			if (localKatr9 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr9 cannot be null!!");
			}
			localKatr9.serialize(new javax.xml.namespace.QName("", "Katr9"),
					xmlWriter);

			if (localKatr10 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr10 cannot be null!!");
			}
			localKatr10.serialize(new javax.xml.namespace.QName("", "Katr10"),
					xmlWriter);

			if (localStkzn == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stkzn cannot be null!!");
			}
			localStkzn.serialize(new javax.xml.namespace.QName("", "Stkzn"),
					xmlWriter);

			if (localUmsa1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Umsa1 cannot be null!!");
			}
			localUmsa1.serialize(new javax.xml.namespace.QName("", "Umsa1"),
					xmlWriter);

			if (localTxjcd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Txjcd cannot be null!!");
			}
			localTxjcd.serialize(new javax.xml.namespace.QName("", "Txjcd"),
					xmlWriter);

			if (localPeriv == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Periv cannot be null!!");
			}
			localPeriv.serialize(new javax.xml.namespace.QName("", "Periv"),
					xmlWriter);

			if (localAbrvw == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Abrvw cannot be null!!");
			}
			localAbrvw.serialize(new javax.xml.namespace.QName("", "Abrvw"),
					xmlWriter);

			if (localInspbydebi == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Inspbydebi cannot be null!!");
			}
			localInspbydebi.serialize(new javax.xml.namespace.QName("",
					"Inspbydebi"), xmlWriter);

			if (localInspatdebi == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Inspatdebi cannot be null!!");
			}
			localInspatdebi.serialize(new javax.xml.namespace.QName("",
					"Inspatdebi"), xmlWriter);

			if (localKtocd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ktocd cannot be null!!");
			}
			localKtocd.serialize(new javax.xml.namespace.QName("", "Ktocd"),
					xmlWriter);

			if (localPfort == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pfort cannot be null!!");
			}
			localPfort.serialize(new javax.xml.namespace.QName("", "Pfort"),
					xmlWriter);

			if (localWerks == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Werks cannot be null!!");
			}
			localWerks.serialize(new javax.xml.namespace.QName("", "Werks"),
					xmlWriter);

			if (localDtams == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dtams cannot be null!!");
			}
			localDtams.serialize(new javax.xml.namespace.QName("", "Dtams"),
					xmlWriter);

			if (localDtaws == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dtaws cannot be null!!");
			}
			localDtaws.serialize(new javax.xml.namespace.QName("", "Dtaws"),
					xmlWriter);

			if (localDuefl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Duefl cannot be null!!");
			}
			localDuefl.serialize(new javax.xml.namespace.QName("", "Duefl"),
					xmlWriter);

			if (localHzuor == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Hzuor cannot be null!!");
			}
			localHzuor.serialize(new javax.xml.namespace.QName("", "Hzuor"),
					xmlWriter);

			if (localSperz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sperz cannot be null!!");
			}
			localSperz.serialize(new javax.xml.namespace.QName("", "Sperz"),
					xmlWriter);

			if (localEtikg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Etikg cannot be null!!");
			}
			localEtikg.serialize(new javax.xml.namespace.QName("", "Etikg"),
					xmlWriter);

			if (localCivve == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Civve cannot be null!!");
			}
			localCivve.serialize(new javax.xml.namespace.QName("", "Civve"),
					xmlWriter);

			if (localMilve == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Milve cannot be null!!");
			}
			localMilve.serialize(new javax.xml.namespace.QName("", "Milve"),
					xmlWriter);

			if (localKdkg1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kdkg1 cannot be null!!");
			}
			localKdkg1.serialize(new javax.xml.namespace.QName("", "Kdkg1"),
					xmlWriter);

			if (localKdkg2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kdkg2 cannot be null!!");
			}
			localKdkg2.serialize(new javax.xml.namespace.QName("", "Kdkg2"),
					xmlWriter);

			if (localKdkg3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kdkg3 cannot be null!!");
			}
			localKdkg3.serialize(new javax.xml.namespace.QName("", "Kdkg3"),
					xmlWriter);

			if (localKdkg4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kdkg4 cannot be null!!");
			}
			localKdkg4.serialize(new javax.xml.namespace.QName("", "Kdkg4"),
					xmlWriter);

			if (localKdkg5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kdkg5 cannot be null!!");
			}
			localKdkg5.serialize(new javax.xml.namespace.QName("", "Kdkg5"),
					xmlWriter);

			if (localXknza == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xknza cannot be null!!");
			}
			localXknza.serialize(new javax.xml.namespace.QName("", "Xknza"),
					xmlWriter);

			if (localFityp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Fityp cannot be null!!");
			}
			localFityp.serialize(new javax.xml.namespace.QName("", "Fityp"),
					xmlWriter);

			if (localStcdt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stcdt cannot be null!!");
			}
			localStcdt.serialize(new javax.xml.namespace.QName("", "Stcdt"),
					xmlWriter);

			if (localStcd3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stcd3 cannot be null!!");
			}
			localStcd3.serialize(new javax.xml.namespace.QName("", "Stcd3"),
					xmlWriter);

			if (localStcd4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stcd4 cannot be null!!");
			}
			localStcd4.serialize(new javax.xml.namespace.QName("", "Stcd4"),
					xmlWriter);

			if (localXicms == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xicms cannot be null!!");
			}
			localXicms.serialize(new javax.xml.namespace.QName("", "Xicms"),
					xmlWriter);

			if (localXxipi == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xxipi cannot be null!!");
			}
			localXxipi.serialize(new javax.xml.namespace.QName("", "Xxipi"),
					xmlWriter);

			if (localXsubt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xsubt cannot be null!!");
			}
			localXsubt.serialize(new javax.xml.namespace.QName("", "Xsubt"),
					xmlWriter);

			if (localCfopc == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Cfopc cannot be null!!");
			}
			localCfopc.serialize(new javax.xml.namespace.QName("", "Cfopc"),
					xmlWriter);

			if (localTxlw1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Txlw1 cannot be null!!");
			}
			localTxlw1.serialize(new javax.xml.namespace.QName("", "Txlw1"),
					xmlWriter);

			if (localTxlw2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Txlw2 cannot be null!!");
			}
			localTxlw2.serialize(new javax.xml.namespace.QName("", "Txlw2"),
					xmlWriter);

			if (localCcc01 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ccc01 cannot be null!!");
			}
			localCcc01.serialize(new javax.xml.namespace.QName("", "Ccc01"),
					xmlWriter);

			if (localCcc02 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ccc02 cannot be null!!");
			}
			localCcc02.serialize(new javax.xml.namespace.QName("", "Ccc02"),
					xmlWriter);

			if (localCcc03 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ccc03 cannot be null!!");
			}
			localCcc03.serialize(new javax.xml.namespace.QName("", "Ccc03"),
					xmlWriter);

			if (localCcc04 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ccc04 cannot be null!!");
			}
			localCcc04.serialize(new javax.xml.namespace.QName("", "Ccc04"),
					xmlWriter);

			if (localCassd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Cassd cannot be null!!");
			}
			localCassd.serialize(new javax.xml.namespace.QName("", "Cassd"),
					xmlWriter);

			if (localKnurl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Knurl cannot be null!!");
			}
			localKnurl.serialize(new javax.xml.namespace.QName("", "Knurl"),
					xmlWriter);

			if (localJ1Kfrepre == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"J1kfrepre cannot be null!!");
			}
			localJ1Kfrepre.serialize(new javax.xml.namespace.QName("",
					"J1kfrepre"), xmlWriter);

			if (localJ1Kftbus == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"J1kftbus cannot be null!!");
			}
			localJ1Kftbus.serialize(new javax.xml.namespace.QName("",
					"J1kftbus"), xmlWriter);

			if (localJ1Kftind == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"J1kftind cannot be null!!");
			}
			localJ1Kftind.serialize(new javax.xml.namespace.QName("",
					"J1kftind"), xmlWriter);

			if (localConfs == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Confs cannot be null!!");
			}
			localConfs.serialize(new javax.xml.namespace.QName("", "Confs"),
					xmlWriter);

			if (localUpdat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Updat cannot be null!!");
			}
			localUpdat.serialize(new javax.xml.namespace.QName("", "Updat"),
					xmlWriter);

			if (localUptim == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Uptim cannot be null!!");
			}
			localUptim.serialize(new javax.xml.namespace.QName("", "Uptim"),
					xmlWriter);

			if (localNodel == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Nodel cannot be null!!");
			}
			localNodel.serialize(new javax.xml.namespace.QName("", "Nodel"),
					xmlWriter);

			if (localDear6 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dear6 cannot be null!!");
			}
			localDear6.serialize(new javax.xml.namespace.QName("", "Dear6"),
					xmlWriter);

			if (local_Vso_RPalhgt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rPalhgt cannot be null!!");
			}
			local_Vso_RPalhgt.serialize(new javax.xml.namespace.QName("",
					"_-vso_-rPalhgt"), xmlWriter);

			if (local_Vso_RPalUl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rPalUl cannot be null!!");
			}
			local_Vso_RPalUl.serialize(new javax.xml.namespace.QName("",
					"_-vso_-rPalUl"), xmlWriter);

			if (local_Vso_RPkMat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rPkMat cannot be null!!");
			}
			local_Vso_RPkMat.serialize(new javax.xml.namespace.QName("",
					"_-vso_-rPkMat"), xmlWriter);

			if (local_Vso_RMatpal == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rMatpal cannot be null!!");
			}
			local_Vso_RMatpal.serialize(new javax.xml.namespace.QName("",
					"_-vso_-rMatpal"), xmlWriter);

			if (local_Vso_RINoLyr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rINoLyr cannot be null!!");
			}
			local_Vso_RINoLyr.serialize(new javax.xml.namespace.QName("",
					"_-vso_-rINoLyr"), xmlWriter);

			if (local_Vso_ROneMat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rOneMat cannot be null!!");
			}
			local_Vso_ROneMat.serialize(new javax.xml.namespace.QName("",
					"_-vso_-rOneMat"), xmlWriter);

			if (local_Vso_ROneSort == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rOneSort cannot be null!!");
			}
			local_Vso_ROneSort.serialize(new javax.xml.namespace.QName("",
					"_-vso_-rOneSort"), xmlWriter);

			if (local_Vso_RUldSide == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rUldSide cannot be null!!");
			}
			local_Vso_RUldSide.serialize(new javax.xml.namespace.QName("",
					"_-vso_-rUldSide"), xmlWriter);

			if (local_Vso_RLoadPref == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rLoadPref cannot be null!!");
			}
			local_Vso_RLoadPref.serialize(new javax.xml.namespace.QName("",
					"_-vso_-rLoadPref"), xmlWriter);

			if (local_Vso_RDpoint == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rDpoint cannot be null!!");
			}
			local_Vso_RDpoint.serialize(new javax.xml.namespace.QName("",
					"_-vso_-rDpoint"), xmlWriter);

			if (localAlc == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Alc cannot be null!!");
			}
			localAlc.serialize(new javax.xml.namespace.QName("", "Alc"),
					xmlWriter);

			if (localPmtOffice == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PmtOffice cannot be null!!");
			}
			localPmtOffice.serialize(new javax.xml.namespace.QName("",
					"PmtOffice"), xmlWriter);

			if (localFeeSchedule == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"FeeSchedule cannot be null!!");
			}
			localFeeSchedule.serialize(new javax.xml.namespace.QName("",
					"FeeSchedule"), xmlWriter);

			if (localDuns == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Duns cannot be null!!");
			}
			localDuns.serialize(new javax.xml.namespace.QName("", "Duns"),
					xmlWriter);

			if (localDuns4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Duns4 cannot be null!!");
			}
			localDuns4.serialize(new javax.xml.namespace.QName("", "Duns4"),
					xmlWriter);

			if (localPsofg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psofg cannot be null!!");
			}
			localPsofg.serialize(new javax.xml.namespace.QName("", "Psofg"),
					xmlWriter);

			if (localPsois == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psois cannot be null!!");
			}
			localPsois.serialize(new javax.xml.namespace.QName("", "Psois"),
					xmlWriter);

			if (localPson1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pson1 cannot be null!!");
			}
			localPson1.serialize(new javax.xml.namespace.QName("", "Pson1"),
					xmlWriter);

			if (localPson2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pson2 cannot be null!!");
			}
			localPson2.serialize(new javax.xml.namespace.QName("", "Pson2"),
					xmlWriter);

			if (localPson3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pson3 cannot be null!!");
			}
			localPson3.serialize(new javax.xml.namespace.QName("", "Pson3"),
					xmlWriter);

			if (localPsovn == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psovn cannot be null!!");
			}
			localPsovn.serialize(new javax.xml.namespace.QName("", "Psovn"),
					xmlWriter);

			if (localPsotl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psotl cannot be null!!");
			}
			localPsotl.serialize(new javax.xml.namespace.QName("", "Psotl"),
					xmlWriter);

			if (localPsohs == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psohs cannot be null!!");
			}
			localPsohs.serialize(new javax.xml.namespace.QName("", "Psohs"),
					xmlWriter);

			if (localPsost == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psost cannot be null!!");
			}
			localPsost.serialize(new javax.xml.namespace.QName("", "Psost"),
					xmlWriter);

			if (localPsoo1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psoo1 cannot be null!!");
			}
			localPsoo1.serialize(new javax.xml.namespace.QName("", "Psoo1"),
					xmlWriter);

			if (localPsoo2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psoo2 cannot be null!!");
			}
			localPsoo2.serialize(new javax.xml.namespace.QName("", "Psoo2"),
					xmlWriter);

			if (localPsoo3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psoo3 cannot be null!!");
			}
			localPsoo3.serialize(new javax.xml.namespace.QName("", "Psoo3"),
					xmlWriter);

			if (localPsoo4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psoo4 cannot be null!!");
			}
			localPsoo4.serialize(new javax.xml.namespace.QName("", "Psoo4"),
					xmlWriter);

			if (localPsoo5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psoo5 cannot be null!!");
			}
			localPsoo5.serialize(new javax.xml.namespace.QName("", "Psoo5"),
					xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "Mandt"));

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			elementList.add(localMandt);

			elementList.add(new javax.xml.namespace.QName("", "Kunnr"));

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			elementList.add(localKunnr);

			elementList.add(new javax.xml.namespace.QName("", "Land1"));

			if (localLand1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Land1 cannot be null!!");
			}
			elementList.add(localLand1);

			elementList.add(new javax.xml.namespace.QName("", "Name1"));

			if (localName1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name1 cannot be null!!");
			}
			elementList.add(localName1);

			elementList.add(new javax.xml.namespace.QName("", "Name2"));

			if (localName2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name2 cannot be null!!");
			}
			elementList.add(localName2);

			elementList.add(new javax.xml.namespace.QName("", "Ort01"));

			if (localOrt01 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ort01 cannot be null!!");
			}
			elementList.add(localOrt01);

			elementList.add(new javax.xml.namespace.QName("", "Pstlz"));

			if (localPstlz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pstlz cannot be null!!");
			}
			elementList.add(localPstlz);

			elementList.add(new javax.xml.namespace.QName("", "Regio"));

			if (localRegio == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Regio cannot be null!!");
			}
			elementList.add(localRegio);

			elementList.add(new javax.xml.namespace.QName("", "Sortl"));

			if (localSortl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sortl cannot be null!!");
			}
			elementList.add(localSortl);

			elementList.add(new javax.xml.namespace.QName("", "Stras"));

			if (localStras == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stras cannot be null!!");
			}
			elementList.add(localStras);

			elementList.add(new javax.xml.namespace.QName("", "Telf1"));

			if (localTelf1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Telf1 cannot be null!!");
			}
			elementList.add(localTelf1);

			elementList.add(new javax.xml.namespace.QName("", "Telfx"));

			if (localTelfx == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Telfx cannot be null!!");
			}
			elementList.add(localTelfx);

			elementList.add(new javax.xml.namespace.QName("", "Xcpdk"));

			if (localXcpdk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xcpdk cannot be null!!");
			}
			elementList.add(localXcpdk);

			elementList.add(new javax.xml.namespace.QName("", "Adrnr"));

			if (localAdrnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Adrnr cannot be null!!");
			}
			elementList.add(localAdrnr);

			elementList.add(new javax.xml.namespace.QName("", "Mcod1"));

			if (localMcod1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mcod1 cannot be null!!");
			}
			elementList.add(localMcod1);

			elementList.add(new javax.xml.namespace.QName("", "Mcod2"));

			if (localMcod2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mcod2 cannot be null!!");
			}
			elementList.add(localMcod2);

			elementList.add(new javax.xml.namespace.QName("", "Mcod3"));

			if (localMcod3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mcod3 cannot be null!!");
			}
			elementList.add(localMcod3);

			elementList.add(new javax.xml.namespace.QName("", "Anred"));

			if (localAnred == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Anred cannot be null!!");
			}
			elementList.add(localAnred);

			elementList.add(new javax.xml.namespace.QName("", "Aufsd"));

			if (localAufsd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Aufsd cannot be null!!");
			}
			elementList.add(localAufsd);

			elementList.add(new javax.xml.namespace.QName("", "Bahne"));

			if (localBahne == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bahne cannot be null!!");
			}
			elementList.add(localBahne);

			elementList.add(new javax.xml.namespace.QName("", "Bahns"));

			if (localBahns == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bahns cannot be null!!");
			}
			elementList.add(localBahns);

			elementList.add(new javax.xml.namespace.QName("", "Bbbnr"));

			if (localBbbnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bbbnr cannot be null!!");
			}
			elementList.add(localBbbnr);

			elementList.add(new javax.xml.namespace.QName("", "Bbsnr"));

			if (localBbsnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bbsnr cannot be null!!");
			}
			elementList.add(localBbsnr);

			elementList.add(new javax.xml.namespace.QName("", "Begru"));

			if (localBegru == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Begru cannot be null!!");
			}
			elementList.add(localBegru);

			elementList.add(new javax.xml.namespace.QName("", "Brsch"));

			if (localBrsch == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Brsch cannot be null!!");
			}
			elementList.add(localBrsch);

			elementList.add(new javax.xml.namespace.QName("", "Bubkz"));

			if (localBubkz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bubkz cannot be null!!");
			}
			elementList.add(localBubkz);

			elementList.add(new javax.xml.namespace.QName("", "Datlt"));

			if (localDatlt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Datlt cannot be null!!");
			}
			elementList.add(localDatlt);

			elementList.add(new javax.xml.namespace.QName("", "Erdat"));

			if (localErdat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Erdat cannot be null!!");
			}
			elementList.add(localErdat);

			elementList.add(new javax.xml.namespace.QName("", "Ernam"));

			if (localErnam == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ernam cannot be null!!");
			}
			elementList.add(localErnam);

			elementList.add(new javax.xml.namespace.QName("", "Exabl"));

			if (localExabl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Exabl cannot be null!!");
			}
			elementList.add(localExabl);

			elementList.add(new javax.xml.namespace.QName("", "Faksd"));

			if (localFaksd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Faksd cannot be null!!");
			}
			elementList.add(localFaksd);

			elementList.add(new javax.xml.namespace.QName("", "Fiskn"));

			if (localFiskn == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Fiskn cannot be null!!");
			}
			elementList.add(localFiskn);

			elementList.add(new javax.xml.namespace.QName("", "Knazk"));

			if (localKnazk == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Knazk cannot be null!!");
			}
			elementList.add(localKnazk);

			elementList.add(new javax.xml.namespace.QName("", "Knrza"));

			if (localKnrza == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Knrza cannot be null!!");
			}
			elementList.add(localKnrza);

			elementList.add(new javax.xml.namespace.QName("", "Konzs"));

			if (localKonzs == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Konzs cannot be null!!");
			}
			elementList.add(localKonzs);

			elementList.add(new javax.xml.namespace.QName("", "Ktokd"));

			if (localKtokd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ktokd cannot be null!!");
			}
			elementList.add(localKtokd);

			elementList.add(new javax.xml.namespace.QName("", "Kukla"));

			if (localKukla == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kukla cannot be null!!");
			}
			elementList.add(localKukla);

			elementList.add(new javax.xml.namespace.QName("", "Lifnr"));

			if (localLifnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lifnr cannot be null!!");
			}
			elementList.add(localLifnr);

			elementList.add(new javax.xml.namespace.QName("", "Lifsd"));

			if (localLifsd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lifsd cannot be null!!");
			}
			elementList.add(localLifsd);

			elementList.add(new javax.xml.namespace.QName("", "Locco"));

			if (localLocco == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Locco cannot be null!!");
			}
			elementList.add(localLocco);

			elementList.add(new javax.xml.namespace.QName("", "Loevm"));

			if (localLoevm == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Loevm cannot be null!!");
			}
			elementList.add(localLoevm);

			elementList.add(new javax.xml.namespace.QName("", "Name3"));

			if (localName3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name3 cannot be null!!");
			}
			elementList.add(localName3);

			elementList.add(new javax.xml.namespace.QName("", "Name4"));

			if (localName4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name4 cannot be null!!");
			}
			elementList.add(localName4);

			elementList.add(new javax.xml.namespace.QName("", "Niels"));

			if (localNiels == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Niels cannot be null!!");
			}
			elementList.add(localNiels);

			elementList.add(new javax.xml.namespace.QName("", "Ort02"));

			if (localOrt02 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ort02 cannot be null!!");
			}
			elementList.add(localOrt02);

			elementList.add(new javax.xml.namespace.QName("", "Pfach"));

			if (localPfach == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pfach cannot be null!!");
			}
			elementList.add(localPfach);

			elementList.add(new javax.xml.namespace.QName("", "Pstl2"));

			if (localPstl2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pstl2 cannot be null!!");
			}
			elementList.add(localPstl2);

			elementList.add(new javax.xml.namespace.QName("", "Counc"));

			if (localCounc == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Counc cannot be null!!");
			}
			elementList.add(localCounc);

			elementList.add(new javax.xml.namespace.QName("", "Cityc"));

			if (localCityc == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Cityc cannot be null!!");
			}
			elementList.add(localCityc);

			elementList.add(new javax.xml.namespace.QName("", "Rpmkr"));

			if (localRpmkr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Rpmkr cannot be null!!");
			}
			elementList.add(localRpmkr);

			elementList.add(new javax.xml.namespace.QName("", "Sperr"));

			if (localSperr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sperr cannot be null!!");
			}
			elementList.add(localSperr);

			elementList.add(new javax.xml.namespace.QName("", "Spras"));

			if (localSpras == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Spras cannot be null!!");
			}
			elementList.add(localSpras);

			elementList.add(new javax.xml.namespace.QName("", "Stcd1"));

			if (localStcd1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stcd1 cannot be null!!");
			}
			elementList.add(localStcd1);

			elementList.add(new javax.xml.namespace.QName("", "Stcd2"));

			if (localStcd2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stcd2 cannot be null!!");
			}
			elementList.add(localStcd2);

			elementList.add(new javax.xml.namespace.QName("", "Stkza"));

			if (localStkza == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stkza cannot be null!!");
			}
			elementList.add(localStkza);

			elementList.add(new javax.xml.namespace.QName("", "Stkzu"));

			if (localStkzu == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stkzu cannot be null!!");
			}
			elementList.add(localStkzu);

			elementList.add(new javax.xml.namespace.QName("", "Telbx"));

			if (localTelbx == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Telbx cannot be null!!");
			}
			elementList.add(localTelbx);

			elementList.add(new javax.xml.namespace.QName("", "Telf2"));

			if (localTelf2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Telf2 cannot be null!!");
			}
			elementList.add(localTelf2);

			elementList.add(new javax.xml.namespace.QName("", "Teltx"));

			if (localTeltx == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Teltx cannot be null!!");
			}
			elementList.add(localTeltx);

			elementList.add(new javax.xml.namespace.QName("", "Telx1"));

			if (localTelx1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Telx1 cannot be null!!");
			}
			elementList.add(localTelx1);

			elementList.add(new javax.xml.namespace.QName("", "Lzone"));

			if (localLzone == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lzone cannot be null!!");
			}
			elementList.add(localLzone);

			elementList.add(new javax.xml.namespace.QName("", "Xzemp"));

			if (localXzemp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xzemp cannot be null!!");
			}
			elementList.add(localXzemp);

			elementList.add(new javax.xml.namespace.QName("", "Vbund"));

			if (localVbund == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vbund cannot be null!!");
			}
			elementList.add(localVbund);

			elementList.add(new javax.xml.namespace.QName("", "Stceg"));

			if (localStceg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stceg cannot be null!!");
			}
			elementList.add(localStceg);

			elementList.add(new javax.xml.namespace.QName("", "Dear1"));

			if (localDear1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dear1 cannot be null!!");
			}
			elementList.add(localDear1);

			elementList.add(new javax.xml.namespace.QName("", "Dear2"));

			if (localDear2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dear2 cannot be null!!");
			}
			elementList.add(localDear2);

			elementList.add(new javax.xml.namespace.QName("", "Dear3"));

			if (localDear3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dear3 cannot be null!!");
			}
			elementList.add(localDear3);

			elementList.add(new javax.xml.namespace.QName("", "Dear4"));

			if (localDear4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dear4 cannot be null!!");
			}
			elementList.add(localDear4);

			elementList.add(new javax.xml.namespace.QName("", "Dear5"));

			if (localDear5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dear5 cannot be null!!");
			}
			elementList.add(localDear5);

			elementList.add(new javax.xml.namespace.QName("", "Gform"));

			if (localGform == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Gform cannot be null!!");
			}
			elementList.add(localGform);

			elementList.add(new javax.xml.namespace.QName("", "Bran1"));

			if (localBran1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bran1 cannot be null!!");
			}
			elementList.add(localBran1);

			elementList.add(new javax.xml.namespace.QName("", "Bran2"));

			if (localBran2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bran2 cannot be null!!");
			}
			elementList.add(localBran2);

			elementList.add(new javax.xml.namespace.QName("", "Bran3"));

			if (localBran3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bran3 cannot be null!!");
			}
			elementList.add(localBran3);

			elementList.add(new javax.xml.namespace.QName("", "Bran4"));

			if (localBran4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bran4 cannot be null!!");
			}
			elementList.add(localBran4);

			elementList.add(new javax.xml.namespace.QName("", "Bran5"));

			if (localBran5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bran5 cannot be null!!");
			}
			elementList.add(localBran5);

			elementList.add(new javax.xml.namespace.QName("", "Ekont"));

			if (localEkont == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ekont cannot be null!!");
			}
			elementList.add(localEkont);

			elementList.add(new javax.xml.namespace.QName("", "Umsat"));

			if (localUmsat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Umsat cannot be null!!");
			}
			elementList.add(localUmsat);

			elementList.add(new javax.xml.namespace.QName("", "Umjah"));

			if (localUmjah == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Umjah cannot be null!!");
			}
			elementList.add(localUmjah);

			elementList.add(new javax.xml.namespace.QName("", "Uwaer"));

			if (localUwaer == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Uwaer cannot be null!!");
			}
			elementList.add(localUwaer);

			elementList.add(new javax.xml.namespace.QName("", "Jmzah"));

			if (localJmzah == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Jmzah cannot be null!!");
			}
			elementList.add(localJmzah);

			elementList.add(new javax.xml.namespace.QName("", "Jmjah"));

			if (localJmjah == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Jmjah cannot be null!!");
			}
			elementList.add(localJmjah);

			elementList.add(new javax.xml.namespace.QName("", "Katr1"));

			if (localKatr1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr1 cannot be null!!");
			}
			elementList.add(localKatr1);

			elementList.add(new javax.xml.namespace.QName("", "Katr2"));

			if (localKatr2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr2 cannot be null!!");
			}
			elementList.add(localKatr2);

			elementList.add(new javax.xml.namespace.QName("", "Katr3"));

			if (localKatr3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr3 cannot be null!!");
			}
			elementList.add(localKatr3);

			elementList.add(new javax.xml.namespace.QName("", "Katr4"));

			if (localKatr4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr4 cannot be null!!");
			}
			elementList.add(localKatr4);

			elementList.add(new javax.xml.namespace.QName("", "Katr5"));

			if (localKatr5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr5 cannot be null!!");
			}
			elementList.add(localKatr5);

			elementList.add(new javax.xml.namespace.QName("", "Katr6"));

			if (localKatr6 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr6 cannot be null!!");
			}
			elementList.add(localKatr6);

			elementList.add(new javax.xml.namespace.QName("", "Katr7"));

			if (localKatr7 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr7 cannot be null!!");
			}
			elementList.add(localKatr7);

			elementList.add(new javax.xml.namespace.QName("", "Katr8"));

			if (localKatr8 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr8 cannot be null!!");
			}
			elementList.add(localKatr8);

			elementList.add(new javax.xml.namespace.QName("", "Katr9"));

			if (localKatr9 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr9 cannot be null!!");
			}
			elementList.add(localKatr9);

			elementList.add(new javax.xml.namespace.QName("", "Katr10"));

			if (localKatr10 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Katr10 cannot be null!!");
			}
			elementList.add(localKatr10);

			elementList.add(new javax.xml.namespace.QName("", "Stkzn"));

			if (localStkzn == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stkzn cannot be null!!");
			}
			elementList.add(localStkzn);

			elementList.add(new javax.xml.namespace.QName("", "Umsa1"));

			if (localUmsa1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Umsa1 cannot be null!!");
			}
			elementList.add(localUmsa1);

			elementList.add(new javax.xml.namespace.QName("", "Txjcd"));

			if (localTxjcd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Txjcd cannot be null!!");
			}
			elementList.add(localTxjcd);

			elementList.add(new javax.xml.namespace.QName("", "Periv"));

			if (localPeriv == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Periv cannot be null!!");
			}
			elementList.add(localPeriv);

			elementList.add(new javax.xml.namespace.QName("", "Abrvw"));

			if (localAbrvw == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Abrvw cannot be null!!");
			}
			elementList.add(localAbrvw);

			elementList.add(new javax.xml.namespace.QName("", "Inspbydebi"));

			if (localInspbydebi == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Inspbydebi cannot be null!!");
			}
			elementList.add(localInspbydebi);

			elementList.add(new javax.xml.namespace.QName("", "Inspatdebi"));

			if (localInspatdebi == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Inspatdebi cannot be null!!");
			}
			elementList.add(localInspatdebi);

			elementList.add(new javax.xml.namespace.QName("", "Ktocd"));

			if (localKtocd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ktocd cannot be null!!");
			}
			elementList.add(localKtocd);

			elementList.add(new javax.xml.namespace.QName("", "Pfort"));

			if (localPfort == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pfort cannot be null!!");
			}
			elementList.add(localPfort);

			elementList.add(new javax.xml.namespace.QName("", "Werks"));

			if (localWerks == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Werks cannot be null!!");
			}
			elementList.add(localWerks);

			elementList.add(new javax.xml.namespace.QName("", "Dtams"));

			if (localDtams == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dtams cannot be null!!");
			}
			elementList.add(localDtams);

			elementList.add(new javax.xml.namespace.QName("", "Dtaws"));

			if (localDtaws == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dtaws cannot be null!!");
			}
			elementList.add(localDtaws);

			elementList.add(new javax.xml.namespace.QName("", "Duefl"));

			if (localDuefl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Duefl cannot be null!!");
			}
			elementList.add(localDuefl);

			elementList.add(new javax.xml.namespace.QName("", "Hzuor"));

			if (localHzuor == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Hzuor cannot be null!!");
			}
			elementList.add(localHzuor);

			elementList.add(new javax.xml.namespace.QName("", "Sperz"));

			if (localSperz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sperz cannot be null!!");
			}
			elementList.add(localSperz);

			elementList.add(new javax.xml.namespace.QName("", "Etikg"));

			if (localEtikg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Etikg cannot be null!!");
			}
			elementList.add(localEtikg);

			elementList.add(new javax.xml.namespace.QName("", "Civve"));

			if (localCivve == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Civve cannot be null!!");
			}
			elementList.add(localCivve);

			elementList.add(new javax.xml.namespace.QName("", "Milve"));

			if (localMilve == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Milve cannot be null!!");
			}
			elementList.add(localMilve);

			elementList.add(new javax.xml.namespace.QName("", "Kdkg1"));

			if (localKdkg1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kdkg1 cannot be null!!");
			}
			elementList.add(localKdkg1);

			elementList.add(new javax.xml.namespace.QName("", "Kdkg2"));

			if (localKdkg2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kdkg2 cannot be null!!");
			}
			elementList.add(localKdkg2);

			elementList.add(new javax.xml.namespace.QName("", "Kdkg3"));

			if (localKdkg3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kdkg3 cannot be null!!");
			}
			elementList.add(localKdkg3);

			elementList.add(new javax.xml.namespace.QName("", "Kdkg4"));

			if (localKdkg4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kdkg4 cannot be null!!");
			}
			elementList.add(localKdkg4);

			elementList.add(new javax.xml.namespace.QName("", "Kdkg5"));

			if (localKdkg5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kdkg5 cannot be null!!");
			}
			elementList.add(localKdkg5);

			elementList.add(new javax.xml.namespace.QName("", "Xknza"));

			if (localXknza == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xknza cannot be null!!");
			}
			elementList.add(localXknza);

			elementList.add(new javax.xml.namespace.QName("", "Fityp"));

			if (localFityp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Fityp cannot be null!!");
			}
			elementList.add(localFityp);

			elementList.add(new javax.xml.namespace.QName("", "Stcdt"));

			if (localStcdt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stcdt cannot be null!!");
			}
			elementList.add(localStcdt);

			elementList.add(new javax.xml.namespace.QName("", "Stcd3"));

			if (localStcd3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stcd3 cannot be null!!");
			}
			elementList.add(localStcd3);

			elementList.add(new javax.xml.namespace.QName("", "Stcd4"));

			if (localStcd4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stcd4 cannot be null!!");
			}
			elementList.add(localStcd4);

			elementList.add(new javax.xml.namespace.QName("", "Xicms"));

			if (localXicms == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xicms cannot be null!!");
			}
			elementList.add(localXicms);

			elementList.add(new javax.xml.namespace.QName("", "Xxipi"));

			if (localXxipi == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xxipi cannot be null!!");
			}
			elementList.add(localXxipi);

			elementList.add(new javax.xml.namespace.QName("", "Xsubt"));

			if (localXsubt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xsubt cannot be null!!");
			}
			elementList.add(localXsubt);

			elementList.add(new javax.xml.namespace.QName("", "Cfopc"));

			if (localCfopc == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Cfopc cannot be null!!");
			}
			elementList.add(localCfopc);

			elementList.add(new javax.xml.namespace.QName("", "Txlw1"));

			if (localTxlw1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Txlw1 cannot be null!!");
			}
			elementList.add(localTxlw1);

			elementList.add(new javax.xml.namespace.QName("", "Txlw2"));

			if (localTxlw2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Txlw2 cannot be null!!");
			}
			elementList.add(localTxlw2);

			elementList.add(new javax.xml.namespace.QName("", "Ccc01"));

			if (localCcc01 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ccc01 cannot be null!!");
			}
			elementList.add(localCcc01);

			elementList.add(new javax.xml.namespace.QName("", "Ccc02"));

			if (localCcc02 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ccc02 cannot be null!!");
			}
			elementList.add(localCcc02);

			elementList.add(new javax.xml.namespace.QName("", "Ccc03"));

			if (localCcc03 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ccc03 cannot be null!!");
			}
			elementList.add(localCcc03);

			elementList.add(new javax.xml.namespace.QName("", "Ccc04"));

			if (localCcc04 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ccc04 cannot be null!!");
			}
			elementList.add(localCcc04);

			elementList.add(new javax.xml.namespace.QName("", "Cassd"));

			if (localCassd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Cassd cannot be null!!");
			}
			elementList.add(localCassd);

			elementList.add(new javax.xml.namespace.QName("", "Knurl"));

			if (localKnurl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Knurl cannot be null!!");
			}
			elementList.add(localKnurl);

			elementList.add(new javax.xml.namespace.QName("", "J1kfrepre"));

			if (localJ1Kfrepre == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"J1kfrepre cannot be null!!");
			}
			elementList.add(localJ1Kfrepre);

			elementList.add(new javax.xml.namespace.QName("", "J1kftbus"));

			if (localJ1Kftbus == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"J1kftbus cannot be null!!");
			}
			elementList.add(localJ1Kftbus);

			elementList.add(new javax.xml.namespace.QName("", "J1kftind"));

			if (localJ1Kftind == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"J1kftind cannot be null!!");
			}
			elementList.add(localJ1Kftind);

			elementList.add(new javax.xml.namespace.QName("", "Confs"));

			if (localConfs == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Confs cannot be null!!");
			}
			elementList.add(localConfs);

			elementList.add(new javax.xml.namespace.QName("", "Updat"));

			if (localUpdat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Updat cannot be null!!");
			}
			elementList.add(localUpdat);

			elementList.add(new javax.xml.namespace.QName("", "Uptim"));

			if (localUptim == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Uptim cannot be null!!");
			}
			elementList.add(localUptim);

			elementList.add(new javax.xml.namespace.QName("", "Nodel"));

			if (localNodel == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Nodel cannot be null!!");
			}
			elementList.add(localNodel);

			elementList.add(new javax.xml.namespace.QName("", "Dear6"));

			if (localDear6 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dear6 cannot be null!!");
			}
			elementList.add(localDear6);

			elementList
					.add(new javax.xml.namespace.QName("", "_-vso_-rPalhgt"));

			if (local_Vso_RPalhgt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rPalhgt cannot be null!!");
			}
			elementList.add(local_Vso_RPalhgt);

			elementList.add(new javax.xml.namespace.QName("", "_-vso_-rPalUl"));

			if (local_Vso_RPalUl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rPalUl cannot be null!!");
			}
			elementList.add(local_Vso_RPalUl);

			elementList.add(new javax.xml.namespace.QName("", "_-vso_-rPkMat"));

			if (local_Vso_RPkMat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rPkMat cannot be null!!");
			}
			elementList.add(local_Vso_RPkMat);

			elementList
					.add(new javax.xml.namespace.QName("", "_-vso_-rMatpal"));

			if (local_Vso_RMatpal == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rMatpal cannot be null!!");
			}
			elementList.add(local_Vso_RMatpal);

			elementList
					.add(new javax.xml.namespace.QName("", "_-vso_-rINoLyr"));

			if (local_Vso_RINoLyr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rINoLyr cannot be null!!");
			}
			elementList.add(local_Vso_RINoLyr);

			elementList
					.add(new javax.xml.namespace.QName("", "_-vso_-rOneMat"));

			if (local_Vso_ROneMat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rOneMat cannot be null!!");
			}
			elementList.add(local_Vso_ROneMat);

			elementList
					.add(new javax.xml.namespace.QName("", "_-vso_-rOneSort"));

			if (local_Vso_ROneSort == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rOneSort cannot be null!!");
			}
			elementList.add(local_Vso_ROneSort);

			elementList
					.add(new javax.xml.namespace.QName("", "_-vso_-rUldSide"));

			if (local_Vso_RUldSide == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rUldSide cannot be null!!");
			}
			elementList.add(local_Vso_RUldSide);

			elementList.add(new javax.xml.namespace.QName("",
					"_-vso_-rLoadPref"));

			if (local_Vso_RLoadPref == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rLoadPref cannot be null!!");
			}
			elementList.add(local_Vso_RLoadPref);

			elementList
					.add(new javax.xml.namespace.QName("", "_-vso_-rDpoint"));

			if (local_Vso_RDpoint == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"_-vso_-rDpoint cannot be null!!");
			}
			elementList.add(local_Vso_RDpoint);

			elementList.add(new javax.xml.namespace.QName("", "Alc"));

			if (localAlc == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Alc cannot be null!!");
			}
			elementList.add(localAlc);

			elementList.add(new javax.xml.namespace.QName("", "PmtOffice"));

			if (localPmtOffice == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PmtOffice cannot be null!!");
			}
			elementList.add(localPmtOffice);

			elementList.add(new javax.xml.namespace.QName("", "FeeSchedule"));

			if (localFeeSchedule == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"FeeSchedule cannot be null!!");
			}
			elementList.add(localFeeSchedule);

			elementList.add(new javax.xml.namespace.QName("", "Duns"));

			if (localDuns == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Duns cannot be null!!");
			}
			elementList.add(localDuns);

			elementList.add(new javax.xml.namespace.QName("", "Duns4"));

			if (localDuns4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Duns4 cannot be null!!");
			}
			elementList.add(localDuns4);

			elementList.add(new javax.xml.namespace.QName("", "Psofg"));

			if (localPsofg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psofg cannot be null!!");
			}
			elementList.add(localPsofg);

			elementList.add(new javax.xml.namespace.QName("", "Psois"));

			if (localPsois == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psois cannot be null!!");
			}
			elementList.add(localPsois);

			elementList.add(new javax.xml.namespace.QName("", "Pson1"));

			if (localPson1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pson1 cannot be null!!");
			}
			elementList.add(localPson1);

			elementList.add(new javax.xml.namespace.QName("", "Pson2"));

			if (localPson2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pson2 cannot be null!!");
			}
			elementList.add(localPson2);

			elementList.add(new javax.xml.namespace.QName("", "Pson3"));

			if (localPson3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pson3 cannot be null!!");
			}
			elementList.add(localPson3);

			elementList.add(new javax.xml.namespace.QName("", "Psovn"));

			if (localPsovn == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psovn cannot be null!!");
			}
			elementList.add(localPsovn);

			elementList.add(new javax.xml.namespace.QName("", "Psotl"));

			if (localPsotl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psotl cannot be null!!");
			}
			elementList.add(localPsotl);

			elementList.add(new javax.xml.namespace.QName("", "Psohs"));

			if (localPsohs == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psohs cannot be null!!");
			}
			elementList.add(localPsohs);

			elementList.add(new javax.xml.namespace.QName("", "Psost"));

			if (localPsost == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psost cannot be null!!");
			}
			elementList.add(localPsost);

			elementList.add(new javax.xml.namespace.QName("", "Psoo1"));

			if (localPsoo1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psoo1 cannot be null!!");
			}
			elementList.add(localPsoo1);

			elementList.add(new javax.xml.namespace.QName("", "Psoo2"));

			if (localPsoo2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psoo2 cannot be null!!");
			}
			elementList.add(localPsoo2);

			elementList.add(new javax.xml.namespace.QName("", "Psoo3"));

			if (localPsoo3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psoo3 cannot be null!!");
			}
			elementList.add(localPsoo3);

			elementList.add(new javax.xml.namespace.QName("", "Psoo4"));

			if (localPsoo4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psoo4 cannot be null!!");
			}
			elementList.add(localPsoo4);

			elementList.add(new javax.xml.namespace.QName("", "Psoo5"));

			if (localPsoo5 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Psoo5 cannot be null!!");
			}
			elementList.add(localPsoo5);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Kna1 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Kna1 object = new Kna1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"Kna1".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Kna1) ExtensionMapper.getTypeObject(
										nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mandt")
									.equals(reader.getName())) {

						object.setMandt(Clnt3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kunnr")
									.equals(reader.getName())) {

						object.setKunnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Land1")
									.equals(reader.getName())) {

						object.setLand1(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Name1")
									.equals(reader.getName())) {

						object.setName1(Char35.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Name2")
									.equals(reader.getName())) {

						object.setName2(Char35.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Ort01")
									.equals(reader.getName())) {

						object.setOrt01(Char35.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pstlz")
									.equals(reader.getName())) {

						object.setPstlz(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Regio")
									.equals(reader.getName())) {

						object.setRegio(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sortl")
									.equals(reader.getName())) {

						object.setSortl(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Stras")
									.equals(reader.getName())) {

						object.setStras(Char35.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Telf1")
									.equals(reader.getName())) {

						object.setTelf1(Char16.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Telfx")
									.equals(reader.getName())) {

						object.setTelfx(Char31.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Xcpdk")
									.equals(reader.getName())) {

						object.setXcpdk(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Adrnr")
									.equals(reader.getName())) {

						object.setAdrnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mcod1")
									.equals(reader.getName())) {

						object.setMcod1(Char25.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mcod2")
									.equals(reader.getName())) {

						object.setMcod2(Char25.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mcod3")
									.equals(reader.getName())) {

						object.setMcod3(Char25.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Anred")
									.equals(reader.getName())) {

						object.setAnred(Char15.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Aufsd")
									.equals(reader.getName())) {

						object.setAufsd(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bahne")
									.equals(reader.getName())) {

						object.setBahne(Char25.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bahns")
									.equals(reader.getName())) {

						object.setBahns(Char25.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bbbnr")
									.equals(reader.getName())) {

						object.setBbbnr(Numeric7.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bbsnr")
									.equals(reader.getName())) {

						object.setBbsnr(Numeric5.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Begru")
									.equals(reader.getName())) {

						object.setBegru(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Brsch")
									.equals(reader.getName())) {

						object.setBrsch(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bubkz")
									.equals(reader.getName())) {

						object.setBubkz(Numeric1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Datlt")
									.equals(reader.getName())) {

						object.setDatlt(Char14.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Erdat")
									.equals(reader.getName())) {

						object.setErdat(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Ernam")
									.equals(reader.getName())) {

						object.setErnam(Char12.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Exabl")
									.equals(reader.getName())) {

						object.setExabl(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Faksd")
									.equals(reader.getName())) {

						object.setFaksd(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Fiskn")
									.equals(reader.getName())) {

						object.setFiskn(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Knazk")
									.equals(reader.getName())) {

						object.setKnazk(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Knrza")
									.equals(reader.getName())) {

						object.setKnrza(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Konzs")
									.equals(reader.getName())) {

						object.setKonzs(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Ktokd")
									.equals(reader.getName())) {

						object.setKtokd(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kukla")
									.equals(reader.getName())) {

						object.setKukla(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Lifnr")
									.equals(reader.getName())) {

						object.setLifnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Lifsd")
									.equals(reader.getName())) {

						object.setLifsd(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Locco")
									.equals(reader.getName())) {

						object.setLocco(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Loevm")
									.equals(reader.getName())) {

						object.setLoevm(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Name3")
									.equals(reader.getName())) {

						object.setName3(Char35.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Name4")
									.equals(reader.getName())) {

						object.setName4(Char35.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Niels")
									.equals(reader.getName())) {

						object.setNiels(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Ort02")
									.equals(reader.getName())) {

						object.setOrt02(Char35.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pfach")
									.equals(reader.getName())) {

						object.setPfach(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pstl2")
									.equals(reader.getName())) {

						object.setPstl2(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Counc")
									.equals(reader.getName())) {

						object.setCounc(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Cityc")
									.equals(reader.getName())) {

						object.setCityc(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Rpmkr")
									.equals(reader.getName())) {

						object.setRpmkr(Char5.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sperr")
									.equals(reader.getName())) {

						object.setSperr(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Spras")
									.equals(reader.getName())) {

						object.setSpras(Lang.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Stcd1")
									.equals(reader.getName())) {

						object.setStcd1(Char16.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Stcd2")
									.equals(reader.getName())) {

						object.setStcd2(Char11.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Stkza")
									.equals(reader.getName())) {

						object.setStkza(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Stkzu")
									.equals(reader.getName())) {

						object.setStkzu(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Telbx")
									.equals(reader.getName())) {

						object.setTelbx(Char15.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Telf2")
									.equals(reader.getName())) {

						object.setTelf2(Char16.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Teltx")
									.equals(reader.getName())) {

						object.setTeltx(Char30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Telx1")
									.equals(reader.getName())) {

						object.setTelx1(Char30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Lzone")
									.equals(reader.getName())) {

						object.setLzone(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Xzemp")
									.equals(reader.getName())) {

						object.setXzemp(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vbund")
									.equals(reader.getName())) {

						object.setVbund(Char6.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Stceg")
									.equals(reader.getName())) {

						object.setStceg(Char20.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dear1")
									.equals(reader.getName())) {

						object.setDear1(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dear2")
									.equals(reader.getName())) {

						object.setDear2(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dear3")
									.equals(reader.getName())) {

						object.setDear3(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dear4")
									.equals(reader.getName())) {

						object.setDear4(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dear5")
									.equals(reader.getName())) {

						object.setDear5(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Gform")
									.equals(reader.getName())) {

						object.setGform(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bran1")
									.equals(reader.getName())) {

						object.setBran1(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bran2")
									.equals(reader.getName())) {

						object.setBran2(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bran3")
									.equals(reader.getName())) {

						object.setBran3(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bran4")
									.equals(reader.getName())) {

						object.setBran4(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bran5")
									.equals(reader.getName())) {

						object.setBran5(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Ekont")
									.equals(reader.getName())) {

						object.setEkont(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Umsat")
									.equals(reader.getName())) {

						object.setUmsat(Curr82.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Umjah")
									.equals(reader.getName())) {

						object.setUmjah(Numeric4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Uwaer")
									.equals(reader.getName())) {

						object.setUwaer(Cuky5.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Jmzah")
									.equals(reader.getName())) {

						object.setJmzah(Numeric6.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Jmjah")
									.equals(reader.getName())) {

						object.setJmjah(Numeric4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Katr1")
									.equals(reader.getName())) {

						object.setKatr1(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Katr2")
									.equals(reader.getName())) {

						object.setKatr2(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Katr3")
									.equals(reader.getName())) {

						object.setKatr3(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Katr4")
									.equals(reader.getName())) {

						object.setKatr4(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Katr5")
									.equals(reader.getName())) {

						object.setKatr5(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Katr6")
									.equals(reader.getName())) {

						object.setKatr6(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Katr7")
									.equals(reader.getName())) {

						object.setKatr7(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Katr8")
									.equals(reader.getName())) {

						object.setKatr8(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Katr9")
									.equals(reader.getName())) {

						object.setKatr9(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Katr10")
									.equals(reader.getName())) {

						object.setKatr10(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Stkzn")
									.equals(reader.getName())) {

						object.setStkzn(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Umsa1")
									.equals(reader.getName())) {

						object.setUmsa1(Curr152.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Txjcd")
									.equals(reader.getName())) {

						object.setTxjcd(Char15.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Periv")
									.equals(reader.getName())) {

						object.setPeriv(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Abrvw")
									.equals(reader.getName())) {

						object.setAbrvw(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Inspbydebi")
									.equals(reader.getName())) {

						object.setInspbydebi(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Inspatdebi")
									.equals(reader.getName())) {

						object.setInspatdebi(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Ktocd")
									.equals(reader.getName())) {

						object.setKtocd(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pfort")
									.equals(reader.getName())) {

						object.setPfort(Char35.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Werks")
									.equals(reader.getName())) {

						object.setWerks(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dtams")
									.equals(reader.getName())) {

						object.setDtams(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dtaws")
									.equals(reader.getName())) {

						object.setDtaws(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Duefl")
									.equals(reader.getName())) {

						object.setDuefl(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Hzuor")
									.equals(reader.getName())) {

						object.setHzuor(Numeric2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sperz")
									.equals(reader.getName())) {

						object.setSperz(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Etikg")
									.equals(reader.getName())) {

						object.setEtikg(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Civve")
									.equals(reader.getName())) {

						object.setCivve(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Milve")
									.equals(reader.getName())) {

						object.setMilve(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kdkg1")
									.equals(reader.getName())) {

						object.setKdkg1(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kdkg2")
									.equals(reader.getName())) {

						object.setKdkg2(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kdkg3")
									.equals(reader.getName())) {

						object.setKdkg3(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kdkg4")
									.equals(reader.getName())) {

						object.setKdkg4(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kdkg5")
									.equals(reader.getName())) {

						object.setKdkg5(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Xknza")
									.equals(reader.getName())) {

						object.setXknza(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Fityp")
									.equals(reader.getName())) {

						object.setFityp(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Stcdt")
									.equals(reader.getName())) {

						object.setStcdt(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Stcd3")
									.equals(reader.getName())) {

						object.setStcd3(Char18.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Stcd4")
									.equals(reader.getName())) {

						object.setStcd4(Char18.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Xicms")
									.equals(reader.getName())) {

						object.setXicms(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Xxipi")
									.equals(reader.getName())) {

						object.setXxipi(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Xsubt")
									.equals(reader.getName())) {

						object.setXsubt(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Cfopc")
									.equals(reader.getName())) {

						object.setCfopc(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Txlw1")
									.equals(reader.getName())) {

						object.setTxlw1(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Txlw2")
									.equals(reader.getName())) {

						object.setTxlw2(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Ccc01")
									.equals(reader.getName())) {

						object.setCcc01(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Ccc02")
									.equals(reader.getName())) {

						object.setCcc02(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Ccc03")
									.equals(reader.getName())) {

						object.setCcc03(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Ccc04")
									.equals(reader.getName())) {

						object.setCcc04(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Cassd")
									.equals(reader.getName())) {

						object.setCassd(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Knurl")
									.equals(reader.getName())) {

						object.setKnurl(Char132.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "J1kfrepre")
									.equals(reader.getName())) {

						object.setJ1Kfrepre(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "J1kftbus")
									.equals(reader.getName())) {

						object.setJ1Kftbus(Char30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "J1kftind")
									.equals(reader.getName())) {

						object.setJ1Kftind(Char30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Confs")
									.equals(reader.getName())) {

						object.setConfs(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Updat")
									.equals(reader.getName())) {

						object.setUpdat(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Uptim")
									.equals(reader.getName())) {

						object.setUptim(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Nodel")
									.equals(reader.getName())) {

						object.setNodel(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dear6")
									.equals(reader.getName())) {

						object.setDear6(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"_-vso_-rPalhgt").equals(reader.getName())) {

						object.set_Vso_RPalhgt(Quantum133.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"_-vso_-rPalUl").equals(reader.getName())) {

						object.set_Vso_RPalUl(Unit3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"_-vso_-rPkMat").equals(reader.getName())) {

						object.set_Vso_RPkMat(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"_-vso_-rMatpal").equals(reader.getName())) {

						object.set_Vso_RMatpal(Char18.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"_-vso_-rINoLyr").equals(reader.getName())) {

						object.set_Vso_RINoLyr(Numeric2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"_-vso_-rOneMat").equals(reader.getName())) {

						object.set_Vso_ROneMat(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"_-vso_-rOneSort").equals(reader.getName())) {

						object.set_Vso_ROneSort(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"_-vso_-rUldSide").equals(reader.getName())) {

						object.set_Vso_RUldSide(Numeric1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"_-vso_-rLoadPref")
									.equals(reader.getName())) {

						object.set_Vso_RLoadPref(Numeric1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"_-vso_-rDpoint").equals(reader.getName())) {

						object.set_Vso_RDpoint(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Alc")
									.equals(reader.getName())) {

						object.setAlc(Char8.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PmtOffice")
									.equals(reader.getName())) {

						object.setPmtOffice(Char5.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "FeeSchedule")
									.equals(reader.getName())) {

						object.setFeeSchedule(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Duns")
									.equals(reader.getName())) {

						object.setDuns(Char9.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Duns4")
									.equals(reader.getName())) {

						object.setDuns4(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Psofg")
									.equals(reader.getName())) {

						object.setPsofg(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Psois")
									.equals(reader.getName())) {

						object.setPsois(Char20.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pson1")
									.equals(reader.getName())) {

						object.setPson1(Char35.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pson2")
									.equals(reader.getName())) {

						object.setPson2(Char35.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pson3")
									.equals(reader.getName())) {

						object.setPson3(Char35.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Psovn")
									.equals(reader.getName())) {

						object.setPsovn(Char35.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Psotl")
									.equals(reader.getName())) {

						object.setPsotl(Char20.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Psohs")
									.equals(reader.getName())) {

						object.setPsohs(Char6.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Psost")
									.equals(reader.getName())) {

						object.setPsost(Char28.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Psoo1")
									.equals(reader.getName())) {

						object.setPsoo1(Char50.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Psoo2")
									.equals(reader.getName())) {

						object.setPsoo2(Char50.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Psoo3")
									.equals(reader.getName())) {

						object.setPsoo3(Char50.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Psoo4")
									.equals(reader.getName())) {

						object.setPsoo4(Char50.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Psoo5")
									.equals(reader.getName())) {

						object.setPsoo5(Char50.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class TableOfFknza implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * TableOfFknza Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Item This was an Array!
		 */

		protected Fknza[] localItem;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localItemTracker = false;

		public boolean isItemSpecified() {
			return localItemTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Fknza[]
		 */
		public Fknza[] getItem() {
			return localItem;
		}

		/**
		 * validate the array for Item
		 */
		protected void validateItem(Fknza[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Item
		 */
		public void setItem(Fknza[] param) {

			validateItem(param);

			localItemTracker = param != null;

			this.localItem = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            Fknza
		 */
		public void addItem(Fknza param) {
			if (localItem == null) {
				localItem = new Fknza[] {};
			}

			// update the setting tracker
			localItemTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localItem);
			list.add(param);
			this.localItem = (Fknza[]) list.toArray(new Fknza[list.size()]);

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":TableOfFknza",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "TableOfFknza", xmlWriter);
				}

			}
			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {
						if (localItem[i] != null) {
							localItem[i].serialize(
									new javax.xml.namespace.QName("", "item"),
									xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {

						if (localItem[i] != null) {
							elementList.add(new javax.xml.namespace.QName("",
									"item"));
							elementList.add(localItem[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static TableOfFknza parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				TableOfFknza object = new TableOfFknza();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"TableOfFknza".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (TableOfFknza) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "item")
									.equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(Fknza.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("", "item")
										.equals(reader.getName())) {
									list1.add(Fknza.Factory.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setItem((Fknza[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(Fknza.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char12 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char12", "ns2");

		/**
		 * field for Char12
		 */

		protected java.lang.String localChar12;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar12() {
			return localChar12;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char12
		 */
		public void setChar12(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 12)) {
				this.localChar12 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar12.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char12", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char12", xmlWriter);
				}
			}

			if (localChar12 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char12 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar12);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar12) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char12 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char12 returnValue = new Char12();

				returnValue
						.setChar12(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char12 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char12.Factory.fromString(content, namespaceUri);
				} else {
					return Char12.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char12 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char12 object = new Char12();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char12"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar12(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char11 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char11", "ns2");

		/**
		 * field for Char11
		 */

		protected java.lang.String localChar11;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar11() {
			return localChar11;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char11
		 */
		public void setChar11(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 11)) {
				this.localChar11 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar11.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char11", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char11", xmlWriter);
				}
			}

			if (localChar11 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char11 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar11);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar11) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char11 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char11 returnValue = new Char11();

				returnValue
						.setChar11(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char11 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char11.Factory.fromString(content, namespaceUri);
				} else {
					return Char11.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char11 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char11 object = new Char11();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char11"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar11(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char10 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char10", "ns2");

		/**
		 * field for Char10
		 */

		protected java.lang.String localChar10;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar10() {
			return localChar10;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char10
		 */
		public void setChar10(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 10)) {
				this.localChar10 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar10.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char10", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char10", xmlWriter);
				}
			}

			if (localChar10 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char10 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar10);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar10) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char10 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char10 returnValue = new Char10();

				returnValue
						.setChar10(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char10 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char10.Factory.fromString(content, namespaceUri);
				} else {
					return Char10.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char10 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char10 object = new Char10();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char10"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar10(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class RfcExceptionMessage implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * RfcException.Message Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for ID
		 */

		protected java.lang.String localID;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getID() {
			return localID;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ID
		 */
		public void setID(java.lang.String param) {

			this.localID = param;

		}

		/**
		 * field for Number
		 */

		protected RfcExceptionMessageNumber localNumber;

		/**
		 * Auto generated getter method
		 * 
		 * @return RfcExceptionMessageNumber
		 */
		public RfcExceptionMessageNumber getNumber() {
			return localNumber;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Number
		 */
		public void setNumber(RfcExceptionMessageNumber param) {

			this.localNumber = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":RfcException.Message",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "RfcException.Message", xmlWriter);
				}

			}

			namespace = "";
			writeStartElement(null, namespace, "ID", xmlWriter);

			if (localID == null) {
				// write the nil attribute

				throw new org.apache.axis2.databinding.ADBException(
						"ID cannot be null!!");

			} else {

				xmlWriter.writeCharacters(localID);

			}

			xmlWriter.writeEndElement();

			if (localNumber == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Number cannot be null!!");
			}
			localNumber.serialize(new javax.xml.namespace.QName("", "Number"),
					xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "ID"));

			if (localID != null) {
				elementList
						.add(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localID));
			} else {
				throw new org.apache.axis2.databinding.ADBException(
						"ID cannot be null!!");
			}

			elementList.add(new javax.xml.namespace.QName("", "Number"));

			if (localNumber == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Number cannot be null!!");
			}
			elementList.add(localNumber);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static RfcExceptionMessage parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				RfcExceptionMessage object = new RfcExceptionMessage();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"RfcException.Message".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (RfcExceptionMessage) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ID")
									.equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "ID" + "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setID(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Number")
									.equals(reader.getName())) {

						object.setNumber(RfcExceptionMessageNumber.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class TableOfFknva implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * TableOfFknva Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Item This was an Array!
		 */

		protected Fknva[] localItem;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localItemTracker = false;

		public boolean isItemSpecified() {
			return localItemTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Fknva[]
		 */
		public Fknva[] getItem() {
			return localItem;
		}

		/**
		 * validate the array for Item
		 */
		protected void validateItem(Fknva[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Item
		 */
		public void setItem(Fknva[] param) {

			validateItem(param);

			localItemTracker = param != null;

			this.localItem = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            Fknva
		 */
		public void addItem(Fknva param) {
			if (localItem == null) {
				localItem = new Fknva[] {};
			}

			// update the setting tracker
			localItemTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localItem);
			list.add(param);
			this.localItem = (Fknva[]) list.toArray(new Fknva[list.size()]);

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":TableOfFknva",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "TableOfFknva", xmlWriter);
				}

			}
			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {
						if (localItem[i] != null) {
							localItem[i].serialize(
									new javax.xml.namespace.QName("", "item"),
									xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {

						if (localItem[i] != null) {
							elementList.add(new javax.xml.namespace.QName("",
									"item"));
							elementList.add(localItem[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static TableOfFknva parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				TableOfFknva object = new TableOfFknva();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"TableOfFknva".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (TableOfFknva) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "item")
									.equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(Fknva.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("", "item")
										.equals(reader.getName())) {
									list1.add(Fknva.Factory.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setItem((Fknva[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(Fknva.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Curr152 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "curr15.2", "ns2");

		/**
		 * field for Curr152
		 */

		protected java.math.BigDecimal localCurr152;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getCurr152() {
			return localCurr152;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Curr152
		 */
		public void setCurr152(java.math.BigDecimal param) {

			java.lang.String totalDigitsDecimal = org.apache.axis2.databinding.utils.ConverterUtil
					.convertToStandardDecimalNotation("15").toString();
			if (org.apache.axis2.databinding.utils.ConverterUtil.compare(param,
					totalDigitsDecimal) > 0) {
				this.localCurr152 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localCurr152.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":curr15.2", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "curr15.2", xmlWriter);
				}
			}

			if (localCurr152 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"curr15.2 cannot be null !!");

			} else {

				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localCurr152));

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCurr152) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Curr152 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Curr152 returnValue = new Curr152();

				returnValue
						.setCurr152(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(value));

				return returnValue;
			}

			public static Curr152 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Curr152.Factory.fromString(content, namespaceUri);
				} else {
					return Curr152.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Curr152 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Curr152 object = new Curr152();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "curr15.2"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setCurr152(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToDecimal(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char16 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char16", "ns2");

		/**
		 * field for Char16
		 */

		protected java.lang.String localChar16;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar16() {
			return localChar16;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char16
		 */
		public void setChar16(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 16)) {
				this.localChar16 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar16.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char16", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char16", xmlWriter);
				}
			}

			if (localChar16 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char16 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar16);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar16) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char16 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char16 returnValue = new Char16();

				returnValue
						.setChar16(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char16 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char16.Factory.fromString(content, namespaceUri);
				} else {
					return Char16.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char16 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char16 object = new Char16();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char16"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar16(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char15 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char15", "ns2");

		/**
		 * field for Char15
		 */

		protected java.lang.String localChar15;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar15() {
			return localChar15;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char15
		 */
		public void setChar15(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 15)) {
				this.localChar15 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar15.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char15", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char15", xmlWriter);
				}
			}

			if (localChar15 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char15 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar15);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar15) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char15 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char15 returnValue = new Char15();

				returnValue
						.setChar15(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char15 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char15.Factory.fromString(content, namespaceUri);
				} else {
					return Char15.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char15 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char15 object = new Char15();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char15"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar15(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char14 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char14", "ns2");

		/**
		 * field for Char14
		 */

		protected java.lang.String localChar14;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar14() {
			return localChar14;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char14
		 */
		public void setChar14(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 14)) {
				this.localChar14 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar14.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char14", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char14", xmlWriter);
				}
			}

			if (localChar14 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char14 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar14);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar14) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char14 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char14 returnValue = new Char14();

				returnValue
						.setChar14(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char14 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char14.Factory.fromString(content, namespaceUri);
				} else {
					return Char14.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char14 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char14 object = new Char14();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char14"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar14(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char50 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char50", "ns2");

		/**
		 * field for Char50
		 */

		protected java.lang.String localChar50;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar50() {
			return localChar50;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char50
		 */
		public void setChar50(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 50)) {
				this.localChar50 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar50.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char50", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char50", xmlWriter);
				}
			}

			if (localChar50 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char50 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar50);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar50) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char50 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char50 returnValue = new Char50();

				returnValue
						.setChar50(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char50 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char50.Factory.fromString(content, namespaceUri);
				} else {
					return Char50.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char50 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char50 object = new Char50();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char50"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar50(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Lang implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "lang", "ns2");

		/**
		 * field for Lang
		 */

		protected java.lang.String localLang;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getLang() {
			return localLang;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Lang
		 */
		public void setLang(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 1)) {
				this.localLang = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localLang.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":lang", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "lang", xmlWriter);
				}
			}

			if (localLang == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"lang cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localLang);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localLang) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Lang fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Lang returnValue = new Lang();

				returnValue
						.setLang(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Lang fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Lang.Factory.fromString(content, namespaceUri);
				} else {
					return Lang.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Lang parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Lang object = new Lang();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "lang"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setLang(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ZsdCustomerMaintainAll implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:soap:functions:mc-style",
				"ZsdCustomerMaintainAll", "ns1");

		/**
		 * field for ZiBapiaddr1
		 */

		protected Bapiaddr1 localZiBapiaddr1;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZiBapiaddr1Tracker = false;

		public boolean isZiBapiaddr1Specified() {
			return localZiBapiaddr1Tracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Bapiaddr1
		 */
		public Bapiaddr1 getZiBapiaddr1() {
			return localZiBapiaddr1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZiBapiaddr1
		 */
		public void setZiBapiaddr1(Bapiaddr1 param) {
			localZiBapiaddr1Tracker = param != null;

			this.localZiBapiaddr1 = param;

		}

		/**
		 * field for ZiBapiaddr2
		 */

		protected Bapiaddr2 localZiBapiaddr2;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZiBapiaddr2Tracker = false;

		public boolean isZiBapiaddr2Specified() {
			return localZiBapiaddr2Tracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Bapiaddr2
		 */
		public Bapiaddr2 getZiBapiaddr2() {
			return localZiBapiaddr2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZiBapiaddr2
		 */
		public void setZiBapiaddr2(Bapiaddr2 param) {
			localZiBapiaddr2Tracker = param != null;

			this.localZiBapiaddr2 = param;

		}

		/**
		 * field for ZiCustomerIsConsumer
		 */

		protected Char1 localZiCustomerIsConsumer;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZiCustomerIsConsumerTracker = false;

		public boolean isZiCustomerIsConsumerSpecified() {
			return localZiCustomerIsConsumerTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getZiCustomerIsConsumer() {
			return localZiCustomerIsConsumer;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZiCustomerIsConsumer
		 */
		public void setZiCustomerIsConsumer(Char1 param) {
			localZiCustomerIsConsumerTracker = param != null;

			this.localZiCustomerIsConsumer = param;

		}

		/**
		 * field for ZiForceExternalNumberRange
		 */

		protected Char1 localZiForceExternalNumberRange;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZiForceExternalNumberRangeTracker = false;

		public boolean isZiForceExternalNumberRangeSpecified() {
			return localZiForceExternalNumberRangeTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getZiForceExternalNumberRange() {
			return localZiForceExternalNumberRange;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZiForceExternalNumberRange
		 */
		public void setZiForceExternalNumberRange(Char1 param) {
			localZiForceExternalNumberRangeTracker = param != null;

			this.localZiForceExternalNumberRange = param;

		}

		/**
		 * field for ZiFromCustomermaster
		 */

		protected Char1 localZiFromCustomermaster;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZiFromCustomermasterTracker = false;

		public boolean isZiFromCustomermasterSpecified() {
			return localZiFromCustomermasterTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getZiFromCustomermaster() {
			return localZiFromCustomermaster;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZiFromCustomermaster
		 */
		public void setZiFromCustomermaster(Char1 param) {
			localZiFromCustomermasterTracker = param != null;

			this.localZiFromCustomermaster = param;

		}

		/**
		 * field for ZiKna1
		 */

		protected Kna1 localZiKna1;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZiKna1Tracker = false;

		public boolean isZiKna1Specified() {
			return localZiKna1Tracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Kna1
		 */
		public Kna1 getZiKna1() {
			return localZiKna1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZiKna1
		 */
		public void setZiKna1(Kna1 param) {
			localZiKna1Tracker = param != null;

			this.localZiKna1 = param;

		}

		/**
		 * field for ZiKnb1
		 */

		protected Knb1 localZiKnb1;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZiKnb1Tracker = false;

		public boolean isZiKnb1Specified() {
			return localZiKnb1Tracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Knb1
		 */
		public Knb1 getZiKnb1() {
			return localZiKnb1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZiKnb1
		 */
		public void setZiKnb1(Knb1 param) {
			localZiKnb1Tracker = param != null;

			this.localZiKnb1 = param;

		}

		/**
		 * field for ZiKnb1Reference
		 */

		protected Char1 localZiKnb1Reference;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZiKnb1ReferenceTracker = false;

		public boolean isZiKnb1ReferenceSpecified() {
			return localZiKnb1ReferenceTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getZiKnb1Reference() {
			return localZiKnb1Reference;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZiKnb1Reference
		 */
		public void setZiKnb1Reference(Char1 param) {
			localZiKnb1ReferenceTracker = param != null;

			this.localZiKnb1Reference = param;

		}

		/**
		 * field for ZiKnvv
		 */

		protected Knvv localZiKnvv;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZiKnvvTracker = false;

		public boolean isZiKnvvSpecified() {
			return localZiKnvvTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Knvv
		 */
		public Knvv getZiKnvv() {
			return localZiKnvv;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZiKnvv
		 */
		public void setZiKnvv(Knvv param) {
			localZiKnvvTracker = param != null;

			this.localZiKnvv = param;

		}

		/**
		 * field for ZiMaintainAddressByKna1
		 */

		protected Char1 localZiMaintainAddressByKna1;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZiMaintainAddressByKna1Tracker = false;

		public boolean isZiMaintainAddressByKna1Specified() {
			return localZiMaintainAddressByKna1Tracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getZiMaintainAddressByKna1() {
			return localZiMaintainAddressByKna1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZiMaintainAddressByKna1
		 */
		public void setZiMaintainAddressByKna1(Char1 param) {
			localZiMaintainAddressByKna1Tracker = param != null;

			this.localZiMaintainAddressByKna1 = param;

		}

		/**
		 * field for ZiNoBankMasterUpdate
		 */

		protected Char1 localZiNoBankMasterUpdate;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZiNoBankMasterUpdateTracker = false;

		public boolean isZiNoBankMasterUpdateSpecified() {
			return localZiNoBankMasterUpdateTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getZiNoBankMasterUpdate() {
			return localZiNoBankMasterUpdate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZiNoBankMasterUpdate
		 */
		public void setZiNoBankMasterUpdate(Char1 param) {
			localZiNoBankMasterUpdateTracker = param != null;

			this.localZiNoBankMasterUpdate = param;

		}

		/**
		 * field for ZiRaiseNoBte
		 */

		protected Char1 localZiRaiseNoBte;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZiRaiseNoBteTracker = false;

		public boolean isZiRaiseNoBteSpecified() {
			return localZiRaiseNoBteTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getZiRaiseNoBte() {
			return localZiRaiseNoBte;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZiRaiseNoBte
		 */
		public void setZiRaiseNoBte(Char1 param) {
			localZiRaiseNoBteTracker = param != null;

			this.localZiRaiseNoBte = param;

		}

		/**
		 * field for ZpiAddOnData
		 */

		protected CustAddOnData localZpiAddOnData;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZpiAddOnDataTracker = false;

		public boolean isZpiAddOnDataSpecified() {
			return localZpiAddOnDataTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return CustAddOnData
		 */
		public CustAddOnData getZpiAddOnData() {
			return localZpiAddOnData;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZpiAddOnData
		 */
		public void setZpiAddOnData(CustAddOnData param) {
			localZpiAddOnDataTracker = param != null;

			this.localZpiAddOnData = param;

		}

		/**
		 * field for ZpiCamChanged
		 */

		protected Char1 localZpiCamChanged;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZpiCamChangedTracker = false;

		public boolean isZpiCamChangedSpecified() {
			return localZpiCamChangedTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getZpiCamChanged() {
			return localZpiCamChanged;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZpiCamChanged
		 */
		public void setZpiCamChanged(Char1 param) {
			localZpiCamChangedTracker = param != null;

			this.localZpiCamChanged = param;

		}

		/**
		 * field for ZpiPostflag
		 */

		protected Char1 localZpiPostflag;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZpiPostflagTracker = false;

		public boolean isZpiPostflagSpecified() {
			return localZpiPostflagTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getZpiPostflag() {
			return localZpiPostflag;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZpiPostflag
		 */
		public void setZpiPostflag(Char1 param) {
			localZpiPostflagTracker = param != null;

			this.localZpiPostflag = param;

		}

		/**
		 * field for ZtUpdTxt
		 */

		protected TableOfFkuntxt localZtUpdTxt;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtUpdTxtTracker = false;

		public boolean isZtUpdTxtSpecified() {
			return localZtUpdTxtTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFkuntxt
		 */
		public TableOfFkuntxt getZtUpdTxt() {
			return localZtUpdTxt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtUpdTxt
		 */
		public void setZtUpdTxt(TableOfFkuntxt param) {
			localZtUpdTxtTracker = param != null;

			this.localZtUpdTxt = param;

		}

		/**
		 * field for ZtXknas
		 */

		protected TableOfFknas localZtXknas;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtXknasTracker = false;

		public boolean isZtXknasSpecified() {
			return localZtXknasTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknas
		 */
		public TableOfFknas getZtXknas() {
			return localZtXknas;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknas
		 */
		public void setZtXknas(TableOfFknas param) {
			localZtXknasTracker = param != null;

			this.localZtXknas = param;

		}

		/**
		 * field for ZtXknb5
		 */

		protected TableOfFknb5 localZtXknb5;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtXknb5Tracker = false;

		public boolean isZtXknb5Specified() {
			return localZtXknb5Tracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknb5
		 */
		public TableOfFknb5 getZtXknb5() {
			return localZtXknb5;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknb5
		 */
		public void setZtXknb5(TableOfFknb5 param) {
			localZtXknb5Tracker = param != null;

			this.localZtXknb5 = param;

		}

		/**
		 * field for ZtXknbk
		 */

		protected TableOfFknbk localZtXknbk;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtXknbkTracker = false;

		public boolean isZtXknbkSpecified() {
			return localZtXknbkTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknbk
		 */
		public TableOfFknbk getZtXknbk() {
			return localZtXknbk;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknbk
		 */
		public void setZtXknbk(TableOfFknbk param) {
			localZtXknbkTracker = param != null;

			this.localZtXknbk = param;

		}

		/**
		 * field for ZtXknex
		 */

		protected TableOfFknex localZtXknex;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtXknexTracker = false;

		public boolean isZtXknexSpecified() {
			return localZtXknexTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknex
		 */
		public TableOfFknex getZtXknex() {
			return localZtXknex;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknex
		 */
		public void setZtXknex(TableOfFknex param) {
			localZtXknexTracker = param != null;

			this.localZtXknex = param;

		}

		/**
		 * field for ZtXknva
		 */

		protected TableOfFknva localZtXknva;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtXknvaTracker = false;

		public boolean isZtXknvaSpecified() {
			return localZtXknvaTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknva
		 */
		public TableOfFknva getZtXknva() {
			return localZtXknva;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknva
		 */
		public void setZtXknva(TableOfFknva param) {
			localZtXknvaTracker = param != null;

			this.localZtXknva = param;

		}

		/**
		 * field for ZtXknvd
		 */

		protected TableOfFknvd localZtXknvd;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtXknvdTracker = false;

		public boolean isZtXknvdSpecified() {
			return localZtXknvdTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvd
		 */
		public TableOfFknvd getZtXknvd() {
			return localZtXknvd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknvd
		 */
		public void setZtXknvd(TableOfFknvd param) {
			localZtXknvdTracker = param != null;

			this.localZtXknvd = param;

		}

		/**
		 * field for ZtXknvi
		 */

		protected TableOfFknvi localZtXknvi;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtXknviTracker = false;

		public boolean isZtXknviSpecified() {
			return localZtXknviTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvi
		 */
		public TableOfFknvi getZtXknvi() {
			return localZtXknvi;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknvi
		 */
		public void setZtXknvi(TableOfFknvi param) {
			localZtXknviTracker = param != null;

			this.localZtXknvi = param;

		}

		/**
		 * field for ZtXknvk
		 */

		protected TableOfFknvk localZtXknvk;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtXknvkTracker = false;

		public boolean isZtXknvkSpecified() {
			return localZtXknvkTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvk
		 */
		public TableOfFknvk getZtXknvk() {
			return localZtXknvk;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknvk
		 */
		public void setZtXknvk(TableOfFknvk param) {
			localZtXknvkTracker = param != null;

			this.localZtXknvk = param;

		}

		/**
		 * field for ZtXknvl
		 */

		protected TableOfFknvl localZtXknvl;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtXknvlTracker = false;

		public boolean isZtXknvlSpecified() {
			return localZtXknvlTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvl
		 */
		public TableOfFknvl getZtXknvl() {
			return localZtXknvl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknvl
		 */
		public void setZtXknvl(TableOfFknvl param) {
			localZtXknvlTracker = param != null;

			this.localZtXknvl = param;

		}

		/**
		 * field for ZtXknvp
		 */

		protected TableOfFknvp localZtXknvp;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtXknvpTracker = false;

		public boolean isZtXknvpSpecified() {
			return localZtXknvpTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvp
		 */
		public TableOfFknvp getZtXknvp() {
			return localZtXknvp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknvp
		 */
		public void setZtXknvp(TableOfFknvp param) {
			localZtXknvpTracker = param != null;

			this.localZtXknvp = param;

		}

		/**
		 * field for ZtXknza
		 */

		protected TableOfFknza localZtXknza;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtXknzaTracker = false;

		public boolean isZtXknzaSpecified() {
			return localZtXknzaTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknza
		 */
		public TableOfFknza getZtXknza() {
			return localZtXknza;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtXknza
		 */
		public void setZtXknza(TableOfFknza param) {
			localZtXknzaTracker = param != null;

			this.localZtXknza = param;

		}

		/**
		 * field for ZtYknas
		 */

		protected TableOfFknas localZtYknas;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtYknasTracker = false;

		public boolean isZtYknasSpecified() {
			return localZtYknasTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknas
		 */
		public TableOfFknas getZtYknas() {
			return localZtYknas;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknas
		 */
		public void setZtYknas(TableOfFknas param) {
			localZtYknasTracker = param != null;

			this.localZtYknas = param;

		}

		/**
		 * field for ZtYknb5
		 */

		protected TableOfFknb5 localZtYknb5;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtYknb5Tracker = false;

		public boolean isZtYknb5Specified() {
			return localZtYknb5Tracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknb5
		 */
		public TableOfFknb5 getZtYknb5() {
			return localZtYknb5;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknb5
		 */
		public void setZtYknb5(TableOfFknb5 param) {
			localZtYknb5Tracker = param != null;

			this.localZtYknb5 = param;

		}

		/**
		 * field for ZtYknbk
		 */

		protected TableOfFknbk localZtYknbk;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtYknbkTracker = false;

		public boolean isZtYknbkSpecified() {
			return localZtYknbkTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknbk
		 */
		public TableOfFknbk getZtYknbk() {
			return localZtYknbk;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknbk
		 */
		public void setZtYknbk(TableOfFknbk param) {
			localZtYknbkTracker = param != null;

			this.localZtYknbk = param;

		}

		/**
		 * field for ZtYknex
		 */

		protected TableOfFknex localZtYknex;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtYknexTracker = false;

		public boolean isZtYknexSpecified() {
			return localZtYknexTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknex
		 */
		public TableOfFknex getZtYknex() {
			return localZtYknex;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknex
		 */
		public void setZtYknex(TableOfFknex param) {
			localZtYknexTracker = param != null;

			this.localZtYknex = param;

		}

		/**
		 * field for ZtYknva
		 */

		protected TableOfFknva localZtYknva;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtYknvaTracker = false;

		public boolean isZtYknvaSpecified() {
			return localZtYknvaTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknva
		 */
		public TableOfFknva getZtYknva() {
			return localZtYknva;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknva
		 */
		public void setZtYknva(TableOfFknva param) {
			localZtYknvaTracker = param != null;

			this.localZtYknva = param;

		}

		/**
		 * field for ZtYknvd
		 */

		protected TableOfFknvd localZtYknvd;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtYknvdTracker = false;

		public boolean isZtYknvdSpecified() {
			return localZtYknvdTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvd
		 */
		public TableOfFknvd getZtYknvd() {
			return localZtYknvd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknvd
		 */
		public void setZtYknvd(TableOfFknvd param) {
			localZtYknvdTracker = param != null;

			this.localZtYknvd = param;

		}

		/**
		 * field for ZtYknvi
		 */

		protected TableOfFknvi localZtYknvi;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtYknviTracker = false;

		public boolean isZtYknviSpecified() {
			return localZtYknviTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvi
		 */
		public TableOfFknvi getZtYknvi() {
			return localZtYknvi;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknvi
		 */
		public void setZtYknvi(TableOfFknvi param) {
			localZtYknviTracker = param != null;

			this.localZtYknvi = param;

		}

		/**
		 * field for ZtYknvk
		 */

		protected TableOfFknvk localZtYknvk;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtYknvkTracker = false;

		public boolean isZtYknvkSpecified() {
			return localZtYknvkTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvk
		 */
		public TableOfFknvk getZtYknvk() {
			return localZtYknvk;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknvk
		 */
		public void setZtYknvk(TableOfFknvk param) {
			localZtYknvkTracker = param != null;

			this.localZtYknvk = param;

		}

		/**
		 * field for ZtYknvl
		 */

		protected TableOfFknvl localZtYknvl;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtYknvlTracker = false;

		public boolean isZtYknvlSpecified() {
			return localZtYknvlTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvl
		 */
		public TableOfFknvl getZtYknvl() {
			return localZtYknvl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknvl
		 */
		public void setZtYknvl(TableOfFknvl param) {
			localZtYknvlTracker = param != null;

			this.localZtYknvl = param;

		}

		/**
		 * field for ZtYknvp
		 */

		protected TableOfFknvp localZtYknvp;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtYknvpTracker = false;

		public boolean isZtYknvpSpecified() {
			return localZtYknvpTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknvp
		 */
		public TableOfFknvp getZtYknvp() {
			return localZtYknvp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknvp
		 */
		public void setZtYknvp(TableOfFknvp param) {
			localZtYknvpTracker = param != null;

			this.localZtYknvp = param;

		}

		/**
		 * field for ZtYknza
		 */

		protected TableOfFknza localZtYknza;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localZtYknzaTracker = false;

		public boolean isZtYknzaSpecified() {
			return localZtYknzaTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return TableOfFknza
		 */
		public TableOfFknza getZtYknza() {
			return localZtYknza;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            ZtYknza
		 */
		public void setZtYknza(TableOfFknza param) {
			localZtYknzaTracker = param != null;

			this.localZtYknza = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type",
							namespacePrefix + ":ZsdCustomerMaintainAll",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "ZsdCustomerMaintainAll", xmlWriter);
				}

			}
			if (localZiBapiaddr1Tracker) {
				if (localZiBapiaddr1 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiBapiaddr1 cannot be null!!");
				}
				localZiBapiaddr1.serialize(new javax.xml.namespace.QName("",
						"ZiBapiaddr1"), xmlWriter);
			}
			if (localZiBapiaddr2Tracker) {
				if (localZiBapiaddr2 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiBapiaddr2 cannot be null!!");
				}
				localZiBapiaddr2.serialize(new javax.xml.namespace.QName("",
						"ZiBapiaddr2"), xmlWriter);
			}
			if (localZiCustomerIsConsumerTracker) {
				if (localZiCustomerIsConsumer == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiCustomerIsConsumer cannot be null!!");
				}
				localZiCustomerIsConsumer.serialize(
						new javax.xml.namespace.QName("",
								"ZiCustomerIsConsumer"), xmlWriter);
			}
			if (localZiForceExternalNumberRangeTracker) {
				if (localZiForceExternalNumberRange == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiForceExternalNumberRange cannot be null!!");
				}
				localZiForceExternalNumberRange.serialize(
						new javax.xml.namespace.QName("",
								"ZiForceExternalNumberRange"), xmlWriter);
			}
			if (localZiFromCustomermasterTracker) {
				if (localZiFromCustomermaster == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiFromCustomermaster cannot be null!!");
				}
				localZiFromCustomermaster.serialize(
						new javax.xml.namespace.QName("",
								"ZiFromCustomermaster"), xmlWriter);
			}
			if (localZiKna1Tracker) {
				if (localZiKna1 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiKna1 cannot be null!!");
				}
				localZiKna1.serialize(new javax.xml.namespace.QName("",
						"ZiKna1"), xmlWriter);
			}
			if (localZiKnb1Tracker) {
				if (localZiKnb1 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiKnb1 cannot be null!!");
				}
				localZiKnb1.serialize(new javax.xml.namespace.QName("",
						"ZiKnb1"), xmlWriter);
			}
			if (localZiKnb1ReferenceTracker) {
				if (localZiKnb1Reference == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiKnb1Reference cannot be null!!");
				}
				localZiKnb1Reference.serialize(new javax.xml.namespace.QName(
						"", "ZiKnb1Reference"), xmlWriter);
			}
			if (localZiKnvvTracker) {
				if (localZiKnvv == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiKnvv cannot be null!!");
				}
				localZiKnvv.serialize(new javax.xml.namespace.QName("",
						"ZiKnvv"), xmlWriter);
			}
			if (localZiMaintainAddressByKna1Tracker) {
				if (localZiMaintainAddressByKna1 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiMaintainAddressByKna1 cannot be null!!");
				}
				localZiMaintainAddressByKna1.serialize(
						new javax.xml.namespace.QName("",
								"ZiMaintainAddressByKna1"), xmlWriter);
			}
			if (localZiNoBankMasterUpdateTracker) {
				if (localZiNoBankMasterUpdate == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiNoBankMasterUpdate cannot be null!!");
				}
				localZiNoBankMasterUpdate.serialize(
						new javax.xml.namespace.QName("",
								"ZiNoBankMasterUpdate"), xmlWriter);
			}
			if (localZiRaiseNoBteTracker) {
				if (localZiRaiseNoBte == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiRaiseNoBte cannot be null!!");
				}
				localZiRaiseNoBte.serialize(new javax.xml.namespace.QName("",
						"ZiRaiseNoBte"), xmlWriter);
			}
			if (localZpiAddOnDataTracker) {
				if (localZpiAddOnData == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZpiAddOnData cannot be null!!");
				}
				localZpiAddOnData.serialize(new javax.xml.namespace.QName("",
						"ZpiAddOnData"), xmlWriter);
			}
			if (localZpiCamChangedTracker) {
				if (localZpiCamChanged == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZpiCamChanged cannot be null!!");
				}
				localZpiCamChanged.serialize(new javax.xml.namespace.QName("",
						"ZpiCamChanged"), xmlWriter);
			}
			if (localZpiPostflagTracker) {
				if (localZpiPostflag == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZpiPostflag cannot be null!!");
				}
				localZpiPostflag.serialize(new javax.xml.namespace.QName("",
						"ZpiPostflag"), xmlWriter);
			}
			if (localZtUpdTxtTracker) {
				if (localZtUpdTxt == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtUpdTxt cannot be null!!");
				}
				localZtUpdTxt.serialize(new javax.xml.namespace.QName("",
						"ZtUpdTxt"), xmlWriter);
			}
			if (localZtXknasTracker) {
				if (localZtXknas == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknas cannot be null!!");
				}
				localZtXknas.serialize(new javax.xml.namespace.QName("",
						"ZtXknas"), xmlWriter);
			}
			if (localZtXknb5Tracker) {
				if (localZtXknb5 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknb5 cannot be null!!");
				}
				localZtXknb5.serialize(new javax.xml.namespace.QName("",
						"ZtXknb5"), xmlWriter);
			}
			if (localZtXknbkTracker) {
				if (localZtXknbk == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknbk cannot be null!!");
				}
				localZtXknbk.serialize(new javax.xml.namespace.QName("",
						"ZtXknbk"), xmlWriter);
			}
			if (localZtXknexTracker) {
				if (localZtXknex == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknex cannot be null!!");
				}
				localZtXknex.serialize(new javax.xml.namespace.QName("",
						"ZtXknex"), xmlWriter);
			}
			if (localZtXknvaTracker) {
				if (localZtXknva == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknva cannot be null!!");
				}
				localZtXknva.serialize(new javax.xml.namespace.QName("",
						"ZtXknva"), xmlWriter);
			}
			if (localZtXknvdTracker) {
				if (localZtXknvd == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknvd cannot be null!!");
				}
				localZtXknvd.serialize(new javax.xml.namespace.QName("",
						"ZtXknvd"), xmlWriter);
			}
			if (localZtXknviTracker) {
				if (localZtXknvi == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknvi cannot be null!!");
				}
				localZtXknvi.serialize(new javax.xml.namespace.QName("",
						"ZtXknvi"), xmlWriter);
			}
			if (localZtXknvkTracker) {
				if (localZtXknvk == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknvk cannot be null!!");
				}
				localZtXknvk.serialize(new javax.xml.namespace.QName("",
						"ZtXknvk"), xmlWriter);
			}
			if (localZtXknvlTracker) {
				if (localZtXknvl == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknvl cannot be null!!");
				}
				localZtXknvl.serialize(new javax.xml.namespace.QName("",
						"ZtXknvl"), xmlWriter);
			}
			if (localZtXknvpTracker) {
				if (localZtXknvp == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknvp cannot be null!!");
				}
				localZtXknvp.serialize(new javax.xml.namespace.QName("",
						"ZtXknvp"), xmlWriter);
			}
			if (localZtXknzaTracker) {
				if (localZtXknza == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknza cannot be null!!");
				}
				localZtXknza.serialize(new javax.xml.namespace.QName("",
						"ZtXknza"), xmlWriter);
			}
			if (localZtYknasTracker) {
				if (localZtYknas == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknas cannot be null!!");
				}
				localZtYknas.serialize(new javax.xml.namespace.QName("",
						"ZtYknas"), xmlWriter);
			}
			if (localZtYknb5Tracker) {
				if (localZtYknb5 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknb5 cannot be null!!");
				}
				localZtYknb5.serialize(new javax.xml.namespace.QName("",
						"ZtYknb5"), xmlWriter);
			}
			if (localZtYknbkTracker) {
				if (localZtYknbk == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknbk cannot be null!!");
				}
				localZtYknbk.serialize(new javax.xml.namespace.QName("",
						"ZtYknbk"), xmlWriter);
			}
			if (localZtYknexTracker) {
				if (localZtYknex == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknex cannot be null!!");
				}
				localZtYknex.serialize(new javax.xml.namespace.QName("",
						"ZtYknex"), xmlWriter);
			}
			if (localZtYknvaTracker) {
				if (localZtYknva == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknva cannot be null!!");
				}
				localZtYknva.serialize(new javax.xml.namespace.QName("",
						"ZtYknva"), xmlWriter);
			}
			if (localZtYknvdTracker) {
				if (localZtYknvd == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknvd cannot be null!!");
				}
				localZtYknvd.serialize(new javax.xml.namespace.QName("",
						"ZtYknvd"), xmlWriter);
			}
			if (localZtYknviTracker) {
				if (localZtYknvi == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknvi cannot be null!!");
				}
				localZtYknvi.serialize(new javax.xml.namespace.QName("",
						"ZtYknvi"), xmlWriter);
			}
			if (localZtYknvkTracker) {
				if (localZtYknvk == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknvk cannot be null!!");
				}
				localZtYknvk.serialize(new javax.xml.namespace.QName("",
						"ZtYknvk"), xmlWriter);
			}
			if (localZtYknvlTracker) {
				if (localZtYknvl == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknvl cannot be null!!");
				}
				localZtYknvl.serialize(new javax.xml.namespace.QName("",
						"ZtYknvl"), xmlWriter);
			}
			if (localZtYknvpTracker) {
				if (localZtYknvp == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknvp cannot be null!!");
				}
				localZtYknvp.serialize(new javax.xml.namespace.QName("",
						"ZtYknvp"), xmlWriter);
			}
			if (localZtYknzaTracker) {
				if (localZtYknza == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknza cannot be null!!");
				}
				localZtYknza.serialize(new javax.xml.namespace.QName("",
						"ZtYknza"), xmlWriter);
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localZiBapiaddr1Tracker) {
				elementList
						.add(new javax.xml.namespace.QName("", "ZiBapiaddr1"));

				if (localZiBapiaddr1 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiBapiaddr1 cannot be null!!");
				}
				elementList.add(localZiBapiaddr1);
			}
			if (localZiBapiaddr2Tracker) {
				elementList
						.add(new javax.xml.namespace.QName("", "ZiBapiaddr2"));

				if (localZiBapiaddr2 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiBapiaddr2 cannot be null!!");
				}
				elementList.add(localZiBapiaddr2);
			}
			if (localZiCustomerIsConsumerTracker) {
				elementList.add(new javax.xml.namespace.QName("",
						"ZiCustomerIsConsumer"));

				if (localZiCustomerIsConsumer == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiCustomerIsConsumer cannot be null!!");
				}
				elementList.add(localZiCustomerIsConsumer);
			}
			if (localZiForceExternalNumberRangeTracker) {
				elementList.add(new javax.xml.namespace.QName("",
						"ZiForceExternalNumberRange"));

				if (localZiForceExternalNumberRange == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiForceExternalNumberRange cannot be null!!");
				}
				elementList.add(localZiForceExternalNumberRange);
			}
			if (localZiFromCustomermasterTracker) {
				elementList.add(new javax.xml.namespace.QName("",
						"ZiFromCustomermaster"));

				if (localZiFromCustomermaster == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiFromCustomermaster cannot be null!!");
				}
				elementList.add(localZiFromCustomermaster);
			}
			if (localZiKna1Tracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZiKna1"));

				if (localZiKna1 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiKna1 cannot be null!!");
				}
				elementList.add(localZiKna1);
			}
			if (localZiKnb1Tracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZiKnb1"));

				if (localZiKnb1 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiKnb1 cannot be null!!");
				}
				elementList.add(localZiKnb1);
			}
			if (localZiKnb1ReferenceTracker) {
				elementList.add(new javax.xml.namespace.QName("",
						"ZiKnb1Reference"));

				if (localZiKnb1Reference == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiKnb1Reference cannot be null!!");
				}
				elementList.add(localZiKnb1Reference);
			}
			if (localZiKnvvTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZiKnvv"));

				if (localZiKnvv == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiKnvv cannot be null!!");
				}
				elementList.add(localZiKnvv);
			}
			if (localZiMaintainAddressByKna1Tracker) {
				elementList.add(new javax.xml.namespace.QName("",
						"ZiMaintainAddressByKna1"));

				if (localZiMaintainAddressByKna1 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiMaintainAddressByKna1 cannot be null!!");
				}
				elementList.add(localZiMaintainAddressByKna1);
			}
			if (localZiNoBankMasterUpdateTracker) {
				elementList.add(new javax.xml.namespace.QName("",
						"ZiNoBankMasterUpdate"));

				if (localZiNoBankMasterUpdate == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiNoBankMasterUpdate cannot be null!!");
				}
				elementList.add(localZiNoBankMasterUpdate);
			}
			if (localZiRaiseNoBteTracker) {
				elementList.add(new javax.xml.namespace.QName("",
						"ZiRaiseNoBte"));

				if (localZiRaiseNoBte == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZiRaiseNoBte cannot be null!!");
				}
				elementList.add(localZiRaiseNoBte);
			}
			if (localZpiAddOnDataTracker) {
				elementList.add(new javax.xml.namespace.QName("",
						"ZpiAddOnData"));

				if (localZpiAddOnData == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZpiAddOnData cannot be null!!");
				}
				elementList.add(localZpiAddOnData);
			}
			if (localZpiCamChangedTracker) {
				elementList.add(new javax.xml.namespace.QName("",
						"ZpiCamChanged"));

				if (localZpiCamChanged == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZpiCamChanged cannot be null!!");
				}
				elementList.add(localZpiCamChanged);
			}
			if (localZpiPostflagTracker) {
				elementList
						.add(new javax.xml.namespace.QName("", "ZpiPostflag"));

				if (localZpiPostflag == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZpiPostflag cannot be null!!");
				}
				elementList.add(localZpiPostflag);
			}
			if (localZtUpdTxtTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtUpdTxt"));

				if (localZtUpdTxt == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtUpdTxt cannot be null!!");
				}
				elementList.add(localZtUpdTxt);
			}
			if (localZtXknasTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtXknas"));

				if (localZtXknas == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknas cannot be null!!");
				}
				elementList.add(localZtXknas);
			}
			if (localZtXknb5Tracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtXknb5"));

				if (localZtXknb5 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknb5 cannot be null!!");
				}
				elementList.add(localZtXknb5);
			}
			if (localZtXknbkTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtXknbk"));

				if (localZtXknbk == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknbk cannot be null!!");
				}
				elementList.add(localZtXknbk);
			}
			if (localZtXknexTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtXknex"));

				if (localZtXknex == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknex cannot be null!!");
				}
				elementList.add(localZtXknex);
			}
			if (localZtXknvaTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtXknva"));

				if (localZtXknva == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknva cannot be null!!");
				}
				elementList.add(localZtXknva);
			}
			if (localZtXknvdTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtXknvd"));

				if (localZtXknvd == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknvd cannot be null!!");
				}
				elementList.add(localZtXknvd);
			}
			if (localZtXknviTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtXknvi"));

				if (localZtXknvi == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknvi cannot be null!!");
				}
				elementList.add(localZtXknvi);
			}
			if (localZtXknvkTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtXknvk"));

				if (localZtXknvk == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknvk cannot be null!!");
				}
				elementList.add(localZtXknvk);
			}
			if (localZtXknvlTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtXknvl"));

				if (localZtXknvl == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknvl cannot be null!!");
				}
				elementList.add(localZtXknvl);
			}
			if (localZtXknvpTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtXknvp"));

				if (localZtXknvp == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknvp cannot be null!!");
				}
				elementList.add(localZtXknvp);
			}
			if (localZtXknzaTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtXknza"));

				if (localZtXknza == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtXknza cannot be null!!");
				}
				elementList.add(localZtXknza);
			}
			if (localZtYknasTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtYknas"));

				if (localZtYknas == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknas cannot be null!!");
				}
				elementList.add(localZtYknas);
			}
			if (localZtYknb5Tracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtYknb5"));

				if (localZtYknb5 == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknb5 cannot be null!!");
				}
				elementList.add(localZtYknb5);
			}
			if (localZtYknbkTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtYknbk"));

				if (localZtYknbk == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknbk cannot be null!!");
				}
				elementList.add(localZtYknbk);
			}
			if (localZtYknexTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtYknex"));

				if (localZtYknex == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknex cannot be null!!");
				}
				elementList.add(localZtYknex);
			}
			if (localZtYknvaTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtYknva"));

				if (localZtYknva == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknva cannot be null!!");
				}
				elementList.add(localZtYknva);
			}
			if (localZtYknvdTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtYknvd"));

				if (localZtYknvd == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknvd cannot be null!!");
				}
				elementList.add(localZtYknvd);
			}
			if (localZtYknviTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtYknvi"));

				if (localZtYknvi == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknvi cannot be null!!");
				}
				elementList.add(localZtYknvi);
			}
			if (localZtYknvkTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtYknvk"));

				if (localZtYknvk == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknvk cannot be null!!");
				}
				elementList.add(localZtYknvk);
			}
			if (localZtYknvlTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtYknvl"));

				if (localZtYknvl == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknvl cannot be null!!");
				}
				elementList.add(localZtYknvl);
			}
			if (localZtYknvpTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtYknvp"));

				if (localZtYknvp == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknvp cannot be null!!");
				}
				elementList.add(localZtYknvp);
			}
			if (localZtYknzaTracker) {
				elementList.add(new javax.xml.namespace.QName("", "ZtYknza"));

				if (localZtYknza == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"ZtYknza cannot be null!!");
				}
				elementList.add(localZtYknza);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static ZsdCustomerMaintainAll parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				ZsdCustomerMaintainAll object = new ZsdCustomerMaintainAll();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"ZsdCustomerMaintainAll".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (ZsdCustomerMaintainAll) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZiBapiaddr1")
									.equals(reader.getName())) {

						object.setZiBapiaddr1(Bapiaddr1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZiBapiaddr2")
									.equals(reader.getName())) {

						object.setZiBapiaddr2(Bapiaddr2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"ZiCustomerIsConsumer").equals(reader
									.getName())) {

						object.setZiCustomerIsConsumer(Char1.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"ZiForceExternalNumberRange").equals(reader
									.getName())) {

						object.setZiForceExternalNumberRange(Char1.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"ZiFromCustomermaster").equals(reader
									.getName())) {

						object.setZiFromCustomermaster(Char1.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZiKna1")
									.equals(reader.getName())) {

						object.setZiKna1(Kna1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZiKnb1")
									.equals(reader.getName())) {

						object.setZiKnb1(Knb1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"ZiKnb1Reference").equals(reader.getName())) {

						object.setZiKnb1Reference(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZiKnvv")
									.equals(reader.getName())) {

						object.setZiKnvv(Knvv.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"ZiMaintainAddressByKna1").equals(reader
									.getName())) {

						object.setZiMaintainAddressByKna1(Char1.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"ZiNoBankMasterUpdate").equals(reader
									.getName())) {

						object.setZiNoBankMasterUpdate(Char1.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZiRaiseNoBte")
									.equals(reader.getName())) {

						object.setZiRaiseNoBte(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZpiAddOnData")
									.equals(reader.getName())) {

						object.setZpiAddOnData(CustAddOnData.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("",
									"ZpiCamChanged").equals(reader.getName())) {

						object.setZpiCamChanged(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZpiPostflag")
									.equals(reader.getName())) {

						object.setZpiPostflag(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtUpdTxt")
									.equals(reader.getName())) {

						object.setZtUpdTxt(TableOfFkuntxt.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknas")
									.equals(reader.getName())) {

						object.setZtXknas(TableOfFknas.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknb5")
									.equals(reader.getName())) {

						object.setZtXknb5(TableOfFknb5.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknbk")
									.equals(reader.getName())) {

						object.setZtXknbk(TableOfFknbk.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknex")
									.equals(reader.getName())) {

						object.setZtXknex(TableOfFknex.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknva")
									.equals(reader.getName())) {

						object.setZtXknva(TableOfFknva.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknvd")
									.equals(reader.getName())) {

						object.setZtXknvd(TableOfFknvd.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknvi")
									.equals(reader.getName())) {

						object.setZtXknvi(TableOfFknvi.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknvk")
									.equals(reader.getName())) {

						object.setZtXknvk(TableOfFknvk.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknvl")
									.equals(reader.getName())) {

						object.setZtXknvl(TableOfFknvl.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknvp")
									.equals(reader.getName())) {

						object.setZtXknvp(TableOfFknvp.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtXknza")
									.equals(reader.getName())) {

						object.setZtXknza(TableOfFknza.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknas")
									.equals(reader.getName())) {

						object.setZtYknas(TableOfFknas.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknb5")
									.equals(reader.getName())) {

						object.setZtYknb5(TableOfFknb5.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknbk")
									.equals(reader.getName())) {

						object.setZtYknbk(TableOfFknbk.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknex")
									.equals(reader.getName())) {

						object.setZtYknex(TableOfFknex.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknva")
									.equals(reader.getName())) {

						object.setZtYknva(TableOfFknva.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknvd")
									.equals(reader.getName())) {

						object.setZtYknvd(TableOfFknvd.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknvi")
									.equals(reader.getName())) {

						object.setZtYknvi(TableOfFknvi.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknvk")
									.equals(reader.getName())) {

						object.setZtYknvk(TableOfFknvk.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknvl")
									.equals(reader.getName())) {

						object.setZtYknvl(TableOfFknvl.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknvp")
									.equals(reader.getName())) {

						object.setZtYknvp(TableOfFknvp.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "ZtYknza")
									.equals(reader.getName())) {

						object.setZtYknza(TableOfFknza.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Fknvp implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * Fknvp Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Mandt
		 */

		protected Clnt3 localMandt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Clnt3
		 */
		public Clnt3 getMandt() {
			return localMandt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mandt
		 */
		public void setMandt(Clnt3 param) {

			this.localMandt = param;

		}

		/**
		 * field for Kunnr
		 */

		protected Char10 localKunnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKunnr() {
			return localKunnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kunnr
		 */
		public void setKunnr(Char10 param) {

			this.localKunnr = param;

		}

		/**
		 * field for Vkorg
		 */

		protected Char4 localVkorg;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getVkorg() {
			return localVkorg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vkorg
		 */
		public void setVkorg(Char4 param) {

			this.localVkorg = param;

		}

		/**
		 * field for Vtweg
		 */

		protected Char2 localVtweg;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getVtweg() {
			return localVtweg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vtweg
		 */
		public void setVtweg(Char2 param) {

			this.localVtweg = param;

		}

		/**
		 * field for Spart
		 */

		protected Char2 localSpart;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getSpart() {
			return localSpart;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Spart
		 */
		public void setSpart(Char2 param) {

			this.localSpart = param;

		}

		/**
		 * field for Parvw
		 */

		protected Char2 localParvw;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getParvw() {
			return localParvw;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Parvw
		 */
		public void setParvw(Char2 param) {

			this.localParvw = param;

		}

		/**
		 * field for Parza
		 */

		protected Numeric3 localParza;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric3
		 */
		public Numeric3 getParza() {
			return localParza;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Parza
		 */
		public void setParza(Numeric3 param) {

			this.localParza = param;

		}

		/**
		 * field for Kunn2
		 */

		protected Char10 localKunn2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKunn2() {
			return localKunn2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kunn2
		 */
		public void setKunn2(Char10 param) {

			this.localKunn2 = param;

		}

		/**
		 * field for Lifnr
		 */

		protected Char10 localLifnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getLifnr() {
			return localLifnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Lifnr
		 */
		public void setLifnr(Char10 param) {

			this.localLifnr = param;

		}

		/**
		 * field for Pernr
		 */

		protected Numeric8 localPernr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric8
		 */
		public Numeric8 getPernr() {
			return localPernr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pernr
		 */
		public void setPernr(Numeric8 param) {

			this.localPernr = param;

		}

		/**
		 * field for Parnr
		 */

		protected Numeric10 localParnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric10
		 */
		public Numeric10 getParnr() {
			return localParnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Parnr
		 */
		public void setParnr(Numeric10 param) {

			this.localParnr = param;

		}

		/**
		 * field for Knref
		 */

		protected Char30 localKnref;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char30
		 */
		public Char30 getKnref() {
			return localKnref;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Knref
		 */
		public void setKnref(Char30 param) {

			this.localKnref = param;

		}

		/**
		 * field for Defpa
		 */

		protected Char1 localDefpa;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getDefpa() {
			return localDefpa;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Defpa
		 */
		public void setDefpa(Char1 param) {

			this.localDefpa = param;

		}

		/**
		 * field for Kz
		 */

		protected Char1 localKz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getKz() {
			return localKz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kz
		 */
		public void setKz(Char1 param) {

			this.localKz = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Fknvp", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Fknvp", xmlWriter);
				}

			}

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			localMandt.serialize(new javax.xml.namespace.QName("", "Mandt"),
					xmlWriter);

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			localKunnr.serialize(new javax.xml.namespace.QName("", "Kunnr"),
					xmlWriter);

			if (localVkorg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vkorg cannot be null!!");
			}
			localVkorg.serialize(new javax.xml.namespace.QName("", "Vkorg"),
					xmlWriter);

			if (localVtweg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vtweg cannot be null!!");
			}
			localVtweg.serialize(new javax.xml.namespace.QName("", "Vtweg"),
					xmlWriter);

			if (localSpart == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Spart cannot be null!!");
			}
			localSpart.serialize(new javax.xml.namespace.QName("", "Spart"),
					xmlWriter);

			if (localParvw == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parvw cannot be null!!");
			}
			localParvw.serialize(new javax.xml.namespace.QName("", "Parvw"),
					xmlWriter);

			if (localParza == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parza cannot be null!!");
			}
			localParza.serialize(new javax.xml.namespace.QName("", "Parza"),
					xmlWriter);

			if (localKunn2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunn2 cannot be null!!");
			}
			localKunn2.serialize(new javax.xml.namespace.QName("", "Kunn2"),
					xmlWriter);

			if (localLifnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lifnr cannot be null!!");
			}
			localLifnr.serialize(new javax.xml.namespace.QName("", "Lifnr"),
					xmlWriter);

			if (localPernr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pernr cannot be null!!");
			}
			localPernr.serialize(new javax.xml.namespace.QName("", "Pernr"),
					xmlWriter);

			if (localParnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parnr cannot be null!!");
			}
			localParnr.serialize(new javax.xml.namespace.QName("", "Parnr"),
					xmlWriter);

			if (localKnref == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Knref cannot be null!!");
			}
			localKnref.serialize(new javax.xml.namespace.QName("", "Knref"),
					xmlWriter);

			if (localDefpa == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Defpa cannot be null!!");
			}
			localDefpa.serialize(new javax.xml.namespace.QName("", "Defpa"),
					xmlWriter);

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			localKz.serialize(new javax.xml.namespace.QName("", "Kz"),
					xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "Mandt"));

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			elementList.add(localMandt);

			elementList.add(new javax.xml.namespace.QName("", "Kunnr"));

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			elementList.add(localKunnr);

			elementList.add(new javax.xml.namespace.QName("", "Vkorg"));

			if (localVkorg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vkorg cannot be null!!");
			}
			elementList.add(localVkorg);

			elementList.add(new javax.xml.namespace.QName("", "Vtweg"));

			if (localVtweg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vtweg cannot be null!!");
			}
			elementList.add(localVtweg);

			elementList.add(new javax.xml.namespace.QName("", "Spart"));

			if (localSpart == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Spart cannot be null!!");
			}
			elementList.add(localSpart);

			elementList.add(new javax.xml.namespace.QName("", "Parvw"));

			if (localParvw == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parvw cannot be null!!");
			}
			elementList.add(localParvw);

			elementList.add(new javax.xml.namespace.QName("", "Parza"));

			if (localParza == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parza cannot be null!!");
			}
			elementList.add(localParza);

			elementList.add(new javax.xml.namespace.QName("", "Kunn2"));

			if (localKunn2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunn2 cannot be null!!");
			}
			elementList.add(localKunn2);

			elementList.add(new javax.xml.namespace.QName("", "Lifnr"));

			if (localLifnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lifnr cannot be null!!");
			}
			elementList.add(localLifnr);

			elementList.add(new javax.xml.namespace.QName("", "Pernr"));

			if (localPernr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pernr cannot be null!!");
			}
			elementList.add(localPernr);

			elementList.add(new javax.xml.namespace.QName("", "Parnr"));

			if (localParnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parnr cannot be null!!");
			}
			elementList.add(localParnr);

			elementList.add(new javax.xml.namespace.QName("", "Knref"));

			if (localKnref == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Knref cannot be null!!");
			}
			elementList.add(localKnref);

			elementList.add(new javax.xml.namespace.QName("", "Defpa"));

			if (localDefpa == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Defpa cannot be null!!");
			}
			elementList.add(localDefpa);

			elementList.add(new javax.xml.namespace.QName("", "Kz"));

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			elementList.add(localKz);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Fknvp parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Fknvp object = new Fknvp();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"Fknvp".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Fknvp) ExtensionMapper.getTypeObject(
										nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mandt")
									.equals(reader.getName())) {

						object.setMandt(Clnt3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kunnr")
									.equals(reader.getName())) {

						object.setKunnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vkorg")
									.equals(reader.getName())) {

						object.setVkorg(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vtweg")
									.equals(reader.getName())) {

						object.setVtweg(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Spart")
									.equals(reader.getName())) {

						object.setSpart(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Parvw")
									.equals(reader.getName())) {

						object.setParvw(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Parza")
									.equals(reader.getName())) {

						object.setParza(Numeric3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kunn2")
									.equals(reader.getName())) {

						object.setKunn2(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Lifnr")
									.equals(reader.getName())) {

						object.setLifnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pernr")
									.equals(reader.getName())) {

						object.setPernr(Numeric8.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Parnr")
									.equals(reader.getName())) {

						object.setParnr(Numeric10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Knref")
									.equals(reader.getName())) {

						object.setKnref(Char30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Defpa")
									.equals(reader.getName())) {

						object.setDefpa(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kz")
									.equals(reader.getName())) {

						object.setKz(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Fknb5 implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * Fknb5 Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Mandt
		 */

		protected Clnt3 localMandt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Clnt3
		 */
		public Clnt3 getMandt() {
			return localMandt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mandt
		 */
		public void setMandt(Clnt3 param) {

			this.localMandt = param;

		}

		/**
		 * field for Kunnr
		 */

		protected Char10 localKunnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKunnr() {
			return localKunnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kunnr
		 */
		public void setKunnr(Char10 param) {

			this.localKunnr = param;

		}

		/**
		 * field for Bukrs
		 */

		protected Char4 localBukrs;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getBukrs() {
			return localBukrs;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bukrs
		 */
		public void setBukrs(Char4 param) {

			this.localBukrs = param;

		}

		/**
		 * field for Maber
		 */

		protected Char2 localMaber;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getMaber() {
			return localMaber;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Maber
		 */
		public void setMaber(Char2 param) {

			this.localMaber = param;

		}

		/**
		 * field for Mahna
		 */

		protected Char4 localMahna;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getMahna() {
			return localMahna;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mahna
		 */
		public void setMahna(Char4 param) {

			this.localMahna = param;

		}

		/**
		 * field for Mansp
		 */

		protected Char1 localMansp;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getMansp() {
			return localMansp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mansp
		 */
		public void setMansp(Char1 param) {

			this.localMansp = param;

		}

		/**
		 * field for Madat
		 */

		protected Date localMadat;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getMadat() {
			return localMadat;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Madat
		 */
		public void setMadat(Date param) {

			this.localMadat = param;

		}

		/**
		 * field for Mahns
		 */

		protected Numeric1 localMahns;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric1
		 */
		public Numeric1 getMahns() {
			return localMahns;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mahns
		 */
		public void setMahns(Numeric1 param) {

			this.localMahns = param;

		}

		/**
		 * field for Knrma
		 */

		protected Char10 localKnrma;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKnrma() {
			return localKnrma;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Knrma
		 */
		public void setKnrma(Char10 param) {

			this.localKnrma = param;

		}

		/**
		 * field for Gmvdt
		 */

		protected Date localGmvdt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getGmvdt() {
			return localGmvdt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Gmvdt
		 */
		public void setGmvdt(Date param) {

			this.localGmvdt = param;

		}

		/**
		 * field for Busab
		 */

		protected Char2 localBusab;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getBusab() {
			return localBusab;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Busab
		 */
		public void setBusab(Char2 param) {

			this.localBusab = param;

		}

		/**
		 * field for Kz
		 */

		protected Char1 localKz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getKz() {
			return localKz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kz
		 */
		public void setKz(Char1 param) {

			this.localKz = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Fknb5", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Fknb5", xmlWriter);
				}

			}

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			localMandt.serialize(new javax.xml.namespace.QName("", "Mandt"),
					xmlWriter);

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			localKunnr.serialize(new javax.xml.namespace.QName("", "Kunnr"),
					xmlWriter);

			if (localBukrs == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bukrs cannot be null!!");
			}
			localBukrs.serialize(new javax.xml.namespace.QName("", "Bukrs"),
					xmlWriter);

			if (localMaber == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Maber cannot be null!!");
			}
			localMaber.serialize(new javax.xml.namespace.QName("", "Maber"),
					xmlWriter);

			if (localMahna == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mahna cannot be null!!");
			}
			localMahna.serialize(new javax.xml.namespace.QName("", "Mahna"),
					xmlWriter);

			if (localMansp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mansp cannot be null!!");
			}
			localMansp.serialize(new javax.xml.namespace.QName("", "Mansp"),
					xmlWriter);

			if (localMadat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Madat cannot be null!!");
			}
			localMadat.serialize(new javax.xml.namespace.QName("", "Madat"),
					xmlWriter);

			if (localMahns == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mahns cannot be null!!");
			}
			localMahns.serialize(new javax.xml.namespace.QName("", "Mahns"),
					xmlWriter);

			if (localKnrma == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Knrma cannot be null!!");
			}
			localKnrma.serialize(new javax.xml.namespace.QName("", "Knrma"),
					xmlWriter);

			if (localGmvdt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Gmvdt cannot be null!!");
			}
			localGmvdt.serialize(new javax.xml.namespace.QName("", "Gmvdt"),
					xmlWriter);

			if (localBusab == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Busab cannot be null!!");
			}
			localBusab.serialize(new javax.xml.namespace.QName("", "Busab"),
					xmlWriter);

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			localKz.serialize(new javax.xml.namespace.QName("", "Kz"),
					xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "Mandt"));

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			elementList.add(localMandt);

			elementList.add(new javax.xml.namespace.QName("", "Kunnr"));

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			elementList.add(localKunnr);

			elementList.add(new javax.xml.namespace.QName("", "Bukrs"));

			if (localBukrs == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bukrs cannot be null!!");
			}
			elementList.add(localBukrs);

			elementList.add(new javax.xml.namespace.QName("", "Maber"));

			if (localMaber == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Maber cannot be null!!");
			}
			elementList.add(localMaber);

			elementList.add(new javax.xml.namespace.QName("", "Mahna"));

			if (localMahna == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mahna cannot be null!!");
			}
			elementList.add(localMahna);

			elementList.add(new javax.xml.namespace.QName("", "Mansp"));

			if (localMansp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mansp cannot be null!!");
			}
			elementList.add(localMansp);

			elementList.add(new javax.xml.namespace.QName("", "Madat"));

			if (localMadat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Madat cannot be null!!");
			}
			elementList.add(localMadat);

			elementList.add(new javax.xml.namespace.QName("", "Mahns"));

			if (localMahns == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mahns cannot be null!!");
			}
			elementList.add(localMahns);

			elementList.add(new javax.xml.namespace.QName("", "Knrma"));

			if (localKnrma == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Knrma cannot be null!!");
			}
			elementList.add(localKnrma);

			elementList.add(new javax.xml.namespace.QName("", "Gmvdt"));

			if (localGmvdt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Gmvdt cannot be null!!");
			}
			elementList.add(localGmvdt);

			elementList.add(new javax.xml.namespace.QName("", "Busab"));

			if (localBusab == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Busab cannot be null!!");
			}
			elementList.add(localBusab);

			elementList.add(new javax.xml.namespace.QName("", "Kz"));

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			elementList.add(localKz);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Fknb5 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Fknb5 object = new Fknb5();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"Fknb5".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Fknb5) ExtensionMapper.getTypeObject(
										nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mandt")
									.equals(reader.getName())) {

						object.setMandt(Clnt3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kunnr")
									.equals(reader.getName())) {

						object.setKunnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bukrs")
									.equals(reader.getName())) {

						object.setBukrs(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Maber")
									.equals(reader.getName())) {

						object.setMaber(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mahna")
									.equals(reader.getName())) {

						object.setMahna(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mansp")
									.equals(reader.getName())) {

						object.setMansp(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Madat")
									.equals(reader.getName())) {

						object.setMadat(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mahns")
									.equals(reader.getName())) {

						object.setMahns(Numeric1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Knrma")
									.equals(reader.getName())) {

						object.setKnrma(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Gmvdt")
									.equals(reader.getName())) {

						object.setGmvdt(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Busab")
									.equals(reader.getName())) {

						object.setBusab(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kz")
									.equals(reader.getName())) {

						object.setKz(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char18 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char18", "ns2");

		/**
		 * field for Char18
		 */

		protected java.lang.String localChar18;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar18() {
			return localChar18;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char18
		 */
		public void setChar18(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 18)) {
				this.localChar18 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar18.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char18", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char18", xmlWriter);
				}
			}

			if (localChar18 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char18 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar18);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar18) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char18 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char18 returnValue = new Char18();

				returnValue
						.setChar18(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char18 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char18.Factory.fromString(content, namespaceUri);
				} else {
					return Char18.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char18 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char18 object = new Char18();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char18"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar18(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Decimal110 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "decimal11.0", "ns2");

		/**
		 * field for Decimal110
		 */

		protected java.math.BigDecimal localDecimal110;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getDecimal110() {
			return localDecimal110;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Decimal110
		 */
		public void setDecimal110(java.math.BigDecimal param) {

			java.lang.String totalDigitsDecimal = org.apache.axis2.databinding.utils.ConverterUtil
					.convertToStandardDecimalNotation("11").toString();
			if (org.apache.axis2.databinding.utils.ConverterUtil.compare(param,
					totalDigitsDecimal) > 0) {
				this.localDecimal110 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localDecimal110.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":decimal11.0", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "decimal11.0", xmlWriter);
				}
			}

			if (localDecimal110 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"decimal11.0 cannot be null !!");

			} else {

				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localDecimal110));

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDecimal110) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Decimal110 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Decimal110 returnValue = new Decimal110();

				returnValue
						.setDecimal110(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(value));

				return returnValue;
			}

			public static Decimal110 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Decimal110.Factory.fromString(content, namespaceUri);
				} else {
					return Decimal110.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Decimal110 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Decimal110 object = new Decimal110();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "decimal11.0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setDecimal110(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToDecimal(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class TableOfFknvk implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * TableOfFknvk Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Item This was an Array!
		 */

		protected Fknvk[] localItem;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localItemTracker = false;

		public boolean isItemSpecified() {
			return localItemTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Fknvk[]
		 */
		public Fknvk[] getItem() {
			return localItem;
		}

		/**
		 * validate the array for Item
		 */
		protected void validateItem(Fknvk[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Item
		 */
		public void setItem(Fknvk[] param) {

			validateItem(param);

			localItemTracker = param != null;

			this.localItem = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            Fknvk
		 */
		public void addItem(Fknvk param) {
			if (localItem == null) {
				localItem = new Fknvk[] {};
			}

			// update the setting tracker
			localItemTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localItem);
			list.add(param);
			this.localItem = (Fknvk[]) list.toArray(new Fknvk[list.size()]);

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":TableOfFknvk",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "TableOfFknvk", xmlWriter);
				}

			}
			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {
						if (localItem[i] != null) {
							localItem[i].serialize(
									new javax.xml.namespace.QName("", "item"),
									xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {

						if (localItem[i] != null) {
							elementList.add(new javax.xml.namespace.QName("",
									"item"));
							elementList.add(localItem[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static TableOfFknvk parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				TableOfFknvk object = new TableOfFknvk();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"TableOfFknvk".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (TableOfFknvk) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "item")
									.equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(Fknvk.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("", "item")
										.equals(reader.getName())) {
									list1.add(Fknvk.Factory.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setItem((Fknvk[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(Fknvk.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class TableOfFknvl implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * TableOfFknvl Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Item This was an Array!
		 */

		protected Fknvl[] localItem;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localItemTracker = false;

		public boolean isItemSpecified() {
			return localItemTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Fknvl[]
		 */
		public Fknvl[] getItem() {
			return localItem;
		}

		/**
		 * validate the array for Item
		 */
		protected void validateItem(Fknvl[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Item
		 */
		public void setItem(Fknvl[] param) {

			validateItem(param);

			localItemTracker = param != null;

			this.localItem = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            Fknvl
		 */
		public void addItem(Fknvl param) {
			if (localItem == null) {
				localItem = new Fknvl[] {};
			}

			// update the setting tracker
			localItemTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localItem);
			list.add(param);
			this.localItem = (Fknvl[]) list.toArray(new Fknvl[list.size()]);

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":TableOfFknvl",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "TableOfFknvl", xmlWriter);
				}

			}
			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {
						if (localItem[i] != null) {
							localItem[i].serialize(
									new javax.xml.namespace.QName("", "item"),
									xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {

						if (localItem[i] != null) {
							elementList.add(new javax.xml.namespace.QName("",
									"item"));
							elementList.add(localItem[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static TableOfFknvl parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				TableOfFknvl object = new TableOfFknvl();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"TableOfFknvl".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (TableOfFknvl) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "item")
									.equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(Fknvl.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("", "item")
										.equals(reader.getName())) {
									list1.add(Fknvl.Factory.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setItem((Fknvl[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(Fknvl.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Decimal10 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "decimal1.0", "ns2");

		/**
		 * field for Decimal10
		 */

		protected java.math.BigDecimal localDecimal10;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getDecimal10() {
			return localDecimal10;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Decimal10
		 */
		public void setDecimal10(java.math.BigDecimal param) {

			java.lang.String totalDigitsDecimal = org.apache.axis2.databinding.utils.ConverterUtil
					.convertToStandardDecimalNotation("1").toString();
			if (org.apache.axis2.databinding.utils.ConverterUtil.compare(param,
					totalDigitsDecimal) > 0) {
				this.localDecimal10 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localDecimal10.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":decimal1.0", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "decimal1.0", xmlWriter);
				}
			}

			if (localDecimal10 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"decimal1.0 cannot be null !!");

			} else {

				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localDecimal10));

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDecimal10) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Decimal10 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Decimal10 returnValue = new Decimal10();

				returnValue
						.setDecimal10(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(value));

				return returnValue;
			}

			public static Decimal10 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Decimal10.Factory.fromString(content, namespaceUri);
				} else {
					return Decimal10.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Decimal10 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Decimal10 object = new Decimal10();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "decimal1.0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setDecimal10(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToDecimal(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char7 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char7", "ns2");

		/**
		 * field for Char7
		 */

		protected java.lang.String localChar7;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar7() {
			return localChar7;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char7
		 */
		public void setChar7(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 7)) {
				this.localChar7 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar7.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char7", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char7", xmlWriter);
				}
			}

			if (localChar7 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char7 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar7);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar7) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char7 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char7 returnValue = new Char7();

				returnValue
						.setChar7(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char7 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char7.Factory.fromString(content, namespaceUri);
				} else {
					return Char7.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char7 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char7 object = new Char7();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char7"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar7(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char6 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char6", "ns2");

		/**
		 * field for Char6
		 */

		protected java.lang.String localChar6;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar6() {
			return localChar6;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char6
		 */
		public void setChar6(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 6)) {
				this.localChar6 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar6.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char6", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char6", xmlWriter);
				}
			}

			if (localChar6 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char6 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar6);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar6) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char6 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char6 returnValue = new Char6();

				returnValue
						.setChar6(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char6 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char6.Factory.fromString(content, namespaceUri);
				} else {
					return Char6.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char6 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char6 object = new Char6();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char6"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar6(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class TableOfFknb5 implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * TableOfFknb5 Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Item This was an Array!
		 */

		protected Fknb5[] localItem;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localItemTracker = false;

		public boolean isItemSpecified() {
			return localItemTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Fknb5[]
		 */
		public Fknb5[] getItem() {
			return localItem;
		}

		/**
		 * validate the array for Item
		 */
		protected void validateItem(Fknb5[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Item
		 */
		public void setItem(Fknb5[] param) {

			validateItem(param);

			localItemTracker = param != null;

			this.localItem = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            Fknb5
		 */
		public void addItem(Fknb5 param) {
			if (localItem == null) {
				localItem = new Fknb5[] {};
			}

			// update the setting tracker
			localItemTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localItem);
			list.add(param);
			this.localItem = (Fknb5[]) list.toArray(new Fknb5[list.size()]);

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":TableOfFknb5",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "TableOfFknb5", xmlWriter);
				}

			}
			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {
						if (localItem[i] != null) {
							localItem[i].serialize(
									new javax.xml.namespace.QName("", "item"),
									xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {

						if (localItem[i] != null) {
							elementList.add(new javax.xml.namespace.QName("",
									"item"));
							elementList.add(localItem[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static TableOfFknb5 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				TableOfFknb5 object = new TableOfFknb5();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"TableOfFknb5".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (TableOfFknb5) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "item")
									.equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(Fknb5.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("", "item")
										.equals(reader.getName())) {
									list1.add(Fknb5.Factory.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setItem((Fknb5[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(Fknb5.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char9 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char9", "ns2");

		/**
		 * field for Char9
		 */

		protected java.lang.String localChar9;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar9() {
			return localChar9;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char9
		 */
		public void setChar9(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 9)) {
				this.localChar9 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar9.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char9", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char9", xmlWriter);
				}
			}

			if (localChar9 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char9 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar9);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar9) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char9 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char9 returnValue = new Char9();

				returnValue
						.setChar9(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char9 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char9.Factory.fromString(content, namespaceUri);
				} else {
					return Char9.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char9 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char9 object = new Char9();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char9"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar9(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class TableOfFknvp implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * TableOfFknvp Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Item This was an Array!
		 */

		protected Fknvp[] localItem;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localItemTracker = false;

		public boolean isItemSpecified() {
			return localItemTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Fknvp[]
		 */
		public Fknvp[] getItem() {
			return localItem;
		}

		/**
		 * validate the array for Item
		 */
		protected void validateItem(Fknvp[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Item
		 */
		public void setItem(Fknvp[] param) {

			validateItem(param);

			localItemTracker = param != null;

			this.localItem = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            Fknvp
		 */
		public void addItem(Fknvp param) {
			if (localItem == null) {
				localItem = new Fknvp[] {};
			}

			// update the setting tracker
			localItemTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localItem);
			list.add(param);
			this.localItem = (Fknvp[]) list.toArray(new Fknvp[list.size()]);

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":TableOfFknvp",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "TableOfFknvp", xmlWriter);
				}

			}
			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {
						if (localItem[i] != null) {
							localItem[i].serialize(
									new javax.xml.namespace.QName("", "item"),
									xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {

						if (localItem[i] != null) {
							elementList.add(new javax.xml.namespace.QName("",
									"item"));
							elementList.add(localItem[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static TableOfFknvp parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				TableOfFknvp object = new TableOfFknvp();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"TableOfFknvp".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (TableOfFknvp) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "item")
									.equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(Fknvp.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("", "item")
										.equals(reader.getName())) {
									list1.add(Fknvp.Factory.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setItem((Fknvp[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(Fknvp.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char8 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char8", "ns2");

		/**
		 * field for Char8
		 */

		protected java.lang.String localChar8;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar8() {
			return localChar8;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char8
		 */
		public void setChar8(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 8)) {
				this.localChar8 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar8.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char8", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char8", xmlWriter);
				}
			}

			if (localChar8 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char8 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar8);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar8) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char8 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char8 returnValue = new Char8();

				returnValue
						.setChar8(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char8 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char8.Factory.fromString(content, namespaceUri);
				} else {
					return Char8.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char8 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char8 object = new Char8();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char8"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar8(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Date implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "date", "ns2");

		/**
		 * field for Date
		 */

		protected java.lang.String localDate;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getDate() {
			return localDate;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Date
		 */
		public void setDate(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches(
							"\\d\\d\\d\\d-\\d\\d-\\d\\d")) {
				this.localDate = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localDate.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":date", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "date", xmlWriter);
				}
			}

			if (localDate == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"date cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localDate);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDate) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Date fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Date returnValue = new Date();

				returnValue
						.setDate(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Date fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Date.Factory.fromString(content, namespaceUri);
				} else {
					return Date.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Date parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Date object = new Date();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "date"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setDate(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class CustAddOnData implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * CustAddOnData Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Changed
		 */

		protected Char1 localChanged;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getChanged() {
			return localChanged;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Changed
		 */
		public void setChanged(Char1 param) {

			this.localChanged = param;

		}

		/**
		 * field for Kunnr
		 */

		protected Char10 localKunnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKunnr() {
			return localKunnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kunnr
		 */
		public void setKunnr(Char10 param) {

			this.localKunnr = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":CustAddOnData",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "CustAddOnData", xmlWriter);
				}

			}

			if (localChanged == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Changed cannot be null!!");
			}
			localChanged.serialize(
					new javax.xml.namespace.QName("", "Changed"), xmlWriter);

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			localKunnr.serialize(new javax.xml.namespace.QName("", "Kunnr"),
					xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "Changed"));

			if (localChanged == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Changed cannot be null!!");
			}
			elementList.add(localChanged);

			elementList.add(new javax.xml.namespace.QName("", "Kunnr"));

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			elementList.add(localKunnr);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static CustAddOnData parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				CustAddOnData object = new CustAddOnData();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"CustAddOnData".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (CustAddOnData) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Changed")
									.equals(reader.getName())) {

						object.setChanged(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kunnr")
									.equals(reader.getName())) {

						object.setKunnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class TableOfFknvd implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * TableOfFknvd Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Item This was an Array!
		 */

		protected Fknvd[] localItem;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localItemTracker = false;

		public boolean isItemSpecified() {
			return localItemTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Fknvd[]
		 */
		public Fknvd[] getItem() {
			return localItem;
		}

		/**
		 * validate the array for Item
		 */
		protected void validateItem(Fknvd[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Item
		 */
		public void setItem(Fknvd[] param) {

			validateItem(param);

			localItemTracker = param != null;

			this.localItem = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            Fknvd
		 */
		public void addItem(Fknvd param) {
			if (localItem == null) {
				localItem = new Fknvd[] {};
			}

			// update the setting tracker
			localItemTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localItem);
			list.add(param);
			this.localItem = (Fknvd[]) list.toArray(new Fknvd[list.size()]);

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":TableOfFknvd",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "TableOfFknvd", xmlWriter);
				}

			}
			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {
						if (localItem[i] != null) {
							localItem[i].serialize(
									new javax.xml.namespace.QName("", "item"),
									xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {

						if (localItem[i] != null) {
							elementList.add(new javax.xml.namespace.QName("",
									"item"));
							elementList.add(localItem[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static TableOfFknvd parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				TableOfFknvd object = new TableOfFknvd();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"TableOfFknvd".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (TableOfFknvd) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "item")
									.equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(Fknvd.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("", "item")
										.equals(reader.getName())) {
									list1.add(Fknvd.Factory.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setItem((Fknvd[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(Fknvd.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Unit3 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "unit3", "ns2");

		/**
		 * field for Unit3
		 */

		protected java.lang.String localUnit3;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getUnit3() {
			return localUnit3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Unit3
		 */
		public void setUnit3(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 3)) {
				this.localUnit3 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localUnit3.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":unit3", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "unit3", xmlWriter);
				}
			}

			if (localUnit3 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"unit3 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localUnit3);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localUnit3) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Unit3 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Unit3 returnValue = new Unit3();

				returnValue
						.setUnit3(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Unit3 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Unit3.Factory.fromString(content, namespaceUri);
				} else {
					return Unit3.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Unit3 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Unit3 object = new Unit3();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "unit3"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setUnit3(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class TableOfFknvi implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * TableOfFknvi Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Item This was an Array!
		 */

		protected Fknvi[] localItem;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localItemTracker = false;

		public boolean isItemSpecified() {
			return localItemTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Fknvi[]
		 */
		public Fknvi[] getItem() {
			return localItem;
		}

		/**
		 * validate the array for Item
		 */
		protected void validateItem(Fknvi[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Item
		 */
		public void setItem(Fknvi[] param) {

			validateItem(param);

			localItemTracker = param != null;

			this.localItem = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            Fknvi
		 */
		public void addItem(Fknvi param) {
			if (localItem == null) {
				localItem = new Fknvi[] {};
			}

			// update the setting tracker
			localItemTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localItem);
			list.add(param);
			this.localItem = (Fknvi[]) list.toArray(new Fknvi[list.size()]);

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":TableOfFknvi",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "TableOfFknvi", xmlWriter);
				}

			}
			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {
						if (localItem[i] != null) {
							localItem[i].serialize(
									new javax.xml.namespace.QName("", "item"),
									xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {

						if (localItem[i] != null) {
							elementList.add(new javax.xml.namespace.QName("",
									"item"));
							elementList.add(localItem[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static TableOfFknvi parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				TableOfFknvi object = new TableOfFknvi();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"TableOfFknvi".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (TableOfFknvi) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "item")
									.equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(Fknvi.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("", "item")
										.equals(reader.getName())) {
									list1.add(Fknvi.Factory.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setItem((Fknvi[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(Fknvi.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char1 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char1", "ns2");

		/**
		 * field for Char1
		 */

		protected java.lang.String localChar1;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar1() {
			return localChar1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char1
		 */
		public void setChar1(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 1)) {
				this.localChar1 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar1.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char1", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char1", xmlWriter);
				}
			}

			if (localChar1 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char1 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar1);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar1) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char1 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char1 returnValue = new Char1();

				returnValue
						.setChar1(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char1.Factory.fromString(content, namespaceUri);
				} else {
					return Char1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char1 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char1 object = new Char1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char1"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar1(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class RfcExceptionMessageNumber implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:soap:functions:mc-style",
				"RfcException.Message.Number", "ns1");

		/**
		 * field for RfcExceptionMessageNumber
		 */

		protected java.lang.String localRfcExceptionMessageNumber;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getRfcExceptionMessageNumber() {
			return localRfcExceptionMessageNumber;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RfcExceptionMessageNumber
		 */
		public void setRfcExceptionMessageNumber(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("\\d*")) {
				this.localRfcExceptionMessageNumber = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localRfcExceptionMessageNumber.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix
									+ ":RfcException.Message.Number", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "RfcException.Message.Number", xmlWriter);
				}
			}

			if (localRfcExceptionMessageNumber == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"RfcException.Message.Number cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localRfcExceptionMessageNumber);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localRfcExceptionMessageNumber) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static RfcExceptionMessageNumber fromString(
					java.lang.String value, java.lang.String namespaceURI) {
				RfcExceptionMessageNumber returnValue = new RfcExceptionMessageNumber();

				returnValue
						.setRfcExceptionMessageNumber(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static RfcExceptionMessageNumber fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return RfcExceptionMessageNumber.Factory.fromString(
							content, namespaceUri);
				} else {
					return RfcExceptionMessageNumber.Factory.fromString(
							content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static RfcExceptionMessageNumber parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				RfcExceptionMessageNumber object = new RfcExceptionMessageNumber();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: "
													+ "RfcException.Message.Number"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setRfcExceptionMessageNumber(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class TableOfFknex implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * TableOfFknex Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Item This was an Array!
		 */

		protected Fknex[] localItem;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localItemTracker = false;

		public boolean isItemSpecified() {
			return localItemTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Fknex[]
		 */
		public Fknex[] getItem() {
			return localItem;
		}

		/**
		 * validate the array for Item
		 */
		protected void validateItem(Fknex[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Item
		 */
		public void setItem(Fknex[] param) {

			validateItem(param);

			localItemTracker = param != null;

			this.localItem = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            Fknex
		 */
		public void addItem(Fknex param) {
			if (localItem == null) {
				localItem = new Fknex[] {};
			}

			// update the setting tracker
			localItemTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localItem);
			list.add(param);
			this.localItem = (Fknex[]) list.toArray(new Fknex[list.size()]);

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":TableOfFknex",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "TableOfFknex", xmlWriter);
				}

			}
			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {
						if (localItem[i] != null) {
							localItem[i].serialize(
									new javax.xml.namespace.QName("", "item"),
									xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {

						if (localItem[i] != null) {
							elementList.add(new javax.xml.namespace.QName("",
									"item"));
							elementList.add(localItem[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static TableOfFknex parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				TableOfFknex object = new TableOfFknex();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"TableOfFknex".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (TableOfFknex) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "item")
									.equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(Fknex.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("", "item")
										.equals(reader.getName())) {
									list1.add(Fknex.Factory.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setItem((Fknex[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(Fknex.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char5 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char5", "ns2");

		/**
		 * field for Char5
		 */

		protected java.lang.String localChar5;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar5() {
			return localChar5;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char5
		 */
		public void setChar5(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 5)) {
				this.localChar5 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar5.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char5", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char5", xmlWriter);
				}
			}

			if (localChar5 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char5 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar5);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar5) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char5 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char5 returnValue = new Char5();

				returnValue
						.setChar5(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char5 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char5.Factory.fromString(content, namespaceUri);
				} else {
					return Char5.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char5 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char5 object = new Char5();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char5"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar5(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char4 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char4", "ns2");

		/**
		 * field for Char4
		 */

		protected java.lang.String localChar4;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar4() {
			return localChar4;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char4
		 */
		public void setChar4(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 4)) {
				this.localChar4 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar4.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char4", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char4", xmlWriter);
				}
			}

			if (localChar4 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char4 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar4);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar4) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char4 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char4 returnValue = new Char4();

				returnValue
						.setChar4(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char4 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char4.Factory.fromString(content, namespaceUri);
				} else {
					return Char4.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char4 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char4 object = new Char4();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char4"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar4(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char3 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char3", "ns2");

		/**
		 * field for Char3
		 */

		protected java.lang.String localChar3;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar3() {
			return localChar3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char3
		 */
		public void setChar3(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 3)) {
				this.localChar3 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar3.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char3", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char3", xmlWriter);
				}
			}

			if (localChar3 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char3 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar3);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar3) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char3 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char3 returnValue = new Char3();

				returnValue
						.setChar3(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char3 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char3.Factory.fromString(content, namespaceUri);
				} else {
					return Char3.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char3 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char3 object = new Char3();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char3"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar3(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char2 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char2", "ns2");

		/**
		 * field for Char2
		 */

		protected java.lang.String localChar2;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar2() {
			return localChar2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char2
		 */
		public void setChar2(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 2)) {
				this.localChar2 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar2.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char2", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char2", xmlWriter);
				}
			}

			if (localChar2 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char2 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar2);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar2) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char2 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char2 returnValue = new Char2();

				returnValue
						.setChar2(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char2 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char2.Factory.fromString(content, namespaceUri);
				} else {
					return Char2.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char2 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char2 object = new Char2();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char2"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar2(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char40 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char40", "ns2");

		/**
		 * field for Char40
		 */

		protected java.lang.String localChar40;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar40() {
			return localChar40;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char40
		 */
		public void setChar40(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 40)) {
				this.localChar40 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar40.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char40", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char40", xmlWriter);
				}
			}

			if (localChar40 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char40 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar40);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar40) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char40 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char40 returnValue = new Char40();

				returnValue
						.setChar40(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char40 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char40.Factory.fromString(content, namespaceUri);
				} else {
					return Char40.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char40 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char40 object = new Char40();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char40"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar40(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class TableOfFknas implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * TableOfFknas Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Item This was an Array!
		 */

		protected Fknas[] localItem;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localItemTracker = false;

		public boolean isItemSpecified() {
			return localItemTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Fknas[]
		 */
		public Fknas[] getItem() {
			return localItem;
		}

		/**
		 * validate the array for Item
		 */
		protected void validateItem(Fknas[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Item
		 */
		public void setItem(Fknas[] param) {

			validateItem(param);

			localItemTracker = param != null;

			this.localItem = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            Fknas
		 */
		public void addItem(Fknas param) {
			if (localItem == null) {
				localItem = new Fknas[] {};
			}

			// update the setting tracker
			localItemTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localItem);
			list.add(param);
			this.localItem = (Fknas[]) list.toArray(new Fknas[list.size()]);

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":TableOfFknas",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "TableOfFknas", xmlWriter);
				}

			}
			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {
						if (localItem[i] != null) {
							localItem[i].serialize(
									new javax.xml.namespace.QName("", "item"),
									xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {

						if (localItem[i] != null) {
							elementList.add(new javax.xml.namespace.QName("",
									"item"));
							elementList.add(localItem[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static TableOfFknas parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				TableOfFknas object = new TableOfFknas();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"TableOfFknas".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (TableOfFknas) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "item")
									.equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(Fknas.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("", "item")
										.equals(reader.getName())) {
									list1.add(Fknas.Factory.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setItem((Fknas[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(Fknas.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char241 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char241", "ns2");

		/**
		 * field for Char241
		 */

		protected java.lang.String localChar241;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar241() {
			return localChar241;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char241
		 */
		public void setChar241(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 241)) {
				this.localChar241 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar241.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char241", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char241", xmlWriter);
				}
			}

			if (localChar241 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char241 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar241);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar241) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char241 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char241 returnValue = new Char241();

				returnValue
						.setChar241(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char241 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char241.Factory.fromString(content, namespaceUri);
				} else {
					return Char241.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char241 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char241 object = new Char241();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char241"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar241(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Clnt3 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "clnt3", "ns2");

		/**
		 * field for Clnt3
		 */

		protected java.lang.String localClnt3;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getClnt3() {
			return localClnt3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Clnt3
		 */
		public void setClnt3(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 3)) {
				this.localClnt3 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localClnt3.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":clnt3", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "clnt3", xmlWriter);
				}
			}

			if (localClnt3 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"clnt3 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localClnt3);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localClnt3) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Clnt3 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Clnt3 returnValue = new Clnt3();

				returnValue
						.setClnt3(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Clnt3 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Clnt3.Factory.fromString(content, namespaceUri);
				} else {
					return Clnt3.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Clnt3 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Clnt3 object = new Clnt3();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "clnt3"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setClnt3(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char80 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char80", "ns2");

		/**
		 * field for Char80
		 */

		protected java.lang.String localChar80;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar80() {
			return localChar80;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char80
		 */
		public void setChar80(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 80)) {
				this.localChar80 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar80.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char80", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char80", xmlWriter);
				}
			}

			if (localChar80 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char80 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar80);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar80) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char80 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char80 returnValue = new Char80();

				returnValue
						.setChar80(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char80 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char80.Factory.fromString(content, namespaceUri);
				} else {
					return Char80.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char80 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char80 object = new Char80();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char80"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar80(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Cuky5 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "cuky5", "ns2");

		/**
		 * field for Cuky5
		 */

		protected java.lang.String localCuky5;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getCuky5() {
			return localCuky5;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Cuky5
		 */
		public void setCuky5(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 5)) {
				this.localCuky5 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localCuky5.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":cuky5", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "cuky5", xmlWriter);
				}
			}

			if (localCuky5 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"cuky5 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localCuky5);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCuky5) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Cuky5 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Cuky5 returnValue = new Cuky5();

				returnValue
						.setCuky5(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Cuky5 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Cuky5.Factory.fromString(content, namespaceUri);
				} else {
					return Cuky5.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Cuky5 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Cuky5 object = new Cuky5();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "cuky5"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setCuky5(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Fknbk implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * Fknbk Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Mandt
		 */

		protected Clnt3 localMandt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Clnt3
		 */
		public Clnt3 getMandt() {
			return localMandt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mandt
		 */
		public void setMandt(Clnt3 param) {

			this.localMandt = param;

		}

		/**
		 * field for Kunnr
		 */

		protected Char10 localKunnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKunnr() {
			return localKunnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kunnr
		 */
		public void setKunnr(Char10 param) {

			this.localKunnr = param;

		}

		/**
		 * field for Banks
		 */

		protected Char3 localBanks;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getBanks() {
			return localBanks;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Banks
		 */
		public void setBanks(Char3 param) {

			this.localBanks = param;

		}

		/**
		 * field for Bankl
		 */

		protected Char15 localBankl;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char15
		 */
		public Char15 getBankl() {
			return localBankl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bankl
		 */
		public void setBankl(Char15 param) {

			this.localBankl = param;

		}

		/**
		 * field for Bankn
		 */

		protected Char18 localBankn;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char18
		 */
		public Char18 getBankn() {
			return localBankn;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bankn
		 */
		public void setBankn(Char18 param) {

			this.localBankn = param;

		}

		/**
		 * field for Bkont
		 */

		protected Char2 localBkont;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getBkont() {
			return localBkont;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bkont
		 */
		public void setBkont(Char2 param) {

			this.localBkont = param;

		}

		/**
		 * field for Bvtyp
		 */

		protected Char4 localBvtyp;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getBvtyp() {
			return localBvtyp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bvtyp
		 */
		public void setBvtyp(Char4 param) {

			this.localBvtyp = param;

		}

		/**
		 * field for Xezer
		 */

		protected Char1 localXezer;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getXezer() {
			return localXezer;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Xezer
		 */
		public void setXezer(Char1 param) {

			this.localXezer = param;

		}

		/**
		 * field for Bkref
		 */

		protected Char20 localBkref;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char20
		 */
		public Char20 getBkref() {
			return localBkref;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bkref
		 */
		public void setBkref(Char20 param) {

			this.localBkref = param;

		}

		/**
		 * field for Koinh
		 */

		protected Char60 localKoinh;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char60
		 */
		public Char60 getKoinh() {
			return localKoinh;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Koinh
		 */
		public void setKoinh(Char60 param) {

			this.localKoinh = param;

		}

		/**
		 * field for EbppAccname
		 */

		protected Char40 localEbppAccname;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getEbppAccname() {
			return localEbppAccname;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            EbppAccname
		 */
		public void setEbppAccname(Char40 param) {

			this.localEbppAccname = param;

		}

		/**
		 * field for EbppBvstatus
		 */

		protected Char1 localEbppBvstatus;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getEbppBvstatus() {
			return localEbppBvstatus;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            EbppBvstatus
		 */
		public void setEbppBvstatus(Char1 param) {

			this.localEbppBvstatus = param;

		}

		/**
		 * field for Kovon
		 */

		protected Date localKovon;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getKovon() {
			return localKovon;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kovon
		 */
		public void setKovon(Date param) {

			this.localKovon = param;

		}

		/**
		 * field for Kobis
		 */

		protected Date localKobis;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getKobis() {
			return localKobis;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kobis
		 */
		public void setKobis(Date param) {

			this.localKobis = param;

		}

		/**
		 * field for Kz
		 */

		protected Char1 localKz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getKz() {
			return localKz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kz
		 */
		public void setKz(Char1 param) {

			this.localKz = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Fknbk", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Fknbk", xmlWriter);
				}

			}

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			localMandt.serialize(new javax.xml.namespace.QName("", "Mandt"),
					xmlWriter);

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			localKunnr.serialize(new javax.xml.namespace.QName("", "Kunnr"),
					xmlWriter);

			if (localBanks == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Banks cannot be null!!");
			}
			localBanks.serialize(new javax.xml.namespace.QName("", "Banks"),
					xmlWriter);

			if (localBankl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bankl cannot be null!!");
			}
			localBankl.serialize(new javax.xml.namespace.QName("", "Bankl"),
					xmlWriter);

			if (localBankn == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bankn cannot be null!!");
			}
			localBankn.serialize(new javax.xml.namespace.QName("", "Bankn"),
					xmlWriter);

			if (localBkont == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bkont cannot be null!!");
			}
			localBkont.serialize(new javax.xml.namespace.QName("", "Bkont"),
					xmlWriter);

			if (localBvtyp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bvtyp cannot be null!!");
			}
			localBvtyp.serialize(new javax.xml.namespace.QName("", "Bvtyp"),
					xmlWriter);

			if (localXezer == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xezer cannot be null!!");
			}
			localXezer.serialize(new javax.xml.namespace.QName("", "Xezer"),
					xmlWriter);

			if (localBkref == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bkref cannot be null!!");
			}
			localBkref.serialize(new javax.xml.namespace.QName("", "Bkref"),
					xmlWriter);

			if (localKoinh == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Koinh cannot be null!!");
			}
			localKoinh.serialize(new javax.xml.namespace.QName("", "Koinh"),
					xmlWriter);

			if (localEbppAccname == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"EbppAccname cannot be null!!");
			}
			localEbppAccname.serialize(new javax.xml.namespace.QName("",
					"EbppAccname"), xmlWriter);

			if (localEbppBvstatus == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"EbppBvstatus cannot be null!!");
			}
			localEbppBvstatus.serialize(new javax.xml.namespace.QName("",
					"EbppBvstatus"), xmlWriter);

			if (localKovon == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kovon cannot be null!!");
			}
			localKovon.serialize(new javax.xml.namespace.QName("", "Kovon"),
					xmlWriter);

			if (localKobis == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kobis cannot be null!!");
			}
			localKobis.serialize(new javax.xml.namespace.QName("", "Kobis"),
					xmlWriter);

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			localKz.serialize(new javax.xml.namespace.QName("", "Kz"),
					xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "Mandt"));

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			elementList.add(localMandt);

			elementList.add(new javax.xml.namespace.QName("", "Kunnr"));

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			elementList.add(localKunnr);

			elementList.add(new javax.xml.namespace.QName("", "Banks"));

			if (localBanks == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Banks cannot be null!!");
			}
			elementList.add(localBanks);

			elementList.add(new javax.xml.namespace.QName("", "Bankl"));

			if (localBankl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bankl cannot be null!!");
			}
			elementList.add(localBankl);

			elementList.add(new javax.xml.namespace.QName("", "Bankn"));

			if (localBankn == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bankn cannot be null!!");
			}
			elementList.add(localBankn);

			elementList.add(new javax.xml.namespace.QName("", "Bkont"));

			if (localBkont == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bkont cannot be null!!");
			}
			elementList.add(localBkont);

			elementList.add(new javax.xml.namespace.QName("", "Bvtyp"));

			if (localBvtyp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bvtyp cannot be null!!");
			}
			elementList.add(localBvtyp);

			elementList.add(new javax.xml.namespace.QName("", "Xezer"));

			if (localXezer == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xezer cannot be null!!");
			}
			elementList.add(localXezer);

			elementList.add(new javax.xml.namespace.QName("", "Bkref"));

			if (localBkref == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bkref cannot be null!!");
			}
			elementList.add(localBkref);

			elementList.add(new javax.xml.namespace.QName("", "Koinh"));

			if (localKoinh == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Koinh cannot be null!!");
			}
			elementList.add(localKoinh);

			elementList.add(new javax.xml.namespace.QName("", "EbppAccname"));

			if (localEbppAccname == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"EbppAccname cannot be null!!");
			}
			elementList.add(localEbppAccname);

			elementList.add(new javax.xml.namespace.QName("", "EbppBvstatus"));

			if (localEbppBvstatus == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"EbppBvstatus cannot be null!!");
			}
			elementList.add(localEbppBvstatus);

			elementList.add(new javax.xml.namespace.QName("", "Kovon"));

			if (localKovon == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kovon cannot be null!!");
			}
			elementList.add(localKovon);

			elementList.add(new javax.xml.namespace.QName("", "Kobis"));

			if (localKobis == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kobis cannot be null!!");
			}
			elementList.add(localKobis);

			elementList.add(new javax.xml.namespace.QName("", "Kz"));

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			elementList.add(localKz);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Fknbk parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Fknbk object = new Fknbk();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"Fknbk".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Fknbk) ExtensionMapper.getTypeObject(
										nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mandt")
									.equals(reader.getName())) {

						object.setMandt(Clnt3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kunnr")
									.equals(reader.getName())) {

						object.setKunnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Banks")
									.equals(reader.getName())) {

						object.setBanks(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bankl")
									.equals(reader.getName())) {

						object.setBankl(Char15.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bankn")
									.equals(reader.getName())) {

						object.setBankn(Char18.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bkont")
									.equals(reader.getName())) {

						object.setBkont(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bvtyp")
									.equals(reader.getName())) {

						object.setBvtyp(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Xezer")
									.equals(reader.getName())) {

						object.setXezer(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bkref")
									.equals(reader.getName())) {

						object.setBkref(Char20.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Koinh")
									.equals(reader.getName())) {

						object.setKoinh(Char60.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "EbppAccname")
									.equals(reader.getName())) {

						object.setEbppAccname(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "EbppBvstatus")
									.equals(reader.getName())) {

						object.setEbppBvstatus(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kovon")
									.equals(reader.getName())) {

						object.setKovon(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kobis")
									.equals(reader.getName())) {

						object.setKobis(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kz")
									.equals(reader.getName())) {

						object.setKz(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class TableOfFkuntxt implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * TableOfFkuntxt Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Item This was an Array!
		 */

		protected Fkuntxt[] localItem;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localItemTracker = false;

		public boolean isItemSpecified() {
			return localItemTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Fkuntxt[]
		 */
		public Fkuntxt[] getItem() {
			return localItem;
		}

		/**
		 * validate the array for Item
		 */
		protected void validateItem(Fkuntxt[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Item
		 */
		public void setItem(Fkuntxt[] param) {

			validateItem(param);

			localItemTracker = param != null;

			this.localItem = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            Fkuntxt
		 */
		public void addItem(Fkuntxt param) {
			if (localItem == null) {
				localItem = new Fkuntxt[] {};
			}

			// update the setting tracker
			localItemTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localItem);
			list.add(param);
			this.localItem = (Fkuntxt[]) list.toArray(new Fkuntxt[list.size()]);

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":TableOfFkuntxt",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "TableOfFkuntxt", xmlWriter);
				}

			}
			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {
						if (localItem[i] != null) {
							localItem[i].serialize(
									new javax.xml.namespace.QName("", "item"),
									xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {

						if (localItem[i] != null) {
							elementList.add(new javax.xml.namespace.QName("",
									"item"));
							elementList.add(localItem[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static TableOfFkuntxt parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				TableOfFkuntxt object = new TableOfFkuntxt();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"TableOfFkuntxt".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (TableOfFkuntxt) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "item")
									.equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(Fkuntxt.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("", "item")
										.equals(reader.getName())) {
									list1.add(Fkuntxt.Factory.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setItem((Fkuntxt[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(Fkuntxt.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char31 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char31", "ns2");

		/**
		 * field for Char31
		 */

		protected java.lang.String localChar31;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar31() {
			return localChar31;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char31
		 */
		public void setChar31(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 31)) {
				this.localChar31 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar31.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char31", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char31", xmlWriter);
				}
			}

			if (localChar31 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char31 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar31);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar31) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char31 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char31 returnValue = new Char31();

				returnValue
						.setChar31(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char31 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char31.Factory.fromString(content, namespaceUri);
				} else {
					return Char31.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char31 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char31 object = new Char31();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char31"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar31(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ZsdCustomerMaintainAllRfcExceptions implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:soap:functions:mc-style",
				"ZsdCustomerMaintainAll.RfcExceptions", "ns1");

		/**
		 * field for ZsdCustomerMaintainAllRfcExceptions
		 */

		protected java.lang.String localZsdCustomerMaintainAllRfcExceptions;

		private static java.util.HashMap _table_ = new java.util.HashMap();

		// Constructor

		protected ZsdCustomerMaintainAllRfcExceptions(java.lang.String value,
				boolean isRegisterValue) {
			localZsdCustomerMaintainAllRfcExceptions = value;
			if (isRegisterValue) {

				_table_.put(localZsdCustomerMaintainAllRfcExceptions, this);

			}

		}

		public static final java.lang.String _CompanyCodeNotUnique = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("CompanyCodeNotUnique");

		public static final java.lang.String _DunningDataNotValid = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("DunningDataNotValid");

		public static final java.lang.String _TaxDataNotValid = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("TaxDataNotValid");

		public static final java.lang.String _AccountGroupNotValid = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("AccountGroupNotValid");

		public static final java.lang.String _ParnrInvalid = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("ParnrInvalid");

		public static final java.lang.String _Kna1Incomplete = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("Kna1Incomplete");

		public static final java.lang.String _KnvvIncomplete = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("KnvvIncomplete");

		public static final java.lang.String _NumberRangeNotExtern = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("NumberRangeNotExtern");

		public static final java.lang.String _BankAddressInvalid = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("BankAddressInvalid");

		public static final java.lang.String _CamError = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("CamError");

		public static final java.lang.String _InsertUpdateConflict = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("InsertUpdateConflict");

		public static final java.lang.String _ClientError = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("ClientError");

		public static final java.lang.String _Knb1ReferenceInvalid = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("Knb1ReferenceInvalid");

		public static final java.lang.String _NumberNotInRange = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("NumberNotInRange");

		public static final java.lang.String _NumberRangeNotIntern = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("NumberRangeNotIntern");

		public static final java.lang.String _NoAuthority = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("NoAuthority");

		public static final java.lang.String _NumberAssignmentError = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("NumberAssignmentError");

		public static final java.lang.String _SalesAreaNotUnique = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("SalesAreaNotUnique");

		public static final java.lang.String _SalesAreaNotValid = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("SalesAreaNotValid");

		public static final java.lang.String _Knb1Incomplete = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("Knb1Incomplete");

		public static final java.lang.String _Knb5Incomplete = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("Knb5Incomplete");

		public static final java.lang.String _KunnrNotUnique = org.apache.axis2.databinding.utils.ConverterUtil
				.convertToString("KunnrNotUnique");

		public static final ZsdCustomerMaintainAllRfcExceptions CompanyCodeNotUnique = new ZsdCustomerMaintainAllRfcExceptions(
				_CompanyCodeNotUnique, true);

		public static final ZsdCustomerMaintainAllRfcExceptions DunningDataNotValid = new ZsdCustomerMaintainAllRfcExceptions(
				_DunningDataNotValid, true);

		public static final ZsdCustomerMaintainAllRfcExceptions TaxDataNotValid = new ZsdCustomerMaintainAllRfcExceptions(
				_TaxDataNotValid, true);

		public static final ZsdCustomerMaintainAllRfcExceptions AccountGroupNotValid = new ZsdCustomerMaintainAllRfcExceptions(
				_AccountGroupNotValid, true);

		public static final ZsdCustomerMaintainAllRfcExceptions ParnrInvalid = new ZsdCustomerMaintainAllRfcExceptions(
				_ParnrInvalid, true);

		public static final ZsdCustomerMaintainAllRfcExceptions Kna1Incomplete = new ZsdCustomerMaintainAllRfcExceptions(
				_Kna1Incomplete, true);

		public static final ZsdCustomerMaintainAllRfcExceptions KnvvIncomplete = new ZsdCustomerMaintainAllRfcExceptions(
				_KnvvIncomplete, true);

		public static final ZsdCustomerMaintainAllRfcExceptions NumberRangeNotExtern = new ZsdCustomerMaintainAllRfcExceptions(
				_NumberRangeNotExtern, true);

		public static final ZsdCustomerMaintainAllRfcExceptions BankAddressInvalid = new ZsdCustomerMaintainAllRfcExceptions(
				_BankAddressInvalid, true);

		public static final ZsdCustomerMaintainAllRfcExceptions CamError = new ZsdCustomerMaintainAllRfcExceptions(
				_CamError, true);

		public static final ZsdCustomerMaintainAllRfcExceptions InsertUpdateConflict = new ZsdCustomerMaintainAllRfcExceptions(
				_InsertUpdateConflict, true);

		public static final ZsdCustomerMaintainAllRfcExceptions ClientError = new ZsdCustomerMaintainAllRfcExceptions(
				_ClientError, true);

		public static final ZsdCustomerMaintainAllRfcExceptions Knb1ReferenceInvalid = new ZsdCustomerMaintainAllRfcExceptions(
				_Knb1ReferenceInvalid, true);

		public static final ZsdCustomerMaintainAllRfcExceptions NumberNotInRange = new ZsdCustomerMaintainAllRfcExceptions(
				_NumberNotInRange, true);

		public static final ZsdCustomerMaintainAllRfcExceptions NumberRangeNotIntern = new ZsdCustomerMaintainAllRfcExceptions(
				_NumberRangeNotIntern, true);

		public static final ZsdCustomerMaintainAllRfcExceptions NoAuthority = new ZsdCustomerMaintainAllRfcExceptions(
				_NoAuthority, true);

		public static final ZsdCustomerMaintainAllRfcExceptions NumberAssignmentError = new ZsdCustomerMaintainAllRfcExceptions(
				_NumberAssignmentError, true);

		public static final ZsdCustomerMaintainAllRfcExceptions SalesAreaNotUnique = new ZsdCustomerMaintainAllRfcExceptions(
				_SalesAreaNotUnique, true);

		public static final ZsdCustomerMaintainAllRfcExceptions SalesAreaNotValid = new ZsdCustomerMaintainAllRfcExceptions(
				_SalesAreaNotValid, true);

		public static final ZsdCustomerMaintainAllRfcExceptions Knb1Incomplete = new ZsdCustomerMaintainAllRfcExceptions(
				_Knb1Incomplete, true);

		public static final ZsdCustomerMaintainAllRfcExceptions Knb5Incomplete = new ZsdCustomerMaintainAllRfcExceptions(
				_Knb5Incomplete, true);

		public static final ZsdCustomerMaintainAllRfcExceptions KunnrNotUnique = new ZsdCustomerMaintainAllRfcExceptions(
				_KunnrNotUnique, true);

		public java.lang.String getValue() {
			return localZsdCustomerMaintainAllRfcExceptions;
		}

		public boolean equals(java.lang.Object obj) {
			return (obj == this);
		}

		public int hashCode() {
			return toString().hashCode();
		}

		public java.lang.String toString() {

			return localZsdCustomerMaintainAllRfcExceptions.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix
									+ ":ZsdCustomerMaintainAll.RfcExceptions",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "ZsdCustomerMaintainAll.RfcExceptions",
							xmlWriter);
				}
			}

			if (localZsdCustomerMaintainAllRfcExceptions == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"ZsdCustomerMaintainAll.RfcExceptions cannot be null !!");

			} else {

				xmlWriter
						.writeCharacters(localZsdCustomerMaintainAllRfcExceptions);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localZsdCustomerMaintainAllRfcExceptions) },
					null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static ZsdCustomerMaintainAllRfcExceptions fromValue(
					java.lang.String value)
					throws java.lang.IllegalArgumentException {
				ZsdCustomerMaintainAllRfcExceptions enumeration = (ZsdCustomerMaintainAllRfcExceptions)

				_table_.get(value);

				if ((enumeration == null)
						&& !((value == null) || (value.equals("")))) {
					throw new java.lang.IllegalArgumentException();
				}
				return enumeration;
			}

			public static ZsdCustomerMaintainAllRfcExceptions fromString(
					java.lang.String value, java.lang.String namespaceURI)
					throws java.lang.IllegalArgumentException {
				try {

					return fromValue(org.apache.axis2.databinding.utils.ConverterUtil
							.convertToString(value));

				} catch (java.lang.Exception e) {
					throw new java.lang.IllegalArgumentException();
				}
			}

			public static ZsdCustomerMaintainAllRfcExceptions fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return ZsdCustomerMaintainAllRfcExceptions.Factory
							.fromString(content, namespaceUri);
				} else {
					return ZsdCustomerMaintainAllRfcExceptions.Factory
							.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static ZsdCustomerMaintainAllRfcExceptions parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				ZsdCustomerMaintainAllRfcExceptions object = null;
				// initialize a hash map to keep values
				java.util.Map attributeMap = new java.util.HashMap();
				java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							nillableValue = reader
									.getAttributeValue(
											"http://www.w3.org/2001/XMLSchema-instance",
											"nil");
							if ("true".equals(nillableValue)
									|| "1".equals(nillableValue)) {
								throw new org.apache.axis2.databinding.ADBException(
										"The element: "
												+ "ZsdCustomerMaintainAll.RfcExceptions"
												+ "  cannot be null");
							}

							java.lang.String content = reader.getElementText();

							if (content.indexOf(":") > 0) {
								// this seems to be a Qname so find the
								// namespace and send
								prefix = content.substring(0,
										content.indexOf(":"));
								namespaceuri = reader.getNamespaceURI(prefix);
								object = ZsdCustomerMaintainAllRfcExceptions.Factory
										.fromString(content, namespaceuri);
							} else {
								// this seems to be not a qname send and empty
								// namespace incase of it is
								// check is done in fromString method
								object = ZsdCustomerMaintainAllRfcExceptions.Factory
										.fromString(content, "");
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char30 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char30", "ns2");

		/**
		 * field for Char30
		 */

		protected java.lang.String localChar30;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar30() {
			return localChar30;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char30
		 */
		public void setChar30(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 30)) {
				this.localChar30 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar30.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char30", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char30", xmlWriter);
				}
			}

			if (localChar30 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char30 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar30);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar30) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char30 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char30 returnValue = new Char30();

				returnValue
						.setChar30(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char30 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char30.Factory.fromString(content, namespaceUri);
				} else {
					return Char30.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char30 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char30 object = new Char30();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char30"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar30(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Bapiaddr2 implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * Bapiaddr2 Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for PersNo
		 */

		protected Char10 localPersNo;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getPersNo() {
			return localPersNo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PersNo
		 */
		public void setPersNo(Char10 param) {

			this.localPersNo = param;

		}

		/**
		 * field for AddrNo
		 */

		protected Char10 localAddrNo;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getAddrNo() {
			return localAddrNo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AddrNo
		 */
		public void setAddrNo(Char10 param) {

			this.localAddrNo = param;

		}

		/**
		 * field for TitleP
		 */

		protected Char30 localTitleP;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char30
		 */
		public Char30 getTitleP() {
			return localTitleP;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TitleP
		 */
		public void setTitleP(Char30 param) {

			this.localTitleP = param;

		}

		/**
		 * field for Firstname
		 */

		protected Char40 localFirstname;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getFirstname() {
			return localFirstname;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Firstname
		 */
		public void setFirstname(Char40 param) {

			this.localFirstname = param;

		}

		/**
		 * field for Lastname
		 */

		protected Char40 localLastname;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getLastname() {
			return localLastname;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Lastname
		 */
		public void setLastname(Char40 param) {

			this.localLastname = param;

		}

		/**
		 * field for BirthName
		 */

		protected Char40 localBirthName;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getBirthName() {
			return localBirthName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            BirthName
		 */
		public void setBirthName(Char40 param) {

			this.localBirthName = param;

		}

		/**
		 * field for Middlename
		 */

		protected Char40 localMiddlename;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getMiddlename() {
			return localMiddlename;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Middlename
		 */
		public void setMiddlename(Char40 param) {

			this.localMiddlename = param;

		}

		/**
		 * field for Secondname
		 */

		protected Char40 localSecondname;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getSecondname() {
			return localSecondname;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Secondname
		 */
		public void setSecondname(Char40 param) {

			this.localSecondname = param;

		}

		/**
		 * field for Fullname
		 */

		protected Char80 localFullname;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char80
		 */
		public Char80 getFullname() {
			return localFullname;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Fullname
		 */
		public void setFullname(Char80 param) {

			this.localFullname = param;

		}

		/**
		 * field for FullnameX
		 */

		protected Char1 localFullnameX;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getFullnameX() {
			return localFullnameX;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FullnameX
		 */
		public void setFullnameX(Char1 param) {

			this.localFullnameX = param;

		}

		/**
		 * field for TitleAca1
		 */

		protected Char20 localTitleAca1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char20
		 */
		public Char20 getTitleAca1() {
			return localTitleAca1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TitleAca1
		 */
		public void setTitleAca1(Char20 param) {

			this.localTitleAca1 = param;

		}

		/**
		 * field for TitleAca2
		 */

		protected Char20 localTitleAca2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char20
		 */
		public Char20 getTitleAca2() {
			return localTitleAca2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TitleAca2
		 */
		public void setTitleAca2(Char20 param) {

			this.localTitleAca2 = param;

		}

		/**
		 * field for Prefix1
		 */

		protected Char20 localPrefix1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char20
		 */
		public Char20 getPrefix1() {
			return localPrefix1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Prefix1
		 */
		public void setPrefix1(Char20 param) {

			this.localPrefix1 = param;

		}

		/**
		 * field for Prefix2
		 */

		protected Char20 localPrefix2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char20
		 */
		public Char20 getPrefix2() {
			return localPrefix2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Prefix2
		 */
		public void setPrefix2(Char20 param) {

			this.localPrefix2 = param;

		}

		/**
		 * field for TitleSppl
		 */

		protected Char20 localTitleSppl;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char20
		 */
		public Char20 getTitleSppl() {
			return localTitleSppl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TitleSppl
		 */
		public void setTitleSppl(Char20 param) {

			this.localTitleSppl = param;

		}

		/**
		 * field for Nickname
		 */

		protected Char40 localNickname;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getNickname() {
			return localNickname;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Nickname
		 */
		public void setNickname(Char40 param) {

			this.localNickname = param;

		}

		/**
		 * field for Initials
		 */

		protected Char10 localInitials;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getInitials() {
			return localInitials;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Initials
		 */
		public void setInitials(Char10 param) {

			this.localInitials = param;

		}

		/**
		 * field for Nameformat
		 */

		protected Char2 localNameformat;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getNameformat() {
			return localNameformat;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Nameformat
		 */
		public void setNameformat(Char2 param) {

			this.localNameformat = param;

		}

		/**
		 * field for Namcountry
		 */

		protected Char3 localNamcountry;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getNamcountry() {
			return localNamcountry;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Namcountry
		 */
		public void setNamcountry(Char3 param) {

			this.localNamcountry = param;

		}

		/**
		 * field for LanguP
		 */

		protected Lang localLanguP;

		/**
		 * Auto generated getter method
		 * 
		 * @return Lang
		 */
		public Lang getLanguP() {
			return localLanguP;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LanguP
		 */
		public void setLanguP(Lang param) {

			this.localLanguP = param;

		}

		/**
		 * field for LangupIso
		 */

		protected Char2 localLangupIso;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getLangupIso() {
			return localLangupIso;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LangupIso
		 */
		public void setLangupIso(Char2 param) {

			this.localLangupIso = param;

		}

		/**
		 * field for Sort1P
		 */

		protected Char20 localSort1P;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char20
		 */
		public Char20 getSort1P() {
			return localSort1P;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sort1P
		 */
		public void setSort1P(Char20 param) {

			this.localSort1P = param;

		}

		/**
		 * field for Sort2P
		 */

		protected Char20 localSort2P;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char20
		 */
		public Char20 getSort2P() {
			return localSort2P;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sort2P
		 */
		public void setSort2P(Char20 param) {

			this.localSort2P = param;

		}

		/**
		 * field for COName
		 */

		protected Char40 localCOName;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getCOName() {
			return localCOName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            COName
		 */
		public void setCOName(Char40 param) {

			this.localCOName = param;

		}

		/**
		 * field for City
		 */

		protected Char40 localCity;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getCity() {
			return localCity;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            City
		 */
		public void setCity(Char40 param) {

			this.localCity = param;

		}

		/**
		 * field for District
		 */

		protected Char40 localDistrict;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getDistrict() {
			return localDistrict;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            District
		 */
		public void setDistrict(Char40 param) {

			this.localDistrict = param;

		}

		/**
		 * field for CityNo
		 */

		protected Char12 localCityNo;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char12
		 */
		public Char12 getCityNo() {
			return localCityNo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CityNo
		 */
		public void setCityNo(Char12 param) {

			this.localCityNo = param;

		}

		/**
		 * field for DistrctNo
		 */

		protected Char8 localDistrctNo;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char8
		 */
		public Char8 getDistrctNo() {
			return localDistrctNo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DistrctNo
		 */
		public void setDistrctNo(Char8 param) {

			this.localDistrctNo = param;

		}

		/**
		 * field for Chckstatus
		 */

		protected Char1 localChckstatus;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getChckstatus() {
			return localChckstatus;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Chckstatus
		 */
		public void setChckstatus(Char1 param) {

			this.localChckstatus = param;

		}

		/**
		 * field for PostlCod1
		 */

		protected Char10 localPostlCod1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getPostlCod1() {
			return localPostlCod1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PostlCod1
		 */
		public void setPostlCod1(Char10 param) {

			this.localPostlCod1 = param;

		}

		/**
		 * field for PostlCod2
		 */

		protected Char10 localPostlCod2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getPostlCod2() {
			return localPostlCod2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PostlCod2
		 */
		public void setPostlCod2(Char10 param) {

			this.localPostlCod2 = param;

		}

		/**
		 * field for PoBox
		 */

		protected Char10 localPoBox;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getPoBox() {
			return localPoBox;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PoBox
		 */
		public void setPoBox(Char10 param) {

			this.localPoBox = param;

		}

		/**
		 * field for PoBoxCit
		 */

		protected Char40 localPoBoxCit;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getPoBoxCit() {
			return localPoBoxCit;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PoBoxCit
		 */
		public void setPoBoxCit(Char40 param) {

			this.localPoBoxCit = param;

		}

		/**
		 * field for PboxcitNo
		 */

		protected Char12 localPboxcitNo;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char12
		 */
		public Char12 getPboxcitNo() {
			return localPboxcitNo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PboxcitNo
		 */
		public void setPboxcitNo(Char12 param) {

			this.localPboxcitNo = param;

		}

		/**
		 * field for DelivDis
		 */

		protected Char15 localDelivDis;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char15
		 */
		public Char15 getDelivDis() {
			return localDelivDis;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DelivDis
		 */
		public void setDelivDis(Char15 param) {

			this.localDelivDis = param;

		}

		/**
		 * field for Transpzone
		 */

		protected Char10 localTranspzone;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getTranspzone() {
			return localTranspzone;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Transpzone
		 */
		public void setTranspzone(Char10 param) {

			this.localTranspzone = param;

		}

		/**
		 * field for Street
		 */

		protected Char60 localStreet;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char60
		 */
		public Char60 getStreet() {
			return localStreet;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Street
		 */
		public void setStreet(Char60 param) {

			this.localStreet = param;

		}

		/**
		 * field for StreetNo
		 */

		protected Char12 localStreetNo;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char12
		 */
		public Char12 getStreetNo() {
			return localStreetNo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            StreetNo
		 */
		public void setStreetNo(Char12 param) {

			this.localStreetNo = param;

		}

		/**
		 * field for StrAbbr
		 */

		protected Char2 localStrAbbr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getStrAbbr() {
			return localStrAbbr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            StrAbbr
		 */
		public void setStrAbbr(Char2 param) {

			this.localStrAbbr = param;

		}

		/**
		 * field for HouseNo
		 */

		protected Char10 localHouseNo;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getHouseNo() {
			return localHouseNo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            HouseNo
		 */
		public void setHouseNo(Char10 param) {

			this.localHouseNo = param;

		}

		/**
		 * field for HouseNo2
		 */

		protected Char10 localHouseNo2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getHouseNo2() {
			return localHouseNo2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            HouseNo2
		 */
		public void setHouseNo2(Char10 param) {

			this.localHouseNo2 = param;

		}

		/**
		 * field for StrSuppl1
		 */

		protected Char40 localStrSuppl1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getStrSuppl1() {
			return localStrSuppl1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            StrSuppl1
		 */
		public void setStrSuppl1(Char40 param) {

			this.localStrSuppl1 = param;

		}

		/**
		 * field for StrSuppl2
		 */

		protected Char40 localStrSuppl2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getStrSuppl2() {
			return localStrSuppl2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            StrSuppl2
		 */
		public void setStrSuppl2(Char40 param) {

			this.localStrSuppl2 = param;

		}

		/**
		 * field for StrSuppl3
		 */

		protected Char40 localStrSuppl3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getStrSuppl3() {
			return localStrSuppl3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            StrSuppl3
		 */
		public void setStrSuppl3(Char40 param) {

			this.localStrSuppl3 = param;

		}

		/**
		 * field for Location
		 */

		protected Char40 localLocation;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getLocation() {
			return localLocation;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Location
		 */
		public void setLocation(Char40 param) {

			this.localLocation = param;

		}

		/**
		 * field for Building
		 */

		protected Char10 localBuilding;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getBuilding() {
			return localBuilding;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Building
		 */
		public void setBuilding(Char10 param) {

			this.localBuilding = param;

		}

		/**
		 * field for Floor
		 */

		protected Char10 localFloor;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getFloor() {
			return localFloor;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Floor
		 */
		public void setFloor(Char10 param) {

			this.localFloor = param;

		}

		/**
		 * field for RoomNo
		 */

		protected Char10 localRoomNo;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getRoomNo() {
			return localRoomNo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RoomNo
		 */
		public void setRoomNo(Char10 param) {

			this.localRoomNo = param;

		}

		/**
		 * field for Country
		 */

		protected Char3 localCountry;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getCountry() {
			return localCountry;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Country
		 */
		public void setCountry(Char3 param) {

			this.localCountry = param;

		}

		/**
		 * field for Countryiso
		 */

		protected Char2 localCountryiso;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getCountryiso() {
			return localCountryiso;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Countryiso
		 */
		public void setCountryiso(Char2 param) {

			this.localCountryiso = param;

		}

		/**
		 * field for Region
		 */

		protected Char3 localRegion;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getRegion() {
			return localRegion;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Region
		 */
		public void setRegion(Char3 param) {

			this.localRegion = param;

		}

		/**
		 * field for TimeZone
		 */

		protected Char6 localTimeZone;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char6
		 */
		public Char6 getTimeZone() {
			return localTimeZone;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TimeZone
		 */
		public void setTimeZone(Char6 param) {

			this.localTimeZone = param;

		}

		/**
		 * field for Taxjurcode
		 */

		protected Char15 localTaxjurcode;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char15
		 */
		public Char15 getTaxjurcode() {
			return localTaxjurcode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Taxjurcode
		 */
		public void setTaxjurcode(Char15 param) {

			this.localTaxjurcode = param;

		}

		/**
		 * field for AdrNotes
		 */

		protected Char50 localAdrNotes;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char50
		 */
		public Char50 getAdrNotes() {
			return localAdrNotes;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AdrNotes
		 */
		public void setAdrNotes(Char50 param) {

			this.localAdrNotes = param;

		}

		/**
		 * field for CommType
		 */

		protected Char3 localCommType;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getCommType() {
			return localCommType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CommType
		 */
		public void setCommType(Char3 param) {

			this.localCommType = param;

		}

		/**
		 * field for Tel1Numbr
		 */

		protected Char30 localTel1Numbr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char30
		 */
		public Char30 getTel1Numbr() {
			return localTel1Numbr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Tel1Numbr
		 */
		public void setTel1Numbr(Char30 param) {

			this.localTel1Numbr = param;

		}

		/**
		 * field for Tel1Ext
		 */

		protected Char10 localTel1Ext;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getTel1Ext() {
			return localTel1Ext;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Tel1Ext
		 */
		public void setTel1Ext(Char10 param) {

			this.localTel1Ext = param;

		}

		/**
		 * field for FaxNumber
		 */

		protected Char30 localFaxNumber;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char30
		 */
		public Char30 getFaxNumber() {
			return localFaxNumber;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FaxNumber
		 */
		public void setFaxNumber(Char30 param) {

			this.localFaxNumber = param;

		}

		/**
		 * field for FaxExtens
		 */

		protected Char10 localFaxExtens;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getFaxExtens() {
			return localFaxExtens;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FaxExtens
		 */
		public void setFaxExtens(Char10 param) {

			this.localFaxExtens = param;

		}

		/**
		 * field for EMail
		 */

		protected Char241 localEMail;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char241
		 */
		public Char241 getEMail() {
			return localEMail;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            EMail
		 */
		public void setEMail(Char241 param) {

			this.localEMail = param;

		}

		/**
		 * field for BuildLong
		 */

		protected Char20 localBuildLong;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char20
		 */
		public Char20 getBuildLong() {
			return localBuildLong;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            BuildLong
		 */
		public void setBuildLong(Char20 param) {

			this.localBuildLong = param;

		}

		/**
		 * field for Regiogroup
		 */

		protected Char8 localRegiogroup;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char8
		 */
		public Char8 getRegiogroup() {
			return localRegiogroup;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Regiogroup
		 */
		public void setRegiogroup(Char8 param) {

			this.localRegiogroup = param;

		}

		/**
		 * field for HomeCity
		 */

		protected Char40 localHomeCity;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getHomeCity() {
			return localHomeCity;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            HomeCity
		 */
		public void setHomeCity(Char40 param) {

			this.localHomeCity = param;

		}

		/**
		 * field for Homecityno
		 */

		protected Char12 localHomecityno;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char12
		 */
		public Char12 getHomecityno() {
			return localHomecityno;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Homecityno
		 */
		public void setHomecityno(Char12 param) {

			this.localHomecityno = param;

		}

		/**
		 * field for Pcode1Ext
		 */

		protected Char10 localPcode1Ext;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getPcode1Ext() {
			return localPcode1Ext;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pcode1Ext
		 */
		public void setPcode1Ext(Char10 param) {

			this.localPcode1Ext = param;

		}

		/**
		 * field for Pcode2Ext
		 */

		protected Char10 localPcode2Ext;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getPcode2Ext() {
			return localPcode2Ext;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pcode2Ext
		 */
		public void setPcode2Ext(Char10 param) {

			this.localPcode2Ext = param;

		}

		/**
		 * field for PoWONo
		 */

		protected Char1 localPoWONo;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getPoWONo() {
			return localPoWONo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PoWONo
		 */
		public void setPoWONo(Char1 param) {

			this.localPoWONo = param;

		}

		/**
		 * field for PoBoxReg
		 */

		protected Char3 localPoBoxReg;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getPoBoxReg() {
			return localPoBoxReg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PoBoxReg
		 */
		public void setPoBoxReg(Char3 param) {

			this.localPoBoxReg = param;

		}

		/**
		 * field for PoboxCtry
		 */

		protected Char3 localPoboxCtry;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getPoboxCtry() {
			return localPoboxCtry;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PoboxCtry
		 */
		public void setPoboxCtry(Char3 param) {

			this.localPoboxCtry = param;

		}

		/**
		 * field for PoCtryiso
		 */

		protected Char2 localPoCtryiso;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getPoCtryiso() {
			return localPoCtryiso;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PoCtryiso
		 */
		public void setPoCtryiso(Char2 param) {

			this.localPoCtryiso = param;

		}

		/**
		 * field for Homepage
		 */

		protected Char132 localHomepage;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char132
		 */
		public Char132 getHomepage() {
			return localHomepage;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Homepage
		 */
		public void setHomepage(Char132 param) {

			this.localHomepage = param;

		}

		/**
		 * field for DontUseS
		 */

		protected Char4 localDontUseS;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getDontUseS() {
			return localDontUseS;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DontUseS
		 */
		public void setDontUseS(Char4 param) {

			this.localDontUseS = param;

		}

		/**
		 * field for DontUseP
		 */

		protected Char4 localDontUseP;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getDontUseP() {
			return localDontUseP;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DontUseP
		 */
		public void setDontUseP(Char4 param) {

			this.localDontUseP = param;

		}

		/**
		 * field for HouseNo3
		 */

		protected Char10 localHouseNo3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getHouseNo3() {
			return localHouseNo3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            HouseNo3
		 */
		public void setHouseNo3(Char10 param) {

			this.localHouseNo3 = param;

		}

		/**
		 * field for LanguCrP
		 */

		protected Lang localLanguCrP;

		/**
		 * Auto generated getter method
		 * 
		 * @return Lang
		 */
		public Lang getLanguCrP() {
			return localLanguCrP;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LanguCrP
		 */
		public void setLanguCrP(Lang param) {

			this.localLanguCrP = param;

		}

		/**
		 * field for Langucpiso
		 */

		protected Char2 localLangucpiso;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getLangucpiso() {
			return localLangucpiso;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Langucpiso
		 */
		public void setLangucpiso(Char2 param) {

			this.localLangucpiso = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Bapiaddr2", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Bapiaddr2", xmlWriter);
				}

			}

			if (localPersNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PersNo cannot be null!!");
			}
			localPersNo.serialize(new javax.xml.namespace.QName("", "PersNo"),
					xmlWriter);

			if (localAddrNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"AddrNo cannot be null!!");
			}
			localAddrNo.serialize(new javax.xml.namespace.QName("", "AddrNo"),
					xmlWriter);

			if (localTitleP == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"TitleP cannot be null!!");
			}
			localTitleP.serialize(new javax.xml.namespace.QName("", "TitleP"),
					xmlWriter);

			if (localFirstname == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Firstname cannot be null!!");
			}
			localFirstname.serialize(new javax.xml.namespace.QName("",
					"Firstname"), xmlWriter);

			if (localLastname == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lastname cannot be null!!");
			}
			localLastname.serialize(new javax.xml.namespace.QName("",
					"Lastname"), xmlWriter);

			if (localBirthName == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"BirthName cannot be null!!");
			}
			localBirthName.serialize(new javax.xml.namespace.QName("",
					"BirthName"), xmlWriter);

			if (localMiddlename == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Middlename cannot be null!!");
			}
			localMiddlename.serialize(new javax.xml.namespace.QName("",
					"Middlename"), xmlWriter);

			if (localSecondname == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Secondname cannot be null!!");
			}
			localSecondname.serialize(new javax.xml.namespace.QName("",
					"Secondname"), xmlWriter);

			if (localFullname == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Fullname cannot be null!!");
			}
			localFullname.serialize(new javax.xml.namespace.QName("",
					"Fullname"), xmlWriter);

			if (localFullnameX == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"FullnameX cannot be null!!");
			}
			localFullnameX.serialize(new javax.xml.namespace.QName("",
					"FullnameX"), xmlWriter);

			if (localTitleAca1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"TitleAca1 cannot be null!!");
			}
			localTitleAca1.serialize(new javax.xml.namespace.QName("",
					"TitleAca1"), xmlWriter);

			if (localTitleAca2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"TitleAca2 cannot be null!!");
			}
			localTitleAca2.serialize(new javax.xml.namespace.QName("",
					"TitleAca2"), xmlWriter);

			if (localPrefix1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prefix1 cannot be null!!");
			}
			localPrefix1.serialize(
					new javax.xml.namespace.QName("", "Prefix1"), xmlWriter);

			if (localPrefix2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prefix2 cannot be null!!");
			}
			localPrefix2.serialize(
					new javax.xml.namespace.QName("", "Prefix2"), xmlWriter);

			if (localTitleSppl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"TitleSppl cannot be null!!");
			}
			localTitleSppl.serialize(new javax.xml.namespace.QName("",
					"TitleSppl"), xmlWriter);

			if (localNickname == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Nickname cannot be null!!");
			}
			localNickname.serialize(new javax.xml.namespace.QName("",
					"Nickname"), xmlWriter);

			if (localInitials == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Initials cannot be null!!");
			}
			localInitials.serialize(new javax.xml.namespace.QName("",
					"Initials"), xmlWriter);

			if (localNameformat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Nameformat cannot be null!!");
			}
			localNameformat.serialize(new javax.xml.namespace.QName("",
					"Nameformat"), xmlWriter);

			if (localNamcountry == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Namcountry cannot be null!!");
			}
			localNamcountry.serialize(new javax.xml.namespace.QName("",
					"Namcountry"), xmlWriter);

			if (localLanguP == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"LanguP cannot be null!!");
			}
			localLanguP.serialize(new javax.xml.namespace.QName("", "LanguP"),
					xmlWriter);

			if (localLangupIso == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"LangupIso cannot be null!!");
			}
			localLangupIso.serialize(new javax.xml.namespace.QName("",
					"LangupIso"), xmlWriter);

			if (localSort1P == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sort1P cannot be null!!");
			}
			localSort1P.serialize(new javax.xml.namespace.QName("", "Sort1P"),
					xmlWriter);

			if (localSort2P == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sort2P cannot be null!!");
			}
			localSort2P.serialize(new javax.xml.namespace.QName("", "Sort2P"),
					xmlWriter);

			if (localCOName == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"COName cannot be null!!");
			}
			localCOName.serialize(new javax.xml.namespace.QName("", "COName"),
					xmlWriter);

			if (localCity == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"City cannot be null!!");
			}
			localCity.serialize(new javax.xml.namespace.QName("", "City"),
					xmlWriter);

			if (localDistrict == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"District cannot be null!!");
			}
			localDistrict.serialize(new javax.xml.namespace.QName("",
					"District"), xmlWriter);

			if (localCityNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"CityNo cannot be null!!");
			}
			localCityNo.serialize(new javax.xml.namespace.QName("", "CityNo"),
					xmlWriter);

			if (localDistrctNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"DistrctNo cannot be null!!");
			}
			localDistrctNo.serialize(new javax.xml.namespace.QName("",
					"DistrctNo"), xmlWriter);

			if (localChckstatus == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Chckstatus cannot be null!!");
			}
			localChckstatus.serialize(new javax.xml.namespace.QName("",
					"Chckstatus"), xmlWriter);

			if (localPostlCod1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PostlCod1 cannot be null!!");
			}
			localPostlCod1.serialize(new javax.xml.namespace.QName("",
					"PostlCod1"), xmlWriter);

			if (localPostlCod2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PostlCod2 cannot be null!!");
			}
			localPostlCod2.serialize(new javax.xml.namespace.QName("",
					"PostlCod2"), xmlWriter);

			if (localPoBox == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoBox cannot be null!!");
			}
			localPoBox.serialize(new javax.xml.namespace.QName("", "PoBox"),
					xmlWriter);

			if (localPoBoxCit == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoBoxCit cannot be null!!");
			}
			localPoBoxCit.serialize(new javax.xml.namespace.QName("",
					"PoBoxCit"), xmlWriter);

			if (localPboxcitNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PboxcitNo cannot be null!!");
			}
			localPboxcitNo.serialize(new javax.xml.namespace.QName("",
					"PboxcitNo"), xmlWriter);

			if (localDelivDis == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"DelivDis cannot be null!!");
			}
			localDelivDis.serialize(new javax.xml.namespace.QName("",
					"DelivDis"), xmlWriter);

			if (localTranspzone == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Transpzone cannot be null!!");
			}
			localTranspzone.serialize(new javax.xml.namespace.QName("",
					"Transpzone"), xmlWriter);

			if (localStreet == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Street cannot be null!!");
			}
			localStreet.serialize(new javax.xml.namespace.QName("", "Street"),
					xmlWriter);

			if (localStreetNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StreetNo cannot be null!!");
			}
			localStreetNo.serialize(new javax.xml.namespace.QName("",
					"StreetNo"), xmlWriter);

			if (localStrAbbr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StrAbbr cannot be null!!");
			}
			localStrAbbr.serialize(
					new javax.xml.namespace.QName("", "StrAbbr"), xmlWriter);

			if (localHouseNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"HouseNo cannot be null!!");
			}
			localHouseNo.serialize(
					new javax.xml.namespace.QName("", "HouseNo"), xmlWriter);

			if (localHouseNo2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"HouseNo2 cannot be null!!");
			}
			localHouseNo2.serialize(new javax.xml.namespace.QName("",
					"HouseNo2"), xmlWriter);

			if (localStrSuppl1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StrSuppl1 cannot be null!!");
			}
			localStrSuppl1.serialize(new javax.xml.namespace.QName("",
					"StrSuppl1"), xmlWriter);

			if (localStrSuppl2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StrSuppl2 cannot be null!!");
			}
			localStrSuppl2.serialize(new javax.xml.namespace.QName("",
					"StrSuppl2"), xmlWriter);

			if (localStrSuppl3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StrSuppl3 cannot be null!!");
			}
			localStrSuppl3.serialize(new javax.xml.namespace.QName("",
					"StrSuppl3"), xmlWriter);

			if (localLocation == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Location cannot be null!!");
			}
			localLocation.serialize(new javax.xml.namespace.QName("",
					"Location"), xmlWriter);

			if (localBuilding == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Building cannot be null!!");
			}
			localBuilding.serialize(new javax.xml.namespace.QName("",
					"Building"), xmlWriter);

			if (localFloor == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Floor cannot be null!!");
			}
			localFloor.serialize(new javax.xml.namespace.QName("", "Floor"),
					xmlWriter);

			if (localRoomNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"RoomNo cannot be null!!");
			}
			localRoomNo.serialize(new javax.xml.namespace.QName("", "RoomNo"),
					xmlWriter);

			if (localCountry == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Country cannot be null!!");
			}
			localCountry.serialize(
					new javax.xml.namespace.QName("", "Country"), xmlWriter);

			if (localCountryiso == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Countryiso cannot be null!!");
			}
			localCountryiso.serialize(new javax.xml.namespace.QName("",
					"Countryiso"), xmlWriter);

			if (localRegion == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Region cannot be null!!");
			}
			localRegion.serialize(new javax.xml.namespace.QName("", "Region"),
					xmlWriter);

			if (localTimeZone == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"TimeZone cannot be null!!");
			}
			localTimeZone.serialize(new javax.xml.namespace.QName("",
					"TimeZone"), xmlWriter);

			if (localTaxjurcode == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Taxjurcode cannot be null!!");
			}
			localTaxjurcode.serialize(new javax.xml.namespace.QName("",
					"Taxjurcode"), xmlWriter);

			if (localAdrNotes == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"AdrNotes cannot be null!!");
			}
			localAdrNotes.serialize(new javax.xml.namespace.QName("",
					"AdrNotes"), xmlWriter);

			if (localCommType == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"CommType cannot be null!!");
			}
			localCommType.serialize(new javax.xml.namespace.QName("",
					"CommType"), xmlWriter);

			if (localTel1Numbr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tel1Numbr cannot be null!!");
			}
			localTel1Numbr.serialize(new javax.xml.namespace.QName("",
					"Tel1Numbr"), xmlWriter);

			if (localTel1Ext == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tel1Ext cannot be null!!");
			}
			localTel1Ext.serialize(
					new javax.xml.namespace.QName("", "Tel1Ext"), xmlWriter);

			if (localFaxNumber == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"FaxNumber cannot be null!!");
			}
			localFaxNumber.serialize(new javax.xml.namespace.QName("",
					"FaxNumber"), xmlWriter);

			if (localFaxExtens == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"FaxExtens cannot be null!!");
			}
			localFaxExtens.serialize(new javax.xml.namespace.QName("",
					"FaxExtens"), xmlWriter);

			if (localEMail == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"EMail cannot be null!!");
			}
			localEMail.serialize(new javax.xml.namespace.QName("", "EMail"),
					xmlWriter);

			if (localBuildLong == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"BuildLong cannot be null!!");
			}
			localBuildLong.serialize(new javax.xml.namespace.QName("",
					"BuildLong"), xmlWriter);

			if (localRegiogroup == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Regiogroup cannot be null!!");
			}
			localRegiogroup.serialize(new javax.xml.namespace.QName("",
					"Regiogroup"), xmlWriter);

			if (localHomeCity == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"HomeCity cannot be null!!");
			}
			localHomeCity.serialize(new javax.xml.namespace.QName("",
					"HomeCity"), xmlWriter);

			if (localHomecityno == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Homecityno cannot be null!!");
			}
			localHomecityno.serialize(new javax.xml.namespace.QName("",
					"Homecityno"), xmlWriter);

			if (localPcode1Ext == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pcode1Ext cannot be null!!");
			}
			localPcode1Ext.serialize(new javax.xml.namespace.QName("",
					"Pcode1Ext"), xmlWriter);

			if (localPcode2Ext == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pcode2Ext cannot be null!!");
			}
			localPcode2Ext.serialize(new javax.xml.namespace.QName("",
					"Pcode2Ext"), xmlWriter);

			if (localPoWONo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoWONo cannot be null!!");
			}
			localPoWONo.serialize(new javax.xml.namespace.QName("", "PoWONo"),
					xmlWriter);

			if (localPoBoxReg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoBoxReg cannot be null!!");
			}
			localPoBoxReg.serialize(new javax.xml.namespace.QName("",
					"PoBoxReg"), xmlWriter);

			if (localPoboxCtry == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoboxCtry cannot be null!!");
			}
			localPoboxCtry.serialize(new javax.xml.namespace.QName("",
					"PoboxCtry"), xmlWriter);

			if (localPoCtryiso == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoCtryiso cannot be null!!");
			}
			localPoCtryiso.serialize(new javax.xml.namespace.QName("",
					"PoCtryiso"), xmlWriter);

			if (localHomepage == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Homepage cannot be null!!");
			}
			localHomepage.serialize(new javax.xml.namespace.QName("",
					"Homepage"), xmlWriter);

			if (localDontUseS == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"DontUseS cannot be null!!");
			}
			localDontUseS.serialize(new javax.xml.namespace.QName("",
					"DontUseS"), xmlWriter);

			if (localDontUseP == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"DontUseP cannot be null!!");
			}
			localDontUseP.serialize(new javax.xml.namespace.QName("",
					"DontUseP"), xmlWriter);

			if (localHouseNo3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"HouseNo3 cannot be null!!");
			}
			localHouseNo3.serialize(new javax.xml.namespace.QName("",
					"HouseNo3"), xmlWriter);

			if (localLanguCrP == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"LanguCrP cannot be null!!");
			}
			localLanguCrP.serialize(new javax.xml.namespace.QName("",
					"LanguCrP"), xmlWriter);

			if (localLangucpiso == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Langucpiso cannot be null!!");
			}
			localLangucpiso.serialize(new javax.xml.namespace.QName("",
					"Langucpiso"), xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "PersNo"));

			if (localPersNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PersNo cannot be null!!");
			}
			elementList.add(localPersNo);

			elementList.add(new javax.xml.namespace.QName("", "AddrNo"));

			if (localAddrNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"AddrNo cannot be null!!");
			}
			elementList.add(localAddrNo);

			elementList.add(new javax.xml.namespace.QName("", "TitleP"));

			if (localTitleP == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"TitleP cannot be null!!");
			}
			elementList.add(localTitleP);

			elementList.add(new javax.xml.namespace.QName("", "Firstname"));

			if (localFirstname == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Firstname cannot be null!!");
			}
			elementList.add(localFirstname);

			elementList.add(new javax.xml.namespace.QName("", "Lastname"));

			if (localLastname == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lastname cannot be null!!");
			}
			elementList.add(localLastname);

			elementList.add(new javax.xml.namespace.QName("", "BirthName"));

			if (localBirthName == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"BirthName cannot be null!!");
			}
			elementList.add(localBirthName);

			elementList.add(new javax.xml.namespace.QName("", "Middlename"));

			if (localMiddlename == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Middlename cannot be null!!");
			}
			elementList.add(localMiddlename);

			elementList.add(new javax.xml.namespace.QName("", "Secondname"));

			if (localSecondname == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Secondname cannot be null!!");
			}
			elementList.add(localSecondname);

			elementList.add(new javax.xml.namespace.QName("", "Fullname"));

			if (localFullname == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Fullname cannot be null!!");
			}
			elementList.add(localFullname);

			elementList.add(new javax.xml.namespace.QName("", "FullnameX"));

			if (localFullnameX == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"FullnameX cannot be null!!");
			}
			elementList.add(localFullnameX);

			elementList.add(new javax.xml.namespace.QName("", "TitleAca1"));

			if (localTitleAca1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"TitleAca1 cannot be null!!");
			}
			elementList.add(localTitleAca1);

			elementList.add(new javax.xml.namespace.QName("", "TitleAca2"));

			if (localTitleAca2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"TitleAca2 cannot be null!!");
			}
			elementList.add(localTitleAca2);

			elementList.add(new javax.xml.namespace.QName("", "Prefix1"));

			if (localPrefix1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prefix1 cannot be null!!");
			}
			elementList.add(localPrefix1);

			elementList.add(new javax.xml.namespace.QName("", "Prefix2"));

			if (localPrefix2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Prefix2 cannot be null!!");
			}
			elementList.add(localPrefix2);

			elementList.add(new javax.xml.namespace.QName("", "TitleSppl"));

			if (localTitleSppl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"TitleSppl cannot be null!!");
			}
			elementList.add(localTitleSppl);

			elementList.add(new javax.xml.namespace.QName("", "Nickname"));

			if (localNickname == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Nickname cannot be null!!");
			}
			elementList.add(localNickname);

			elementList.add(new javax.xml.namespace.QName("", "Initials"));

			if (localInitials == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Initials cannot be null!!");
			}
			elementList.add(localInitials);

			elementList.add(new javax.xml.namespace.QName("", "Nameformat"));

			if (localNameformat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Nameformat cannot be null!!");
			}
			elementList.add(localNameformat);

			elementList.add(new javax.xml.namespace.QName("", "Namcountry"));

			if (localNamcountry == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Namcountry cannot be null!!");
			}
			elementList.add(localNamcountry);

			elementList.add(new javax.xml.namespace.QName("", "LanguP"));

			if (localLanguP == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"LanguP cannot be null!!");
			}
			elementList.add(localLanguP);

			elementList.add(new javax.xml.namespace.QName("", "LangupIso"));

			if (localLangupIso == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"LangupIso cannot be null!!");
			}
			elementList.add(localLangupIso);

			elementList.add(new javax.xml.namespace.QName("", "Sort1P"));

			if (localSort1P == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sort1P cannot be null!!");
			}
			elementList.add(localSort1P);

			elementList.add(new javax.xml.namespace.QName("", "Sort2P"));

			if (localSort2P == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sort2P cannot be null!!");
			}
			elementList.add(localSort2P);

			elementList.add(new javax.xml.namespace.QName("", "COName"));

			if (localCOName == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"COName cannot be null!!");
			}
			elementList.add(localCOName);

			elementList.add(new javax.xml.namespace.QName("", "City"));

			if (localCity == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"City cannot be null!!");
			}
			elementList.add(localCity);

			elementList.add(new javax.xml.namespace.QName("", "District"));

			if (localDistrict == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"District cannot be null!!");
			}
			elementList.add(localDistrict);

			elementList.add(new javax.xml.namespace.QName("", "CityNo"));

			if (localCityNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"CityNo cannot be null!!");
			}
			elementList.add(localCityNo);

			elementList.add(new javax.xml.namespace.QName("", "DistrctNo"));

			if (localDistrctNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"DistrctNo cannot be null!!");
			}
			elementList.add(localDistrctNo);

			elementList.add(new javax.xml.namespace.QName("", "Chckstatus"));

			if (localChckstatus == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Chckstatus cannot be null!!");
			}
			elementList.add(localChckstatus);

			elementList.add(new javax.xml.namespace.QName("", "PostlCod1"));

			if (localPostlCod1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PostlCod1 cannot be null!!");
			}
			elementList.add(localPostlCod1);

			elementList.add(new javax.xml.namespace.QName("", "PostlCod2"));

			if (localPostlCod2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PostlCod2 cannot be null!!");
			}
			elementList.add(localPostlCod2);

			elementList.add(new javax.xml.namespace.QName("", "PoBox"));

			if (localPoBox == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoBox cannot be null!!");
			}
			elementList.add(localPoBox);

			elementList.add(new javax.xml.namespace.QName("", "PoBoxCit"));

			if (localPoBoxCit == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoBoxCit cannot be null!!");
			}
			elementList.add(localPoBoxCit);

			elementList.add(new javax.xml.namespace.QName("", "PboxcitNo"));

			if (localPboxcitNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PboxcitNo cannot be null!!");
			}
			elementList.add(localPboxcitNo);

			elementList.add(new javax.xml.namespace.QName("", "DelivDis"));

			if (localDelivDis == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"DelivDis cannot be null!!");
			}
			elementList.add(localDelivDis);

			elementList.add(new javax.xml.namespace.QName("", "Transpzone"));

			if (localTranspzone == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Transpzone cannot be null!!");
			}
			elementList.add(localTranspzone);

			elementList.add(new javax.xml.namespace.QName("", "Street"));

			if (localStreet == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Street cannot be null!!");
			}
			elementList.add(localStreet);

			elementList.add(new javax.xml.namespace.QName("", "StreetNo"));

			if (localStreetNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StreetNo cannot be null!!");
			}
			elementList.add(localStreetNo);

			elementList.add(new javax.xml.namespace.QName("", "StrAbbr"));

			if (localStrAbbr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StrAbbr cannot be null!!");
			}
			elementList.add(localStrAbbr);

			elementList.add(new javax.xml.namespace.QName("", "HouseNo"));

			if (localHouseNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"HouseNo cannot be null!!");
			}
			elementList.add(localHouseNo);

			elementList.add(new javax.xml.namespace.QName("", "HouseNo2"));

			if (localHouseNo2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"HouseNo2 cannot be null!!");
			}
			elementList.add(localHouseNo2);

			elementList.add(new javax.xml.namespace.QName("", "StrSuppl1"));

			if (localStrSuppl1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StrSuppl1 cannot be null!!");
			}
			elementList.add(localStrSuppl1);

			elementList.add(new javax.xml.namespace.QName("", "StrSuppl2"));

			if (localStrSuppl2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StrSuppl2 cannot be null!!");
			}
			elementList.add(localStrSuppl2);

			elementList.add(new javax.xml.namespace.QName("", "StrSuppl3"));

			if (localStrSuppl3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StrSuppl3 cannot be null!!");
			}
			elementList.add(localStrSuppl3);

			elementList.add(new javax.xml.namespace.QName("", "Location"));

			if (localLocation == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Location cannot be null!!");
			}
			elementList.add(localLocation);

			elementList.add(new javax.xml.namespace.QName("", "Building"));

			if (localBuilding == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Building cannot be null!!");
			}
			elementList.add(localBuilding);

			elementList.add(new javax.xml.namespace.QName("", "Floor"));

			if (localFloor == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Floor cannot be null!!");
			}
			elementList.add(localFloor);

			elementList.add(new javax.xml.namespace.QName("", "RoomNo"));

			if (localRoomNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"RoomNo cannot be null!!");
			}
			elementList.add(localRoomNo);

			elementList.add(new javax.xml.namespace.QName("", "Country"));

			if (localCountry == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Country cannot be null!!");
			}
			elementList.add(localCountry);

			elementList.add(new javax.xml.namespace.QName("", "Countryiso"));

			if (localCountryiso == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Countryiso cannot be null!!");
			}
			elementList.add(localCountryiso);

			elementList.add(new javax.xml.namespace.QName("", "Region"));

			if (localRegion == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Region cannot be null!!");
			}
			elementList.add(localRegion);

			elementList.add(new javax.xml.namespace.QName("", "TimeZone"));

			if (localTimeZone == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"TimeZone cannot be null!!");
			}
			elementList.add(localTimeZone);

			elementList.add(new javax.xml.namespace.QName("", "Taxjurcode"));

			if (localTaxjurcode == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Taxjurcode cannot be null!!");
			}
			elementList.add(localTaxjurcode);

			elementList.add(new javax.xml.namespace.QName("", "AdrNotes"));

			if (localAdrNotes == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"AdrNotes cannot be null!!");
			}
			elementList.add(localAdrNotes);

			elementList.add(new javax.xml.namespace.QName("", "CommType"));

			if (localCommType == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"CommType cannot be null!!");
			}
			elementList.add(localCommType);

			elementList.add(new javax.xml.namespace.QName("", "Tel1Numbr"));

			if (localTel1Numbr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tel1Numbr cannot be null!!");
			}
			elementList.add(localTel1Numbr);

			elementList.add(new javax.xml.namespace.QName("", "Tel1Ext"));

			if (localTel1Ext == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tel1Ext cannot be null!!");
			}
			elementList.add(localTel1Ext);

			elementList.add(new javax.xml.namespace.QName("", "FaxNumber"));

			if (localFaxNumber == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"FaxNumber cannot be null!!");
			}
			elementList.add(localFaxNumber);

			elementList.add(new javax.xml.namespace.QName("", "FaxExtens"));

			if (localFaxExtens == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"FaxExtens cannot be null!!");
			}
			elementList.add(localFaxExtens);

			elementList.add(new javax.xml.namespace.QName("", "EMail"));

			if (localEMail == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"EMail cannot be null!!");
			}
			elementList.add(localEMail);

			elementList.add(new javax.xml.namespace.QName("", "BuildLong"));

			if (localBuildLong == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"BuildLong cannot be null!!");
			}
			elementList.add(localBuildLong);

			elementList.add(new javax.xml.namespace.QName("", "Regiogroup"));

			if (localRegiogroup == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Regiogroup cannot be null!!");
			}
			elementList.add(localRegiogroup);

			elementList.add(new javax.xml.namespace.QName("", "HomeCity"));

			if (localHomeCity == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"HomeCity cannot be null!!");
			}
			elementList.add(localHomeCity);

			elementList.add(new javax.xml.namespace.QName("", "Homecityno"));

			if (localHomecityno == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Homecityno cannot be null!!");
			}
			elementList.add(localHomecityno);

			elementList.add(new javax.xml.namespace.QName("", "Pcode1Ext"));

			if (localPcode1Ext == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pcode1Ext cannot be null!!");
			}
			elementList.add(localPcode1Ext);

			elementList.add(new javax.xml.namespace.QName("", "Pcode2Ext"));

			if (localPcode2Ext == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pcode2Ext cannot be null!!");
			}
			elementList.add(localPcode2Ext);

			elementList.add(new javax.xml.namespace.QName("", "PoWONo"));

			if (localPoWONo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoWONo cannot be null!!");
			}
			elementList.add(localPoWONo);

			elementList.add(new javax.xml.namespace.QName("", "PoBoxReg"));

			if (localPoBoxReg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoBoxReg cannot be null!!");
			}
			elementList.add(localPoBoxReg);

			elementList.add(new javax.xml.namespace.QName("", "PoboxCtry"));

			if (localPoboxCtry == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoboxCtry cannot be null!!");
			}
			elementList.add(localPoboxCtry);

			elementList.add(new javax.xml.namespace.QName("", "PoCtryiso"));

			if (localPoCtryiso == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoCtryiso cannot be null!!");
			}
			elementList.add(localPoCtryiso);

			elementList.add(new javax.xml.namespace.QName("", "Homepage"));

			if (localHomepage == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Homepage cannot be null!!");
			}
			elementList.add(localHomepage);

			elementList.add(new javax.xml.namespace.QName("", "DontUseS"));

			if (localDontUseS == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"DontUseS cannot be null!!");
			}
			elementList.add(localDontUseS);

			elementList.add(new javax.xml.namespace.QName("", "DontUseP"));

			if (localDontUseP == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"DontUseP cannot be null!!");
			}
			elementList.add(localDontUseP);

			elementList.add(new javax.xml.namespace.QName("", "HouseNo3"));

			if (localHouseNo3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"HouseNo3 cannot be null!!");
			}
			elementList.add(localHouseNo3);

			elementList.add(new javax.xml.namespace.QName("", "LanguCrP"));

			if (localLanguCrP == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"LanguCrP cannot be null!!");
			}
			elementList.add(localLanguCrP);

			elementList.add(new javax.xml.namespace.QName("", "Langucpiso"));

			if (localLangucpiso == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Langucpiso cannot be null!!");
			}
			elementList.add(localLangucpiso);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Bapiaddr2 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Bapiaddr2 object = new Bapiaddr2();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"Bapiaddr2".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Bapiaddr2) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PersNo")
									.equals(reader.getName())) {

						object.setPersNo(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "AddrNo")
									.equals(reader.getName())) {

						object.setAddrNo(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "TitleP")
									.equals(reader.getName())) {

						object.setTitleP(Char30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Firstname")
									.equals(reader.getName())) {

						object.setFirstname(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Lastname")
									.equals(reader.getName())) {

						object.setLastname(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "BirthName")
									.equals(reader.getName())) {

						object.setBirthName(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Middlename")
									.equals(reader.getName())) {

						object.setMiddlename(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Secondname")
									.equals(reader.getName())) {

						object.setSecondname(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Fullname")
									.equals(reader.getName())) {

						object.setFullname(Char80.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "FullnameX")
									.equals(reader.getName())) {

						object.setFullnameX(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "TitleAca1")
									.equals(reader.getName())) {

						object.setTitleAca1(Char20.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "TitleAca2")
									.equals(reader.getName())) {

						object.setTitleAca2(Char20.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Prefix1")
									.equals(reader.getName())) {

						object.setPrefix1(Char20.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Prefix2")
									.equals(reader.getName())) {

						object.setPrefix2(Char20.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "TitleSppl")
									.equals(reader.getName())) {

						object.setTitleSppl(Char20.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Nickname")
									.equals(reader.getName())) {

						object.setNickname(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Initials")
									.equals(reader.getName())) {

						object.setInitials(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Nameformat")
									.equals(reader.getName())) {

						object.setNameformat(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Namcountry")
									.equals(reader.getName())) {

						object.setNamcountry(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "LanguP")
									.equals(reader.getName())) {

						object.setLanguP(Lang.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "LangupIso")
									.equals(reader.getName())) {

						object.setLangupIso(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sort1P")
									.equals(reader.getName())) {

						object.setSort1P(Char20.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sort2P")
									.equals(reader.getName())) {

						object.setSort2P(Char20.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "COName")
									.equals(reader.getName())) {

						object.setCOName(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "City")
									.equals(reader.getName())) {

						object.setCity(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "District")
									.equals(reader.getName())) {

						object.setDistrict(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "CityNo")
									.equals(reader.getName())) {

						object.setCityNo(Char12.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "DistrctNo")
									.equals(reader.getName())) {

						object.setDistrctNo(Char8.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Chckstatus")
									.equals(reader.getName())) {

						object.setChckstatus(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PostlCod1")
									.equals(reader.getName())) {

						object.setPostlCod1(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PostlCod2")
									.equals(reader.getName())) {

						object.setPostlCod2(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PoBox")
									.equals(reader.getName())) {

						object.setPoBox(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PoBoxCit")
									.equals(reader.getName())) {

						object.setPoBoxCit(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PboxcitNo")
									.equals(reader.getName())) {

						object.setPboxcitNo(Char12.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "DelivDis")
									.equals(reader.getName())) {

						object.setDelivDis(Char15.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Transpzone")
									.equals(reader.getName())) {

						object.setTranspzone(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Street")
									.equals(reader.getName())) {

						object.setStreet(Char60.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "StreetNo")
									.equals(reader.getName())) {

						object.setStreetNo(Char12.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "StrAbbr")
									.equals(reader.getName())) {

						object.setStrAbbr(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "HouseNo")
									.equals(reader.getName())) {

						object.setHouseNo(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "HouseNo2")
									.equals(reader.getName())) {

						object.setHouseNo2(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "StrSuppl1")
									.equals(reader.getName())) {

						object.setStrSuppl1(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "StrSuppl2")
									.equals(reader.getName())) {

						object.setStrSuppl2(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "StrSuppl3")
									.equals(reader.getName())) {

						object.setStrSuppl3(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Location")
									.equals(reader.getName())) {

						object.setLocation(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Building")
									.equals(reader.getName())) {

						object.setBuilding(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Floor")
									.equals(reader.getName())) {

						object.setFloor(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "RoomNo")
									.equals(reader.getName())) {

						object.setRoomNo(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Country")
									.equals(reader.getName())) {

						object.setCountry(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Countryiso")
									.equals(reader.getName())) {

						object.setCountryiso(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Region")
									.equals(reader.getName())) {

						object.setRegion(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "TimeZone")
									.equals(reader.getName())) {

						object.setTimeZone(Char6.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Taxjurcode")
									.equals(reader.getName())) {

						object.setTaxjurcode(Char15.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "AdrNotes")
									.equals(reader.getName())) {

						object.setAdrNotes(Char50.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "CommType")
									.equals(reader.getName())) {

						object.setCommType(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Tel1Numbr")
									.equals(reader.getName())) {

						object.setTel1Numbr(Char30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Tel1Ext")
									.equals(reader.getName())) {

						object.setTel1Ext(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "FaxNumber")
									.equals(reader.getName())) {

						object.setFaxNumber(Char30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "FaxExtens")
									.equals(reader.getName())) {

						object.setFaxExtens(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "EMail")
									.equals(reader.getName())) {

						object.setEMail(Char241.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "BuildLong")
									.equals(reader.getName())) {

						object.setBuildLong(Char20.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Regiogroup")
									.equals(reader.getName())) {

						object.setRegiogroup(Char8.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "HomeCity")
									.equals(reader.getName())) {

						object.setHomeCity(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Homecityno")
									.equals(reader.getName())) {

						object.setHomecityno(Char12.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pcode1Ext")
									.equals(reader.getName())) {

						object.setPcode1Ext(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pcode2Ext")
									.equals(reader.getName())) {

						object.setPcode2Ext(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PoWONo")
									.equals(reader.getName())) {

						object.setPoWONo(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PoBoxReg")
									.equals(reader.getName())) {

						object.setPoBoxReg(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PoboxCtry")
									.equals(reader.getName())) {

						object.setPoboxCtry(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PoCtryiso")
									.equals(reader.getName())) {

						object.setPoCtryiso(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Homepage")
									.equals(reader.getName())) {

						object.setHomepage(Char132.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "DontUseS")
									.equals(reader.getName())) {

						object.setDontUseS(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "DontUseP")
									.equals(reader.getName())) {

						object.setDontUseP(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "HouseNo3")
									.equals(reader.getName())) {

						object.setHouseNo3(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "LanguCrP")
									.equals(reader.getName())) {

						object.setLanguCrP(Lang.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Langucpiso")
									.equals(reader.getName())) {

						object.setLangucpiso(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Bapiaddr1 implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * Bapiaddr1 Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for AddrNo
		 */

		protected Char10 localAddrNo;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getAddrNo() {
			return localAddrNo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AddrNo
		 */
		public void setAddrNo(Char10 param) {

			this.localAddrNo = param;

		}

		/**
		 * field for Formofaddr
		 */

		protected Char20 localFormofaddr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char20
		 */
		public Char20 getFormofaddr() {
			return localFormofaddr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Formofaddr
		 */
		public void setFormofaddr(Char20 param) {

			this.localFormofaddr = param;

		}

		/**
		 * field for Name
		 */

		protected Char40 localName;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getName() {
			return localName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Name
		 */
		public void setName(Char40 param) {

			this.localName = param;

		}

		/**
		 * field for Name2
		 */

		protected Char40 localName2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getName2() {
			return localName2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Name2
		 */
		public void setName2(Char40 param) {

			this.localName2 = param;

		}

		/**
		 * field for Name3
		 */

		protected Char40 localName3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getName3() {
			return localName3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Name3
		 */
		public void setName3(Char40 param) {

			this.localName3 = param;

		}

		/**
		 * field for Name4
		 */

		protected Char40 localName4;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getName4() {
			return localName4;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Name4
		 */
		public void setName4(Char40 param) {

			this.localName4 = param;

		}

		/**
		 * field for COName
		 */

		protected Char40 localCOName;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getCOName() {
			return localCOName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            COName
		 */
		public void setCOName(Char40 param) {

			this.localCOName = param;

		}

		/**
		 * field for City
		 */

		protected Char40 localCity;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getCity() {
			return localCity;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            City
		 */
		public void setCity(Char40 param) {

			this.localCity = param;

		}

		/**
		 * field for District
		 */

		protected Char40 localDistrict;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getDistrict() {
			return localDistrict;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            District
		 */
		public void setDistrict(Char40 param) {

			this.localDistrict = param;

		}

		/**
		 * field for CityNo
		 */

		protected Char12 localCityNo;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char12
		 */
		public Char12 getCityNo() {
			return localCityNo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CityNo
		 */
		public void setCityNo(Char12 param) {

			this.localCityNo = param;

		}

		/**
		 * field for PostlCod1
		 */

		protected Char10 localPostlCod1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getPostlCod1() {
			return localPostlCod1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PostlCod1
		 */
		public void setPostlCod1(Char10 param) {

			this.localPostlCod1 = param;

		}

		/**
		 * field for PostlCod2
		 */

		protected Char10 localPostlCod2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getPostlCod2() {
			return localPostlCod2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PostlCod2
		 */
		public void setPostlCod2(Char10 param) {

			this.localPostlCod2 = param;

		}

		/**
		 * field for PostlCod3
		 */

		protected Char10 localPostlCod3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getPostlCod3() {
			return localPostlCod3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PostlCod3
		 */
		public void setPostlCod3(Char10 param) {

			this.localPostlCod3 = param;

		}

		/**
		 * field for PoBox
		 */

		protected Char10 localPoBox;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getPoBox() {
			return localPoBox;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PoBox
		 */
		public void setPoBox(Char10 param) {

			this.localPoBox = param;

		}

		/**
		 * field for PoBoxCit
		 */

		protected Char40 localPoBoxCit;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getPoBoxCit() {
			return localPoBoxCit;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PoBoxCit
		 */
		public void setPoBoxCit(Char40 param) {

			this.localPoBoxCit = param;

		}

		/**
		 * field for DelivDis
		 */

		protected Char15 localDelivDis;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char15
		 */
		public Char15 getDelivDis() {
			return localDelivDis;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DelivDis
		 */
		public void setDelivDis(Char15 param) {

			this.localDelivDis = param;

		}

		/**
		 * field for Street
		 */

		protected Char40 localStreet;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getStreet() {
			return localStreet;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Street
		 */
		public void setStreet(Char40 param) {

			this.localStreet = param;

		}

		/**
		 * field for StreetNo
		 */

		protected Char12 localStreetNo;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char12
		 */
		public Char12 getStreetNo() {
			return localStreetNo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            StreetNo
		 */
		public void setStreetNo(Char12 param) {

			this.localStreetNo = param;

		}

		/**
		 * field for StrAbbr
		 */

		protected Char2 localStrAbbr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getStrAbbr() {
			return localStrAbbr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            StrAbbr
		 */
		public void setStrAbbr(Char2 param) {

			this.localStrAbbr = param;

		}

		/**
		 * field for HouseNo
		 */

		protected Char10 localHouseNo;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getHouseNo() {
			return localHouseNo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            HouseNo
		 */
		public void setHouseNo(Char10 param) {

			this.localHouseNo = param;

		}

		/**
		 * field for StrSuppl1
		 */

		protected Char40 localStrSuppl1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getStrSuppl1() {
			return localStrSuppl1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            StrSuppl1
		 */
		public void setStrSuppl1(Char40 param) {

			this.localStrSuppl1 = param;

		}

		/**
		 * field for StrSuppl2
		 */

		protected Char40 localStrSuppl2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getStrSuppl2() {
			return localStrSuppl2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            StrSuppl2
		 */
		public void setStrSuppl2(Char40 param) {

			this.localStrSuppl2 = param;

		}

		/**
		 * field for Location
		 */

		protected Char40 localLocation;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getLocation() {
			return localLocation;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Location
		 */
		public void setLocation(Char40 param) {

			this.localLocation = param;

		}

		/**
		 * field for Building
		 */

		protected Char10 localBuilding;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getBuilding() {
			return localBuilding;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Building
		 */
		public void setBuilding(Char10 param) {

			this.localBuilding = param;

		}

		/**
		 * field for Floor
		 */

		protected Char10 localFloor;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getFloor() {
			return localFloor;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Floor
		 */
		public void setFloor(Char10 param) {

			this.localFloor = param;

		}

		/**
		 * field for RoomNo
		 */

		protected Char10 localRoomNo;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getRoomNo() {
			return localRoomNo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            RoomNo
		 */
		public void setRoomNo(Char10 param) {

			this.localRoomNo = param;

		}

		/**
		 * field for Country
		 */

		protected Char3 localCountry;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getCountry() {
			return localCountry;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Country
		 */
		public void setCountry(Char3 param) {

			this.localCountry = param;

		}

		/**
		 * field for Langu
		 */

		protected Lang localLangu;

		/**
		 * Auto generated getter method
		 * 
		 * @return Lang
		 */
		public Lang getLangu() {
			return localLangu;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Langu
		 */
		public void setLangu(Lang param) {

			this.localLangu = param;

		}

		/**
		 * field for Region
		 */

		protected Char3 localRegion;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getRegion() {
			return localRegion;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Region
		 */
		public void setRegion(Char3 param) {

			this.localRegion = param;

		}

		/**
		 * field for Sort1
		 */

		protected Char20 localSort1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char20
		 */
		public Char20 getSort1() {
			return localSort1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sort1
		 */
		public void setSort1(Char20 param) {

			this.localSort1 = param;

		}

		/**
		 * field for Sort2
		 */

		protected Char20 localSort2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char20
		 */
		public Char20 getSort2() {
			return localSort2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sort2
		 */
		public void setSort2(Char20 param) {

			this.localSort2 = param;

		}

		/**
		 * field for TimeZone
		 */

		protected Char6 localTimeZone;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char6
		 */
		public Char6 getTimeZone() {
			return localTimeZone;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            TimeZone
		 */
		public void setTimeZone(Char6 param) {

			this.localTimeZone = param;

		}

		/**
		 * field for Taxjurcode
		 */

		protected Char15 localTaxjurcode;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char15
		 */
		public Char15 getTaxjurcode() {
			return localTaxjurcode;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Taxjurcode
		 */
		public void setTaxjurcode(Char15 param) {

			this.localTaxjurcode = param;

		}

		/**
		 * field for AdrNotes
		 */

		protected Char50 localAdrNotes;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char50
		 */
		public Char50 getAdrNotes() {
			return localAdrNotes;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            AdrNotes
		 */
		public void setAdrNotes(Char50 param) {

			this.localAdrNotes = param;

		}

		/**
		 * field for CommType
		 */

		protected Char3 localCommType;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getCommType() {
			return localCommType;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CommType
		 */
		public void setCommType(Char3 param) {

			this.localCommType = param;

		}

		/**
		 * field for Tel1Numbr
		 */

		protected Char30 localTel1Numbr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char30
		 */
		public Char30 getTel1Numbr() {
			return localTel1Numbr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Tel1Numbr
		 */
		public void setTel1Numbr(Char30 param) {

			this.localTel1Numbr = param;

		}

		/**
		 * field for Tel1Ext
		 */

		protected Char10 localTel1Ext;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getTel1Ext() {
			return localTel1Ext;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Tel1Ext
		 */
		public void setTel1Ext(Char10 param) {

			this.localTel1Ext = param;

		}

		/**
		 * field for FaxNumber
		 */

		protected Char30 localFaxNumber;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char30
		 */
		public Char30 getFaxNumber() {
			return localFaxNumber;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FaxNumber
		 */
		public void setFaxNumber(Char30 param) {

			this.localFaxNumber = param;

		}

		/**
		 * field for FaxExtens
		 */

		protected Char10 localFaxExtens;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getFaxExtens() {
			return localFaxExtens;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            FaxExtens
		 */
		public void setFaxExtens(Char10 param) {

			this.localFaxExtens = param;

		}

		/**
		 * field for StreetLng
		 */

		protected Char60 localStreetLng;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char60
		 */
		public Char60 getStreetLng() {
			return localStreetLng;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            StreetLng
		 */
		public void setStreetLng(Char60 param) {

			this.localStreetLng = param;

		}

		/**
		 * field for DistrctNo
		 */

		protected Char8 localDistrctNo;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char8
		 */
		public Char8 getDistrctNo() {
			return localDistrctNo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DistrctNo
		 */
		public void setDistrctNo(Char8 param) {

			this.localDistrctNo = param;

		}

		/**
		 * field for Chckstatus
		 */

		protected Char1 localChckstatus;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getChckstatus() {
			return localChckstatus;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Chckstatus
		 */
		public void setChckstatus(Char1 param) {

			this.localChckstatus = param;

		}

		/**
		 * field for PboxcitNo
		 */

		protected Char12 localPboxcitNo;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char12
		 */
		public Char12 getPboxcitNo() {
			return localPboxcitNo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PboxcitNo
		 */
		public void setPboxcitNo(Char12 param) {

			this.localPboxcitNo = param;

		}

		/**
		 * field for Transpzone
		 */

		protected Char10 localTranspzone;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getTranspzone() {
			return localTranspzone;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Transpzone
		 */
		public void setTranspzone(Char10 param) {

			this.localTranspzone = param;

		}

		/**
		 * field for HouseNo2
		 */

		protected Char10 localHouseNo2;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getHouseNo2() {
			return localHouseNo2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            HouseNo2
		 */
		public void setHouseNo2(Char10 param) {

			this.localHouseNo2 = param;

		}

		/**
		 * field for EMail
		 */

		protected Char241 localEMail;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char241
		 */
		public Char241 getEMail() {
			return localEMail;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            EMail
		 */
		public void setEMail(Char241 param) {

			this.localEMail = param;

		}

		/**
		 * field for StrSuppl3
		 */

		protected Char40 localStrSuppl3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getStrSuppl3() {
			return localStrSuppl3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            StrSuppl3
		 */
		public void setStrSuppl3(Char40 param) {

			this.localStrSuppl3 = param;

		}

		/**
		 * field for Title
		 */

		protected Char30 localTitle;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char30
		 */
		public Char30 getTitle() {
			return localTitle;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Title
		 */
		public void setTitle(Char30 param) {

			this.localTitle = param;

		}

		/**
		 * field for Countryiso
		 */

		protected Char2 localCountryiso;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getCountryiso() {
			return localCountryiso;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Countryiso
		 */
		public void setCountryiso(Char2 param) {

			this.localCountryiso = param;

		}

		/**
		 * field for LanguIso
		 */

		protected Char2 localLanguIso;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getLanguIso() {
			return localLanguIso;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LanguIso
		 */
		public void setLanguIso(Char2 param) {

			this.localLanguIso = param;

		}

		/**
		 * field for BuildLong
		 */

		protected Char20 localBuildLong;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char20
		 */
		public Char20 getBuildLong() {
			return localBuildLong;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            BuildLong
		 */
		public void setBuildLong(Char20 param) {

			this.localBuildLong = param;

		}

		/**
		 * field for Regiogroup
		 */

		protected Char8 localRegiogroup;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char8
		 */
		public Char8 getRegiogroup() {
			return localRegiogroup;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Regiogroup
		 */
		public void setRegiogroup(Char8 param) {

			this.localRegiogroup = param;

		}

		/**
		 * field for HomeCity
		 */

		protected Char40 localHomeCity;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char40
		 */
		public Char40 getHomeCity() {
			return localHomeCity;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            HomeCity
		 */
		public void setHomeCity(Char40 param) {

			this.localHomeCity = param;

		}

		/**
		 * field for Homecityno
		 */

		protected Char12 localHomecityno;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char12
		 */
		public Char12 getHomecityno() {
			return localHomecityno;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Homecityno
		 */
		public void setHomecityno(Char12 param) {

			this.localHomecityno = param;

		}

		/**
		 * field for Pcode1Ext
		 */

		protected Char10 localPcode1Ext;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getPcode1Ext() {
			return localPcode1Ext;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pcode1Ext
		 */
		public void setPcode1Ext(Char10 param) {

			this.localPcode1Ext = param;

		}

		/**
		 * field for Pcode2Ext
		 */

		protected Char10 localPcode2Ext;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getPcode2Ext() {
			return localPcode2Ext;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pcode2Ext
		 */
		public void setPcode2Ext(Char10 param) {

			this.localPcode2Ext = param;

		}

		/**
		 * field for Pcode3Ext
		 */

		protected Char10 localPcode3Ext;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getPcode3Ext() {
			return localPcode3Ext;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pcode3Ext
		 */
		public void setPcode3Ext(Char10 param) {

			this.localPcode3Ext = param;

		}

		/**
		 * field for PoWONo
		 */

		protected Char1 localPoWONo;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getPoWONo() {
			return localPoWONo;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PoWONo
		 */
		public void setPoWONo(Char1 param) {

			this.localPoWONo = param;

		}

		/**
		 * field for PoBoxReg
		 */

		protected Char3 localPoBoxReg;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getPoBoxReg() {
			return localPoBoxReg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PoBoxReg
		 */
		public void setPoBoxReg(Char3 param) {

			this.localPoBoxReg = param;

		}

		/**
		 * field for PoboxCtry
		 */

		protected Char3 localPoboxCtry;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getPoboxCtry() {
			return localPoboxCtry;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PoboxCtry
		 */
		public void setPoboxCtry(Char3 param) {

			this.localPoboxCtry = param;

		}

		/**
		 * field for PoCtryiso
		 */

		protected Char2 localPoCtryiso;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getPoCtryiso() {
			return localPoCtryiso;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            PoCtryiso
		 */
		public void setPoCtryiso(Char2 param) {

			this.localPoCtryiso = param;

		}

		/**
		 * field for Homepage
		 */

		protected Char132 localHomepage;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char132
		 */
		public Char132 getHomepage() {
			return localHomepage;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Homepage
		 */
		public void setHomepage(Char132 param) {

			this.localHomepage = param;

		}

		/**
		 * field for DontUseS
		 */

		protected Char4 localDontUseS;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getDontUseS() {
			return localDontUseS;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DontUseS
		 */
		public void setDontUseS(Char4 param) {

			this.localDontUseS = param;

		}

		/**
		 * field for DontUseP
		 */

		protected Char4 localDontUseP;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getDontUseP() {
			return localDontUseP;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            DontUseP
		 */
		public void setDontUseP(Char4 param) {

			this.localDontUseP = param;

		}

		/**
		 * field for HouseNo3
		 */

		protected Char10 localHouseNo3;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getHouseNo3() {
			return localHouseNo3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            HouseNo3
		 */
		public void setHouseNo3(Char10 param) {

			this.localHouseNo3 = param;

		}

		/**
		 * field for LanguCr
		 */

		protected Lang localLanguCr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Lang
		 */
		public Lang getLanguCr() {
			return localLanguCr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            LanguCr
		 */
		public void setLanguCr(Lang param) {

			this.localLanguCr = param;

		}

		/**
		 * field for Langucriso
		 */

		protected Char2 localLangucriso;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getLangucriso() {
			return localLangucriso;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Langucriso
		 */
		public void setLangucriso(Char2 param) {

			this.localLangucriso = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Bapiaddr1", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Bapiaddr1", xmlWriter);
				}

			}

			if (localAddrNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"AddrNo cannot be null!!");
			}
			localAddrNo.serialize(new javax.xml.namespace.QName("", "AddrNo"),
					xmlWriter);

			if (localFormofaddr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Formofaddr cannot be null!!");
			}
			localFormofaddr.serialize(new javax.xml.namespace.QName("",
					"Formofaddr"), xmlWriter);

			if (localName == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name cannot be null!!");
			}
			localName.serialize(new javax.xml.namespace.QName("", "Name"),
					xmlWriter);

			if (localName2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name2 cannot be null!!");
			}
			localName2.serialize(new javax.xml.namespace.QName("", "Name2"),
					xmlWriter);

			if (localName3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name3 cannot be null!!");
			}
			localName3.serialize(new javax.xml.namespace.QName("", "Name3"),
					xmlWriter);

			if (localName4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name4 cannot be null!!");
			}
			localName4.serialize(new javax.xml.namespace.QName("", "Name4"),
					xmlWriter);

			if (localCOName == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"COName cannot be null!!");
			}
			localCOName.serialize(new javax.xml.namespace.QName("", "COName"),
					xmlWriter);

			if (localCity == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"City cannot be null!!");
			}
			localCity.serialize(new javax.xml.namespace.QName("", "City"),
					xmlWriter);

			if (localDistrict == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"District cannot be null!!");
			}
			localDistrict.serialize(new javax.xml.namespace.QName("",
					"District"), xmlWriter);

			if (localCityNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"CityNo cannot be null!!");
			}
			localCityNo.serialize(new javax.xml.namespace.QName("", "CityNo"),
					xmlWriter);

			if (localPostlCod1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PostlCod1 cannot be null!!");
			}
			localPostlCod1.serialize(new javax.xml.namespace.QName("",
					"PostlCod1"), xmlWriter);

			if (localPostlCod2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PostlCod2 cannot be null!!");
			}
			localPostlCod2.serialize(new javax.xml.namespace.QName("",
					"PostlCod2"), xmlWriter);

			if (localPostlCod3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PostlCod3 cannot be null!!");
			}
			localPostlCod3.serialize(new javax.xml.namespace.QName("",
					"PostlCod3"), xmlWriter);

			if (localPoBox == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoBox cannot be null!!");
			}
			localPoBox.serialize(new javax.xml.namespace.QName("", "PoBox"),
					xmlWriter);

			if (localPoBoxCit == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoBoxCit cannot be null!!");
			}
			localPoBoxCit.serialize(new javax.xml.namespace.QName("",
					"PoBoxCit"), xmlWriter);

			if (localDelivDis == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"DelivDis cannot be null!!");
			}
			localDelivDis.serialize(new javax.xml.namespace.QName("",
					"DelivDis"), xmlWriter);

			if (localStreet == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Street cannot be null!!");
			}
			localStreet.serialize(new javax.xml.namespace.QName("", "Street"),
					xmlWriter);

			if (localStreetNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StreetNo cannot be null!!");
			}
			localStreetNo.serialize(new javax.xml.namespace.QName("",
					"StreetNo"), xmlWriter);

			if (localStrAbbr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StrAbbr cannot be null!!");
			}
			localStrAbbr.serialize(
					new javax.xml.namespace.QName("", "StrAbbr"), xmlWriter);

			if (localHouseNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"HouseNo cannot be null!!");
			}
			localHouseNo.serialize(
					new javax.xml.namespace.QName("", "HouseNo"), xmlWriter);

			if (localStrSuppl1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StrSuppl1 cannot be null!!");
			}
			localStrSuppl1.serialize(new javax.xml.namespace.QName("",
					"StrSuppl1"), xmlWriter);

			if (localStrSuppl2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StrSuppl2 cannot be null!!");
			}
			localStrSuppl2.serialize(new javax.xml.namespace.QName("",
					"StrSuppl2"), xmlWriter);

			if (localLocation == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Location cannot be null!!");
			}
			localLocation.serialize(new javax.xml.namespace.QName("",
					"Location"), xmlWriter);

			if (localBuilding == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Building cannot be null!!");
			}
			localBuilding.serialize(new javax.xml.namespace.QName("",
					"Building"), xmlWriter);

			if (localFloor == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Floor cannot be null!!");
			}
			localFloor.serialize(new javax.xml.namespace.QName("", "Floor"),
					xmlWriter);

			if (localRoomNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"RoomNo cannot be null!!");
			}
			localRoomNo.serialize(new javax.xml.namespace.QName("", "RoomNo"),
					xmlWriter);

			if (localCountry == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Country cannot be null!!");
			}
			localCountry.serialize(
					new javax.xml.namespace.QName("", "Country"), xmlWriter);

			if (localLangu == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Langu cannot be null!!");
			}
			localLangu.serialize(new javax.xml.namespace.QName("", "Langu"),
					xmlWriter);

			if (localRegion == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Region cannot be null!!");
			}
			localRegion.serialize(new javax.xml.namespace.QName("", "Region"),
					xmlWriter);

			if (localSort1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sort1 cannot be null!!");
			}
			localSort1.serialize(new javax.xml.namespace.QName("", "Sort1"),
					xmlWriter);

			if (localSort2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sort2 cannot be null!!");
			}
			localSort2.serialize(new javax.xml.namespace.QName("", "Sort2"),
					xmlWriter);

			if (localTimeZone == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"TimeZone cannot be null!!");
			}
			localTimeZone.serialize(new javax.xml.namespace.QName("",
					"TimeZone"), xmlWriter);

			if (localTaxjurcode == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Taxjurcode cannot be null!!");
			}
			localTaxjurcode.serialize(new javax.xml.namespace.QName("",
					"Taxjurcode"), xmlWriter);

			if (localAdrNotes == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"AdrNotes cannot be null!!");
			}
			localAdrNotes.serialize(new javax.xml.namespace.QName("",
					"AdrNotes"), xmlWriter);

			if (localCommType == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"CommType cannot be null!!");
			}
			localCommType.serialize(new javax.xml.namespace.QName("",
					"CommType"), xmlWriter);

			if (localTel1Numbr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tel1Numbr cannot be null!!");
			}
			localTel1Numbr.serialize(new javax.xml.namespace.QName("",
					"Tel1Numbr"), xmlWriter);

			if (localTel1Ext == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tel1Ext cannot be null!!");
			}
			localTel1Ext.serialize(
					new javax.xml.namespace.QName("", "Tel1Ext"), xmlWriter);

			if (localFaxNumber == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"FaxNumber cannot be null!!");
			}
			localFaxNumber.serialize(new javax.xml.namespace.QName("",
					"FaxNumber"), xmlWriter);

			if (localFaxExtens == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"FaxExtens cannot be null!!");
			}
			localFaxExtens.serialize(new javax.xml.namespace.QName("",
					"FaxExtens"), xmlWriter);

			if (localStreetLng == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StreetLng cannot be null!!");
			}
			localStreetLng.serialize(new javax.xml.namespace.QName("",
					"StreetLng"), xmlWriter);

			if (localDistrctNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"DistrctNo cannot be null!!");
			}
			localDistrctNo.serialize(new javax.xml.namespace.QName("",
					"DistrctNo"), xmlWriter);

			if (localChckstatus == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Chckstatus cannot be null!!");
			}
			localChckstatus.serialize(new javax.xml.namespace.QName("",
					"Chckstatus"), xmlWriter);

			if (localPboxcitNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PboxcitNo cannot be null!!");
			}
			localPboxcitNo.serialize(new javax.xml.namespace.QName("",
					"PboxcitNo"), xmlWriter);

			if (localTranspzone == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Transpzone cannot be null!!");
			}
			localTranspzone.serialize(new javax.xml.namespace.QName("",
					"Transpzone"), xmlWriter);

			if (localHouseNo2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"HouseNo2 cannot be null!!");
			}
			localHouseNo2.serialize(new javax.xml.namespace.QName("",
					"HouseNo2"), xmlWriter);

			if (localEMail == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"EMail cannot be null!!");
			}
			localEMail.serialize(new javax.xml.namespace.QName("", "EMail"),
					xmlWriter);

			if (localStrSuppl3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StrSuppl3 cannot be null!!");
			}
			localStrSuppl3.serialize(new javax.xml.namespace.QName("",
					"StrSuppl3"), xmlWriter);

			if (localTitle == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Title cannot be null!!");
			}
			localTitle.serialize(new javax.xml.namespace.QName("", "Title"),
					xmlWriter);

			if (localCountryiso == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Countryiso cannot be null!!");
			}
			localCountryiso.serialize(new javax.xml.namespace.QName("",
					"Countryiso"), xmlWriter);

			if (localLanguIso == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"LanguIso cannot be null!!");
			}
			localLanguIso.serialize(new javax.xml.namespace.QName("",
					"LanguIso"), xmlWriter);

			if (localBuildLong == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"BuildLong cannot be null!!");
			}
			localBuildLong.serialize(new javax.xml.namespace.QName("",
					"BuildLong"), xmlWriter);

			if (localRegiogroup == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Regiogroup cannot be null!!");
			}
			localRegiogroup.serialize(new javax.xml.namespace.QName("",
					"Regiogroup"), xmlWriter);

			if (localHomeCity == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"HomeCity cannot be null!!");
			}
			localHomeCity.serialize(new javax.xml.namespace.QName("",
					"HomeCity"), xmlWriter);

			if (localHomecityno == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Homecityno cannot be null!!");
			}
			localHomecityno.serialize(new javax.xml.namespace.QName("",
					"Homecityno"), xmlWriter);

			if (localPcode1Ext == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pcode1Ext cannot be null!!");
			}
			localPcode1Ext.serialize(new javax.xml.namespace.QName("",
					"Pcode1Ext"), xmlWriter);

			if (localPcode2Ext == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pcode2Ext cannot be null!!");
			}
			localPcode2Ext.serialize(new javax.xml.namespace.QName("",
					"Pcode2Ext"), xmlWriter);

			if (localPcode3Ext == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pcode3Ext cannot be null!!");
			}
			localPcode3Ext.serialize(new javax.xml.namespace.QName("",
					"Pcode3Ext"), xmlWriter);

			if (localPoWONo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoWONo cannot be null!!");
			}
			localPoWONo.serialize(new javax.xml.namespace.QName("", "PoWONo"),
					xmlWriter);

			if (localPoBoxReg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoBoxReg cannot be null!!");
			}
			localPoBoxReg.serialize(new javax.xml.namespace.QName("",
					"PoBoxReg"), xmlWriter);

			if (localPoboxCtry == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoboxCtry cannot be null!!");
			}
			localPoboxCtry.serialize(new javax.xml.namespace.QName("",
					"PoboxCtry"), xmlWriter);

			if (localPoCtryiso == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoCtryiso cannot be null!!");
			}
			localPoCtryiso.serialize(new javax.xml.namespace.QName("",
					"PoCtryiso"), xmlWriter);

			if (localHomepage == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Homepage cannot be null!!");
			}
			localHomepage.serialize(new javax.xml.namespace.QName("",
					"Homepage"), xmlWriter);

			if (localDontUseS == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"DontUseS cannot be null!!");
			}
			localDontUseS.serialize(new javax.xml.namespace.QName("",
					"DontUseS"), xmlWriter);

			if (localDontUseP == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"DontUseP cannot be null!!");
			}
			localDontUseP.serialize(new javax.xml.namespace.QName("",
					"DontUseP"), xmlWriter);

			if (localHouseNo3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"HouseNo3 cannot be null!!");
			}
			localHouseNo3.serialize(new javax.xml.namespace.QName("",
					"HouseNo3"), xmlWriter);

			if (localLanguCr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"LanguCr cannot be null!!");
			}
			localLanguCr.serialize(
					new javax.xml.namespace.QName("", "LanguCr"), xmlWriter);

			if (localLangucriso == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Langucriso cannot be null!!");
			}
			localLangucriso.serialize(new javax.xml.namespace.QName("",
					"Langucriso"), xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "AddrNo"));

			if (localAddrNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"AddrNo cannot be null!!");
			}
			elementList.add(localAddrNo);

			elementList.add(new javax.xml.namespace.QName("", "Formofaddr"));

			if (localFormofaddr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Formofaddr cannot be null!!");
			}
			elementList.add(localFormofaddr);

			elementList.add(new javax.xml.namespace.QName("", "Name"));

			if (localName == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name cannot be null!!");
			}
			elementList.add(localName);

			elementList.add(new javax.xml.namespace.QName("", "Name2"));

			if (localName2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name2 cannot be null!!");
			}
			elementList.add(localName2);

			elementList.add(new javax.xml.namespace.QName("", "Name3"));

			if (localName3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name3 cannot be null!!");
			}
			elementList.add(localName3);

			elementList.add(new javax.xml.namespace.QName("", "Name4"));

			if (localName4 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name4 cannot be null!!");
			}
			elementList.add(localName4);

			elementList.add(new javax.xml.namespace.QName("", "COName"));

			if (localCOName == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"COName cannot be null!!");
			}
			elementList.add(localCOName);

			elementList.add(new javax.xml.namespace.QName("", "City"));

			if (localCity == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"City cannot be null!!");
			}
			elementList.add(localCity);

			elementList.add(new javax.xml.namespace.QName("", "District"));

			if (localDistrict == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"District cannot be null!!");
			}
			elementList.add(localDistrict);

			elementList.add(new javax.xml.namespace.QName("", "CityNo"));

			if (localCityNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"CityNo cannot be null!!");
			}
			elementList.add(localCityNo);

			elementList.add(new javax.xml.namespace.QName("", "PostlCod1"));

			if (localPostlCod1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PostlCod1 cannot be null!!");
			}
			elementList.add(localPostlCod1);

			elementList.add(new javax.xml.namespace.QName("", "PostlCod2"));

			if (localPostlCod2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PostlCod2 cannot be null!!");
			}
			elementList.add(localPostlCod2);

			elementList.add(new javax.xml.namespace.QName("", "PostlCod3"));

			if (localPostlCod3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PostlCod3 cannot be null!!");
			}
			elementList.add(localPostlCod3);

			elementList.add(new javax.xml.namespace.QName("", "PoBox"));

			if (localPoBox == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoBox cannot be null!!");
			}
			elementList.add(localPoBox);

			elementList.add(new javax.xml.namespace.QName("", "PoBoxCit"));

			if (localPoBoxCit == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoBoxCit cannot be null!!");
			}
			elementList.add(localPoBoxCit);

			elementList.add(new javax.xml.namespace.QName("", "DelivDis"));

			if (localDelivDis == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"DelivDis cannot be null!!");
			}
			elementList.add(localDelivDis);

			elementList.add(new javax.xml.namespace.QName("", "Street"));

			if (localStreet == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Street cannot be null!!");
			}
			elementList.add(localStreet);

			elementList.add(new javax.xml.namespace.QName("", "StreetNo"));

			if (localStreetNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StreetNo cannot be null!!");
			}
			elementList.add(localStreetNo);

			elementList.add(new javax.xml.namespace.QName("", "StrAbbr"));

			if (localStrAbbr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StrAbbr cannot be null!!");
			}
			elementList.add(localStrAbbr);

			elementList.add(new javax.xml.namespace.QName("", "HouseNo"));

			if (localHouseNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"HouseNo cannot be null!!");
			}
			elementList.add(localHouseNo);

			elementList.add(new javax.xml.namespace.QName("", "StrSuppl1"));

			if (localStrSuppl1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StrSuppl1 cannot be null!!");
			}
			elementList.add(localStrSuppl1);

			elementList.add(new javax.xml.namespace.QName("", "StrSuppl2"));

			if (localStrSuppl2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StrSuppl2 cannot be null!!");
			}
			elementList.add(localStrSuppl2);

			elementList.add(new javax.xml.namespace.QName("", "Location"));

			if (localLocation == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Location cannot be null!!");
			}
			elementList.add(localLocation);

			elementList.add(new javax.xml.namespace.QName("", "Building"));

			if (localBuilding == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Building cannot be null!!");
			}
			elementList.add(localBuilding);

			elementList.add(new javax.xml.namespace.QName("", "Floor"));

			if (localFloor == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Floor cannot be null!!");
			}
			elementList.add(localFloor);

			elementList.add(new javax.xml.namespace.QName("", "RoomNo"));

			if (localRoomNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"RoomNo cannot be null!!");
			}
			elementList.add(localRoomNo);

			elementList.add(new javax.xml.namespace.QName("", "Country"));

			if (localCountry == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Country cannot be null!!");
			}
			elementList.add(localCountry);

			elementList.add(new javax.xml.namespace.QName("", "Langu"));

			if (localLangu == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Langu cannot be null!!");
			}
			elementList.add(localLangu);

			elementList.add(new javax.xml.namespace.QName("", "Region"));

			if (localRegion == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Region cannot be null!!");
			}
			elementList.add(localRegion);

			elementList.add(new javax.xml.namespace.QName("", "Sort1"));

			if (localSort1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sort1 cannot be null!!");
			}
			elementList.add(localSort1);

			elementList.add(new javax.xml.namespace.QName("", "Sort2"));

			if (localSort2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sort2 cannot be null!!");
			}
			elementList.add(localSort2);

			elementList.add(new javax.xml.namespace.QName("", "TimeZone"));

			if (localTimeZone == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"TimeZone cannot be null!!");
			}
			elementList.add(localTimeZone);

			elementList.add(new javax.xml.namespace.QName("", "Taxjurcode"));

			if (localTaxjurcode == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Taxjurcode cannot be null!!");
			}
			elementList.add(localTaxjurcode);

			elementList.add(new javax.xml.namespace.QName("", "AdrNotes"));

			if (localAdrNotes == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"AdrNotes cannot be null!!");
			}
			elementList.add(localAdrNotes);

			elementList.add(new javax.xml.namespace.QName("", "CommType"));

			if (localCommType == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"CommType cannot be null!!");
			}
			elementList.add(localCommType);

			elementList.add(new javax.xml.namespace.QName("", "Tel1Numbr"));

			if (localTel1Numbr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tel1Numbr cannot be null!!");
			}
			elementList.add(localTel1Numbr);

			elementList.add(new javax.xml.namespace.QName("", "Tel1Ext"));

			if (localTel1Ext == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tel1Ext cannot be null!!");
			}
			elementList.add(localTel1Ext);

			elementList.add(new javax.xml.namespace.QName("", "FaxNumber"));

			if (localFaxNumber == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"FaxNumber cannot be null!!");
			}
			elementList.add(localFaxNumber);

			elementList.add(new javax.xml.namespace.QName("", "FaxExtens"));

			if (localFaxExtens == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"FaxExtens cannot be null!!");
			}
			elementList.add(localFaxExtens);

			elementList.add(new javax.xml.namespace.QName("", "StreetLng"));

			if (localStreetLng == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StreetLng cannot be null!!");
			}
			elementList.add(localStreetLng);

			elementList.add(new javax.xml.namespace.QName("", "DistrctNo"));

			if (localDistrctNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"DistrctNo cannot be null!!");
			}
			elementList.add(localDistrctNo);

			elementList.add(new javax.xml.namespace.QName("", "Chckstatus"));

			if (localChckstatus == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Chckstatus cannot be null!!");
			}
			elementList.add(localChckstatus);

			elementList.add(new javax.xml.namespace.QName("", "PboxcitNo"));

			if (localPboxcitNo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PboxcitNo cannot be null!!");
			}
			elementList.add(localPboxcitNo);

			elementList.add(new javax.xml.namespace.QName("", "Transpzone"));

			if (localTranspzone == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Transpzone cannot be null!!");
			}
			elementList.add(localTranspzone);

			elementList.add(new javax.xml.namespace.QName("", "HouseNo2"));

			if (localHouseNo2 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"HouseNo2 cannot be null!!");
			}
			elementList.add(localHouseNo2);

			elementList.add(new javax.xml.namespace.QName("", "EMail"));

			if (localEMail == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"EMail cannot be null!!");
			}
			elementList.add(localEMail);

			elementList.add(new javax.xml.namespace.QName("", "StrSuppl3"));

			if (localStrSuppl3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"StrSuppl3 cannot be null!!");
			}
			elementList.add(localStrSuppl3);

			elementList.add(new javax.xml.namespace.QName("", "Title"));

			if (localTitle == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Title cannot be null!!");
			}
			elementList.add(localTitle);

			elementList.add(new javax.xml.namespace.QName("", "Countryiso"));

			if (localCountryiso == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Countryiso cannot be null!!");
			}
			elementList.add(localCountryiso);

			elementList.add(new javax.xml.namespace.QName("", "LanguIso"));

			if (localLanguIso == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"LanguIso cannot be null!!");
			}
			elementList.add(localLanguIso);

			elementList.add(new javax.xml.namespace.QName("", "BuildLong"));

			if (localBuildLong == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"BuildLong cannot be null!!");
			}
			elementList.add(localBuildLong);

			elementList.add(new javax.xml.namespace.QName("", "Regiogroup"));

			if (localRegiogroup == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Regiogroup cannot be null!!");
			}
			elementList.add(localRegiogroup);

			elementList.add(new javax.xml.namespace.QName("", "HomeCity"));

			if (localHomeCity == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"HomeCity cannot be null!!");
			}
			elementList.add(localHomeCity);

			elementList.add(new javax.xml.namespace.QName("", "Homecityno"));

			if (localHomecityno == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Homecityno cannot be null!!");
			}
			elementList.add(localHomecityno);

			elementList.add(new javax.xml.namespace.QName("", "Pcode1Ext"));

			if (localPcode1Ext == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pcode1Ext cannot be null!!");
			}
			elementList.add(localPcode1Ext);

			elementList.add(new javax.xml.namespace.QName("", "Pcode2Ext"));

			if (localPcode2Ext == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pcode2Ext cannot be null!!");
			}
			elementList.add(localPcode2Ext);

			elementList.add(new javax.xml.namespace.QName("", "Pcode3Ext"));

			if (localPcode3Ext == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pcode3Ext cannot be null!!");
			}
			elementList.add(localPcode3Ext);

			elementList.add(new javax.xml.namespace.QName("", "PoWONo"));

			if (localPoWONo == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoWONo cannot be null!!");
			}
			elementList.add(localPoWONo);

			elementList.add(new javax.xml.namespace.QName("", "PoBoxReg"));

			if (localPoBoxReg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoBoxReg cannot be null!!");
			}
			elementList.add(localPoBoxReg);

			elementList.add(new javax.xml.namespace.QName("", "PoboxCtry"));

			if (localPoboxCtry == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoboxCtry cannot be null!!");
			}
			elementList.add(localPoboxCtry);

			elementList.add(new javax.xml.namespace.QName("", "PoCtryiso"));

			if (localPoCtryiso == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"PoCtryiso cannot be null!!");
			}
			elementList.add(localPoCtryiso);

			elementList.add(new javax.xml.namespace.QName("", "Homepage"));

			if (localHomepage == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Homepage cannot be null!!");
			}
			elementList.add(localHomepage);

			elementList.add(new javax.xml.namespace.QName("", "DontUseS"));

			if (localDontUseS == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"DontUseS cannot be null!!");
			}
			elementList.add(localDontUseS);

			elementList.add(new javax.xml.namespace.QName("", "DontUseP"));

			if (localDontUseP == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"DontUseP cannot be null!!");
			}
			elementList.add(localDontUseP);

			elementList.add(new javax.xml.namespace.QName("", "HouseNo3"));

			if (localHouseNo3 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"HouseNo3 cannot be null!!");
			}
			elementList.add(localHouseNo3);

			elementList.add(new javax.xml.namespace.QName("", "LanguCr"));

			if (localLanguCr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"LanguCr cannot be null!!");
			}
			elementList.add(localLanguCr);

			elementList.add(new javax.xml.namespace.QName("", "Langucriso"));

			if (localLangucriso == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Langucriso cannot be null!!");
			}
			elementList.add(localLangucriso);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Bapiaddr1 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Bapiaddr1 object = new Bapiaddr1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"Bapiaddr1".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Bapiaddr1) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "AddrNo")
									.equals(reader.getName())) {

						object.setAddrNo(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Formofaddr")
									.equals(reader.getName())) {

						object.setFormofaddr(Char20.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Name")
									.equals(reader.getName())) {

						object.setName(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Name2")
									.equals(reader.getName())) {

						object.setName2(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Name3")
									.equals(reader.getName())) {

						object.setName3(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Name4")
									.equals(reader.getName())) {

						object.setName4(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "COName")
									.equals(reader.getName())) {

						object.setCOName(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "City")
									.equals(reader.getName())) {

						object.setCity(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "District")
									.equals(reader.getName())) {

						object.setDistrict(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "CityNo")
									.equals(reader.getName())) {

						object.setCityNo(Char12.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PostlCod1")
									.equals(reader.getName())) {

						object.setPostlCod1(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PostlCod2")
									.equals(reader.getName())) {

						object.setPostlCod2(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PostlCod3")
									.equals(reader.getName())) {

						object.setPostlCod3(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PoBox")
									.equals(reader.getName())) {

						object.setPoBox(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PoBoxCit")
									.equals(reader.getName())) {

						object.setPoBoxCit(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "DelivDis")
									.equals(reader.getName())) {

						object.setDelivDis(Char15.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Street")
									.equals(reader.getName())) {

						object.setStreet(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "StreetNo")
									.equals(reader.getName())) {

						object.setStreetNo(Char12.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "StrAbbr")
									.equals(reader.getName())) {

						object.setStrAbbr(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "HouseNo")
									.equals(reader.getName())) {

						object.setHouseNo(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "StrSuppl1")
									.equals(reader.getName())) {

						object.setStrSuppl1(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "StrSuppl2")
									.equals(reader.getName())) {

						object.setStrSuppl2(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Location")
									.equals(reader.getName())) {

						object.setLocation(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Building")
									.equals(reader.getName())) {

						object.setBuilding(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Floor")
									.equals(reader.getName())) {

						object.setFloor(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "RoomNo")
									.equals(reader.getName())) {

						object.setRoomNo(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Country")
									.equals(reader.getName())) {

						object.setCountry(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Langu")
									.equals(reader.getName())) {

						object.setLangu(Lang.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Region")
									.equals(reader.getName())) {

						object.setRegion(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sort1")
									.equals(reader.getName())) {

						object.setSort1(Char20.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sort2")
									.equals(reader.getName())) {

						object.setSort2(Char20.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "TimeZone")
									.equals(reader.getName())) {

						object.setTimeZone(Char6.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Taxjurcode")
									.equals(reader.getName())) {

						object.setTaxjurcode(Char15.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "AdrNotes")
									.equals(reader.getName())) {

						object.setAdrNotes(Char50.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "CommType")
									.equals(reader.getName())) {

						object.setCommType(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Tel1Numbr")
									.equals(reader.getName())) {

						object.setTel1Numbr(Char30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Tel1Ext")
									.equals(reader.getName())) {

						object.setTel1Ext(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "FaxNumber")
									.equals(reader.getName())) {

						object.setFaxNumber(Char30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "FaxExtens")
									.equals(reader.getName())) {

						object.setFaxExtens(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "StreetLng")
									.equals(reader.getName())) {

						object.setStreetLng(Char60.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "DistrctNo")
									.equals(reader.getName())) {

						object.setDistrctNo(Char8.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Chckstatus")
									.equals(reader.getName())) {

						object.setChckstatus(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PboxcitNo")
									.equals(reader.getName())) {

						object.setPboxcitNo(Char12.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Transpzone")
									.equals(reader.getName())) {

						object.setTranspzone(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "HouseNo2")
									.equals(reader.getName())) {

						object.setHouseNo2(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "EMail")
									.equals(reader.getName())) {

						object.setEMail(Char241.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "StrSuppl3")
									.equals(reader.getName())) {

						object.setStrSuppl3(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Title")
									.equals(reader.getName())) {

						object.setTitle(Char30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Countryiso")
									.equals(reader.getName())) {

						object.setCountryiso(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "LanguIso")
									.equals(reader.getName())) {

						object.setLanguIso(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "BuildLong")
									.equals(reader.getName())) {

						object.setBuildLong(Char20.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Regiogroup")
									.equals(reader.getName())) {

						object.setRegiogroup(Char8.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "HomeCity")
									.equals(reader.getName())) {

						object.setHomeCity(Char40.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Homecityno")
									.equals(reader.getName())) {

						object.setHomecityno(Char12.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pcode1Ext")
									.equals(reader.getName())) {

						object.setPcode1Ext(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pcode2Ext")
									.equals(reader.getName())) {

						object.setPcode2Ext(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pcode3Ext")
									.equals(reader.getName())) {

						object.setPcode3Ext(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PoWONo")
									.equals(reader.getName())) {

						object.setPoWONo(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PoBoxReg")
									.equals(reader.getName())) {

						object.setPoBoxReg(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PoboxCtry")
									.equals(reader.getName())) {

						object.setPoboxCtry(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "PoCtryiso")
									.equals(reader.getName())) {

						object.setPoCtryiso(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Homepage")
									.equals(reader.getName())) {

						object.setHomepage(Char132.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "DontUseS")
									.equals(reader.getName())) {

						object.setDontUseS(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "DontUseP")
									.equals(reader.getName())) {

						object.setDontUseP(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "HouseNo3")
									.equals(reader.getName())) {

						object.setHouseNo3(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "LanguCr")
									.equals(reader.getName())) {

						object.setLanguCr(Lang.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Langucriso")
									.equals(reader.getName())) {

						object.setLangucriso(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class ZsdCustomerMaintainAllRfcException implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * ZsdCustomerMaintainAll.RfcException Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Name
		 */

		protected ZsdCustomerMaintainAllRfcExceptions localName;

		/**
		 * Auto generated getter method
		 * 
		 * @return ZsdCustomerMaintainAllRfcExceptions
		 */
		public ZsdCustomerMaintainAllRfcExceptions getName() {
			return localName;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Name
		 */
		public void setName(ZsdCustomerMaintainAllRfcExceptions param) {

			this.localName = param;

		}

		/**
		 * field for Text
		 */

		protected java.lang.String localText;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localTextTracker = false;

		public boolean isTextSpecified() {
			return localTextTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getText() {
			return localText;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Text
		 */
		public void setText(java.lang.String param) {
			localTextTracker = param != null;

			this.localText = param;

		}

		/**
		 * field for Message
		 */

		protected RfcExceptionMessage localMessage;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localMessageTracker = false;

		public boolean isMessageSpecified() {
			return localMessageTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return RfcExceptionMessage
		 */
		public RfcExceptionMessage getMessage() {
			return localMessage;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Message
		 */
		public void setMessage(RfcExceptionMessage param) {
			localMessageTracker = param != null;

			this.localMessage = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix
									+ ":ZsdCustomerMaintainAll.RfcException",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "ZsdCustomerMaintainAll.RfcException",
							xmlWriter);
				}

			}

			if (localName == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name cannot be null!!");
			}
			localName.serialize(new javax.xml.namespace.QName("", "Name"),
					xmlWriter);
			if (localTextTracker) {
				namespace = "";
				writeStartElement(null, namespace, "Text", xmlWriter);

				if (localText == null) {
					// write the nil attribute

					throw new org.apache.axis2.databinding.ADBException(
							"Text cannot be null!!");

				} else {

					xmlWriter.writeCharacters(localText);

				}

				xmlWriter.writeEndElement();
			}
			if (localMessageTracker) {
				if (localMessage == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Message cannot be null!!");
				}
				localMessage.serialize(new javax.xml.namespace.QName("",
						"Message"), xmlWriter);
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "Name"));

			if (localName == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Name cannot be null!!");
			}
			elementList.add(localName);
			if (localTextTracker) {
				elementList.add(new javax.xml.namespace.QName("", "Text"));

				if (localText != null) {
					elementList
							.add(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localText));
				} else {
					throw new org.apache.axis2.databinding.ADBException(
							"Text cannot be null!!");
				}
			}
			if (localMessageTracker) {
				elementList.add(new javax.xml.namespace.QName("", "Message"));

				if (localMessage == null) {
					throw new org.apache.axis2.databinding.ADBException(
							"Message cannot be null!!");
				}
				elementList.add(localMessage);
			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static ZsdCustomerMaintainAllRfcException parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				ZsdCustomerMaintainAllRfcException object = new ZsdCustomerMaintainAllRfcException();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"ZsdCustomerMaintainAll.RfcException"
									.equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (ZsdCustomerMaintainAllRfcException) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Name")
									.equals(reader.getName())) {

						object.setName(ZsdCustomerMaintainAllRfcExceptions.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Text")
									.equals(reader.getName())) {

						nillableValue = reader.getAttributeValue(
								"http://www.w3.org/2001/XMLSchema-instance",
								"nil");
						if ("true".equals(nillableValue)
								|| "1".equals(nillableValue)) {
							throw new org.apache.axis2.databinding.ADBException(
									"The element: " + "Text"
											+ "  cannot be null");
						}

						java.lang.String content = reader.getElementText();

						object.setText(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(content));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Message")
									.equals(reader.getName())) {

						object.setMessage(RfcExceptionMessage.Factory
								.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Fkuntxt implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * Fkuntxt Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Kunnr
		 */

		protected Char10 localKunnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKunnr() {
			return localKunnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kunnr
		 */
		public void setKunnr(Char10 param) {

			this.localKunnr = param;

		}

		/**
		 * field for Parnr
		 */

		protected Numeric10 localParnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric10
		 */
		public Numeric10 getParnr() {
			return localParnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Parnr
		 */
		public void setParnr(Numeric10 param) {

			this.localParnr = param;

		}

		/**
		 * field for Bukrs
		 */

		protected Char4 localBukrs;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getBukrs() {
			return localBukrs;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bukrs
		 */
		public void setBukrs(Char4 param) {

			this.localBukrs = param;

		}

		/**
		 * field for Vkorg
		 */

		protected Char4 localVkorg;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getVkorg() {
			return localVkorg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vkorg
		 */
		public void setVkorg(Char4 param) {

			this.localVkorg = param;

		}

		/**
		 * field for Vtweg
		 */

		protected Char2 localVtweg;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getVtweg() {
			return localVtweg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vtweg
		 */
		public void setVtweg(Char2 param) {

			this.localVtweg = param;

		}

		/**
		 * field for Spart
		 */

		protected Char2 localSpart;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getSpart() {
			return localSpart;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Spart
		 */
		public void setSpart(Char2 param) {

			this.localSpart = param;

		}

		/**
		 * field for UpdA
		 */

		protected Char1 localUpdA;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getUpdA() {
			return localUpdA;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            UpdA
		 */
		public void setUpdA(Char1 param) {

			this.localUpdA = param;

		}

		/**
		 * field for UpdB
		 */

		protected Char1 localUpdB;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getUpdB() {
			return localUpdB;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            UpdB
		 */
		public void setUpdB(Char1 param) {

			this.localUpdB = param;

		}

		/**
		 * field for UpdV
		 */

		protected Char1 localUpdV;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getUpdV() {
			return localUpdV;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            UpdV
		 */
		public void setUpdV(Char1 param) {

			this.localUpdV = param;

		}

		/**
		 * field for UpdAp
		 */

		protected Char1 localUpdAp;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getUpdAp() {
			return localUpdAp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            UpdAp
		 */
		public void setUpdAp(Char1 param) {

			this.localUpdAp = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Fkuntxt", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Fkuntxt", xmlWriter);
				}

			}

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			localKunnr.serialize(new javax.xml.namespace.QName("", "Kunnr"),
					xmlWriter);

			if (localParnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parnr cannot be null!!");
			}
			localParnr.serialize(new javax.xml.namespace.QName("", "Parnr"),
					xmlWriter);

			if (localBukrs == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bukrs cannot be null!!");
			}
			localBukrs.serialize(new javax.xml.namespace.QName("", "Bukrs"),
					xmlWriter);

			if (localVkorg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vkorg cannot be null!!");
			}
			localVkorg.serialize(new javax.xml.namespace.QName("", "Vkorg"),
					xmlWriter);

			if (localVtweg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vtweg cannot be null!!");
			}
			localVtweg.serialize(new javax.xml.namespace.QName("", "Vtweg"),
					xmlWriter);

			if (localSpart == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Spart cannot be null!!");
			}
			localSpart.serialize(new javax.xml.namespace.QName("", "Spart"),
					xmlWriter);

			if (localUpdA == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"UpdA cannot be null!!");
			}
			localUpdA.serialize(new javax.xml.namespace.QName("", "UpdA"),
					xmlWriter);

			if (localUpdB == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"UpdB cannot be null!!");
			}
			localUpdB.serialize(new javax.xml.namespace.QName("", "UpdB"),
					xmlWriter);

			if (localUpdV == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"UpdV cannot be null!!");
			}
			localUpdV.serialize(new javax.xml.namespace.QName("", "UpdV"),
					xmlWriter);

			if (localUpdAp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"UpdAp cannot be null!!");
			}
			localUpdAp.serialize(new javax.xml.namespace.QName("", "UpdAp"),
					xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "Kunnr"));

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			elementList.add(localKunnr);

			elementList.add(new javax.xml.namespace.QName("", "Parnr"));

			if (localParnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Parnr cannot be null!!");
			}
			elementList.add(localParnr);

			elementList.add(new javax.xml.namespace.QName("", "Bukrs"));

			if (localBukrs == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bukrs cannot be null!!");
			}
			elementList.add(localBukrs);

			elementList.add(new javax.xml.namespace.QName("", "Vkorg"));

			if (localVkorg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vkorg cannot be null!!");
			}
			elementList.add(localVkorg);

			elementList.add(new javax.xml.namespace.QName("", "Vtweg"));

			if (localVtweg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vtweg cannot be null!!");
			}
			elementList.add(localVtweg);

			elementList.add(new javax.xml.namespace.QName("", "Spart"));

			if (localSpart == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Spart cannot be null!!");
			}
			elementList.add(localSpart);

			elementList.add(new javax.xml.namespace.QName("", "UpdA"));

			if (localUpdA == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"UpdA cannot be null!!");
			}
			elementList.add(localUpdA);

			elementList.add(new javax.xml.namespace.QName("", "UpdB"));

			if (localUpdB == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"UpdB cannot be null!!");
			}
			elementList.add(localUpdB);

			elementList.add(new javax.xml.namespace.QName("", "UpdV"));

			if (localUpdV == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"UpdV cannot be null!!");
			}
			elementList.add(localUpdV);

			elementList.add(new javax.xml.namespace.QName("", "UpdAp"));

			if (localUpdAp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"UpdAp cannot be null!!");
			}
			elementList.add(localUpdAp);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Fkuntxt parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Fkuntxt object = new Fkuntxt();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"Fkuntxt".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Fkuntxt) ExtensionMapper.getTypeObject(
										nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kunnr")
									.equals(reader.getName())) {

						object.setKunnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Parnr")
									.equals(reader.getName())) {

						object.setParnr(Numeric10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bukrs")
									.equals(reader.getName())) {

						object.setBukrs(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vkorg")
									.equals(reader.getName())) {

						object.setVkorg(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vtweg")
									.equals(reader.getName())) {

						object.setVtweg(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Spart")
									.equals(reader.getName())) {

						object.setSpart(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "UpdA")
									.equals(reader.getName())) {

						object.setUpdA(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "UpdB")
									.equals(reader.getName())) {

						object.setUpdB(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "UpdV")
									.equals(reader.getName())) {

						object.setUpdV(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "UpdAp")
									.equals(reader.getName())) {

						object.setUpdAp(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Curr132 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "curr13.2", "ns2");

		/**
		 * field for Curr132
		 */

		protected java.math.BigDecimal localCurr132;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getCurr132() {
			return localCurr132;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Curr132
		 */
		public void setCurr132(java.math.BigDecimal param) {

			java.lang.String totalDigitsDecimal = org.apache.axis2.databinding.utils.ConverterUtil
					.convertToStandardDecimalNotation("13").toString();
			if (org.apache.axis2.databinding.utils.ConverterUtil.compare(param,
					totalDigitsDecimal) > 0) {
				this.localCurr132 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localCurr132.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":curr13.2", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "curr13.2", xmlWriter);
				}
			}

			if (localCurr132 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"curr13.2 cannot be null !!");

			} else {

				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localCurr132));

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCurr132) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Curr132 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Curr132 returnValue = new Curr132();

				returnValue
						.setCurr132(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(value));

				return returnValue;
			}

			public static Curr132 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Curr132.Factory.fromString(content, namespaceUri);
				} else {
					return Curr132.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Curr132 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Curr132 object = new Curr132();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "curr13.2"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setCurr132(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToDecimal(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Decimal31 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "decimal3.1", "ns2");

		/**
		 * field for Decimal31
		 */

		protected java.math.BigDecimal localDecimal31;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getDecimal31() {
			return localDecimal31;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Decimal31
		 */
		public void setDecimal31(java.math.BigDecimal param) {

			java.lang.String totalDigitsDecimal = org.apache.axis2.databinding.utils.ConverterUtil
					.convertToStandardDecimalNotation("3").toString();
			if (org.apache.axis2.databinding.utils.ConverterUtil.compare(param,
					totalDigitsDecimal) > 0) {
				this.localDecimal31 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localDecimal31.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":decimal3.1", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "decimal3.1", xmlWriter);
				}
			}

			if (localDecimal31 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"decimal3.1 cannot be null !!");

			} else {

				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localDecimal31));

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDecimal31) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Decimal31 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Decimal31 returnValue = new Decimal31();

				returnValue
						.setDecimal31(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(value));

				return returnValue;
			}

			public static Decimal31 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Decimal31.Factory.fromString(content, namespaceUri);
				} else {
					return Decimal31.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Decimal31 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Decimal31 object = new Decimal31();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "decimal3.1"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setDecimal31(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToDecimal(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char35 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char35", "ns2");

		/**
		 * field for Char35
		 */

		protected java.lang.String localChar35;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar35() {
			return localChar35;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char35
		 */
		public void setChar35(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 35)) {
				this.localChar35 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar35.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char35", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char35", xmlWriter);
				}
			}

			if (localChar35 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char35 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar35);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar35) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char35 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char35 returnValue = new Char35();

				returnValue
						.setChar35(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char35 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char35.Factory.fromString(content, namespaceUri);
				} else {
					return Char35.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char35 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char35 object = new Char35();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char35"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar35(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Decimal30 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "decimal3.0", "ns2");

		/**
		 * field for Decimal30
		 */

		protected java.math.BigDecimal localDecimal30;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getDecimal30() {
			return localDecimal30;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Decimal30
		 */
		public void setDecimal30(java.math.BigDecimal param) {

			java.lang.String totalDigitsDecimal = org.apache.axis2.databinding.utils.ConverterUtil
					.convertToStandardDecimalNotation("3").toString();
			if (org.apache.axis2.databinding.utils.ConverterUtil.compare(param,
					totalDigitsDecimal) > 0) {
				this.localDecimal30 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localDecimal30.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":decimal3.0", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "decimal3.0", xmlWriter);
				}
			}

			if (localDecimal30 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"decimal3.0 cannot be null !!");

			} else {

				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localDecimal30));

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDecimal30) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Decimal30 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Decimal30 returnValue = new Decimal30();

				returnValue
						.setDecimal30(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(value));

				return returnValue;
			}

			public static Decimal30 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Decimal30.Factory.fromString(content, namespaceUri);
				} else {
					return Decimal30.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Decimal30 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Decimal30 object = new Decimal30();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "decimal3.0"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setDecimal30(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToDecimal(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Fknas implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * Fknas Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Mandt
		 */

		protected Clnt3 localMandt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Clnt3
		 */
		public Clnt3 getMandt() {
			return localMandt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mandt
		 */
		public void setMandt(Clnt3 param) {

			this.localMandt = param;

		}

		/**
		 * field for Kunnr
		 */

		protected Char10 localKunnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKunnr() {
			return localKunnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kunnr
		 */
		public void setKunnr(Char10 param) {

			this.localKunnr = param;

		}

		/**
		 * field for Land1
		 */

		protected Char3 localLand1;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getLand1() {
			return localLand1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Land1
		 */
		public void setLand1(Char3 param) {

			this.localLand1 = param;

		}

		/**
		 * field for Stceg
		 */

		protected Char20 localStceg;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char20
		 */
		public Char20 getStceg() {
			return localStceg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Stceg
		 */
		public void setStceg(Char20 param) {

			this.localStceg = param;

		}

		/**
		 * field for Kz
		 */

		protected Char1 localKz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getKz() {
			return localKz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kz
		 */
		public void setKz(Char1 param) {

			this.localKz = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Fknas", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Fknas", xmlWriter);
				}

			}

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			localMandt.serialize(new javax.xml.namespace.QName("", "Mandt"),
					xmlWriter);

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			localKunnr.serialize(new javax.xml.namespace.QName("", "Kunnr"),
					xmlWriter);

			if (localLand1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Land1 cannot be null!!");
			}
			localLand1.serialize(new javax.xml.namespace.QName("", "Land1"),
					xmlWriter);

			if (localStceg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stceg cannot be null!!");
			}
			localStceg.serialize(new javax.xml.namespace.QName("", "Stceg"),
					xmlWriter);

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			localKz.serialize(new javax.xml.namespace.QName("", "Kz"),
					xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "Mandt"));

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			elementList.add(localMandt);

			elementList.add(new javax.xml.namespace.QName("", "Kunnr"));

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			elementList.add(localKunnr);

			elementList.add(new javax.xml.namespace.QName("", "Land1"));

			if (localLand1 == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Land1 cannot be null!!");
			}
			elementList.add(localLand1);

			elementList.add(new javax.xml.namespace.QName("", "Stceg"));

			if (localStceg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Stceg cannot be null!!");
			}
			elementList.add(localStceg);

			elementList.add(new javax.xml.namespace.QName("", "Kz"));

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			elementList.add(localKz);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Fknas parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Fknas object = new Fknas();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"Fknas".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Fknas) ExtensionMapper.getTypeObject(
										nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mandt")
									.equals(reader.getName())) {

						object.setMandt(Clnt3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kunnr")
									.equals(reader.getName())) {

						object.setKunnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Land1")
									.equals(reader.getName())) {

						object.setLand1(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Stceg")
									.equals(reader.getName())) {

						object.setStceg(Char20.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kz")
									.equals(reader.getName())) {

						object.setKz(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Numeric10 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "numeric10", "ns2");

		/**
		 * field for Numeric10
		 */

		protected java.lang.String localNumeric10;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getNumeric10() {
			return localNumeric10;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Numeric10
		 */
		public void setNumeric10(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("\\d*")) {
				this.localNumeric10 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localNumeric10.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":numeric10", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "numeric10", xmlWriter);
				}
			}

			if (localNumeric10 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"numeric10 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localNumeric10);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNumeric10) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Numeric10 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Numeric10 returnValue = new Numeric10();

				returnValue
						.setNumeric10(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Numeric10 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Numeric10.Factory.fromString(content, namespaceUri);
				} else {
					return Numeric10.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Numeric10 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Numeric10 object = new Numeric10();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "numeric10"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setNumeric10(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Decimal32 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "decimal3.2", "ns2");

		/**
		 * field for Decimal32
		 */

		protected java.math.BigDecimal localDecimal32;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getDecimal32() {
			return localDecimal32;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Decimal32
		 */
		public void setDecimal32(java.math.BigDecimal param) {

			java.lang.String totalDigitsDecimal = org.apache.axis2.databinding.utils.ConverterUtil
					.convertToStandardDecimalNotation("3").toString();
			if (org.apache.axis2.databinding.utils.ConverterUtil.compare(param,
					totalDigitsDecimal) > 0) {
				this.localDecimal32 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localDecimal32.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":decimal3.2", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "decimal3.2", xmlWriter);
				}
			}

			if (localDecimal32 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"decimal3.2 cannot be null !!");

			} else {

				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localDecimal32));

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localDecimal32) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Decimal32 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Decimal32 returnValue = new Decimal32();

				returnValue
						.setDecimal32(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(value));

				return returnValue;
			}

			public static Decimal32 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Decimal32.Factory.fromString(content, namespaceUri);
				} else {
					return Decimal32.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Decimal32 parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Decimal32 object = new Decimal32();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "decimal3.2"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setDecimal32(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToDecimal(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class TableOfFknbk implements
			org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * TableOfFknbk Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Item This was an Array!
		 */

		protected Fknbk[] localItem;

		/*
		 * This tracker boolean wil be used to detect whether the user called
		 * the set method for this attribute. It will be used to determine
		 * whether to include this field in the serialized XML
		 */
		protected boolean localItemTracker = false;

		public boolean isItemSpecified() {
			return localItemTracker;
		}

		/**
		 * Auto generated getter method
		 * 
		 * @return Fknbk[]
		 */
		public Fknbk[] getItem() {
			return localItem;
		}

		/**
		 * validate the array for Item
		 */
		protected void validateItem(Fknbk[] param) {

		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Item
		 */
		public void setItem(Fknbk[] param) {

			validateItem(param);

			localItemTracker = param != null;

			this.localItem = param;
		}

		/**
		 * Auto generated add method for the array for convenience
		 * 
		 * @param param
		 *            Fknbk
		 */
		public void addItem(Fknbk param) {
			if (localItem == null) {
				localItem = new Fknbk[] {};
			}

			// update the setting tracker
			localItemTracker = true;

			java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil
					.toList(localItem);
			list.add(param);
			this.localItem = (Fknbk[]) list.toArray(new Fknbk[list.size()]);

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":TableOfFknbk",
							xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "TableOfFknbk", xmlWriter);
				}

			}
			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {
						if (localItem[i] != null) {
							localItem[i].serialize(
									new javax.xml.namespace.QName("", "item"),
									xmlWriter);
						} else {

							// we don't have to do any thing since minOccures is
							// zero

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}
			}
			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			if (localItemTracker) {
				if (localItem != null) {
					for (int i = 0; i < localItem.length; i++) {

						if (localItem[i] != null) {
							elementList.add(new javax.xml.namespace.QName("",
									"item"));
							elementList.add(localItem[i]);
						} else {

							// nothing to do

						}

					}
				} else {

					throw new org.apache.axis2.databinding.ADBException(
							"item cannot be null!!");

				}

			}

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static TableOfFknbk parse(
					javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				TableOfFknbk object = new TableOfFknbk();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"TableOfFknbk".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (TableOfFknbk) ExtensionMapper
										.getTypeObject(nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					java.util.ArrayList list1 = new java.util.ArrayList();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "item")
									.equals(reader.getName())) {

						// Process the array and step past its final element's
						// end.
						list1.add(Fknbk.Factory.parse(reader));

						// loop until we find a start element that is not part
						// of this array
						boolean loopDone1 = false;
						while (!loopDone1) {
							// We should be at the end element, but make sure
							while (!reader.isEndElement())
								reader.next();
							// Step out of this element
							reader.next();
							// Step to next element event.
							while (!reader.isStartElement()
									&& !reader.isEndElement())
								reader.next();
							if (reader.isEndElement()) {
								// two continuous end elements means we are
								// exiting the xml structure
								loopDone1 = true;
							} else {
								if (new javax.xml.namespace.QName("", "item")
										.equals(reader.getName())) {
									list1.add(Fknbk.Factory.parse(reader));

								} else {
									loopDone1 = true;
								}
							}
						}
						// call the converter utility to convert and set the
						// array

						object.setItem((Fknbk[]) org.apache.axis2.databinding.utils.ConverterUtil
								.convertToArray(Fknbk.class, list1));

					} // End of if for expected property start element

					else {

					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Numeric7 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "numeric7", "ns2");

		/**
		 * field for Numeric7
		 */

		protected java.lang.String localNumeric7;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getNumeric7() {
			return localNumeric7;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Numeric7
		 */
		public void setNumeric7(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("\\d*")) {
				this.localNumeric7 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localNumeric7.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":numeric7", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "numeric7", xmlWriter);
				}
			}

			if (localNumeric7 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"numeric7 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localNumeric7);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNumeric7) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Numeric7 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Numeric7 returnValue = new Numeric7();

				returnValue
						.setNumeric7(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Numeric7 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Numeric7.Factory.fromString(content, namespaceUri);
				} else {
					return Numeric7.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Numeric7 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Numeric7 object = new Numeric7();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "numeric7"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setNumeric7(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Numeric8 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "numeric8", "ns2");

		/**
		 * field for Numeric8
		 */

		protected java.lang.String localNumeric8;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getNumeric8() {
			return localNumeric8;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Numeric8
		 */
		public void setNumeric8(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("\\d*")) {
				this.localNumeric8 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localNumeric8.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":numeric8", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "numeric8", xmlWriter);
				}
			}

			if (localNumeric8 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"numeric8 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localNumeric8);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNumeric8) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Numeric8 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Numeric8 returnValue = new Numeric8();

				returnValue
						.setNumeric8(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Numeric8 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Numeric8.Factory.fromString(content, namespaceUri);
				} else {
					return Numeric8.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Numeric8 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Numeric8 object = new Numeric8();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "numeric8"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setNumeric8(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Curr82 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "curr8.2", "ns2");

		/**
		 * field for Curr82
		 */

		protected java.math.BigDecimal localCurr82;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.math.BigDecimal
		 */
		public java.math.BigDecimal getCurr82() {
			return localCurr82;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Curr82
		 */
		public void setCurr82(java.math.BigDecimal param) {

			java.lang.String totalDigitsDecimal = org.apache.axis2.databinding.utils.ConverterUtil
					.convertToStandardDecimalNotation("8").toString();
			if (org.apache.axis2.databinding.utils.ConverterUtil.compare(param,
					totalDigitsDecimal) > 0) {
				this.localCurr82 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localCurr82.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":curr8.2", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "curr8.2", xmlWriter);
				}
			}

			if (localCurr82 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"curr8.2 cannot be null !!");

			} else {

				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(localCurr82));

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localCurr82) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Curr82 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Curr82 returnValue = new Curr82();

				returnValue
						.setCurr82(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToDecimal(value));

				return returnValue;
			}

			public static Curr82 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Curr82.Factory.fromString(content, namespaceUri);
				} else {
					return Curr82.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Curr82 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Curr82 object = new Curr82();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "curr8.2"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setCurr82(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToDecimal(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Numeric5 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "numeric5", "ns2");

		/**
		 * field for Numeric5
		 */

		protected java.lang.String localNumeric5;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getNumeric5() {
			return localNumeric5;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Numeric5
		 */
		public void setNumeric5(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("\\d*")) {
				this.localNumeric5 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localNumeric5.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":numeric5", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "numeric5", xmlWriter);
				}
			}

			if (localNumeric5 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"numeric5 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localNumeric5);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNumeric5) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Numeric5 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Numeric5 returnValue = new Numeric5();

				returnValue
						.setNumeric5(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Numeric5 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Numeric5.Factory.fromString(content, namespaceUri);
				} else {
					return Numeric5.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Numeric5 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Numeric5 object = new Numeric5();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "numeric5"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setNumeric5(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Numeric6 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "numeric6", "ns2");

		/**
		 * field for Numeric6
		 */

		protected java.lang.String localNumeric6;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getNumeric6() {
			return localNumeric6;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Numeric6
		 */
		public void setNumeric6(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("\\d*")) {
				this.localNumeric6 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localNumeric6.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":numeric6", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "numeric6", xmlWriter);
				}
			}

			if (localNumeric6 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"numeric6 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localNumeric6);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNumeric6) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Numeric6 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Numeric6 returnValue = new Numeric6();

				returnValue
						.setNumeric6(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Numeric6 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Numeric6.Factory.fromString(content, namespaceUri);
				} else {
					return Numeric6.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Numeric6 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Numeric6 object = new Numeric6();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "numeric6"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setNumeric6(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Numeric3 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "numeric3", "ns2");

		/**
		 * field for Numeric3
		 */

		protected java.lang.String localNumeric3;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getNumeric3() {
			return localNumeric3;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Numeric3
		 */
		public void setNumeric3(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("\\d*")) {
				this.localNumeric3 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localNumeric3.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":numeric3", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "numeric3", xmlWriter);
				}
			}

			if (localNumeric3 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"numeric3 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localNumeric3);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNumeric3) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Numeric3 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Numeric3 returnValue = new Numeric3();

				returnValue
						.setNumeric3(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Numeric3 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Numeric3.Factory.fromString(content, namespaceUri);
				} else {
					return Numeric3.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Numeric3 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Numeric3 object = new Numeric3();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "numeric3"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setNumeric3(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char132 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char132", "ns2");

		/**
		 * field for Char132
		 */

		protected java.lang.String localChar132;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar132() {
			return localChar132;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char132
		 */
		public void setChar132(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 132)) {
				this.localChar132 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar132.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char132", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char132", xmlWriter);
				}
			}

			if (localChar132 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char132 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar132);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar132) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char132 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char132 returnValue = new Char132();

				returnValue
						.setChar132(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char132 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char132.Factory.fromString(content, namespaceUri);
				} else {
					return Char132.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char132 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char132 object = new Char132();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char132"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar132(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Numeric4 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "numeric4", "ns2");

		/**
		 * field for Numeric4
		 */

		protected java.lang.String localNumeric4;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getNumeric4() {
			return localNumeric4;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Numeric4
		 */
		public void setNumeric4(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("\\d*")) {
				this.localNumeric4 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localNumeric4.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":numeric4", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "numeric4", xmlWriter);
				}
			}

			if (localNumeric4 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"numeric4 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localNumeric4);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNumeric4) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Numeric4 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Numeric4 returnValue = new Numeric4();

				returnValue
						.setNumeric4(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Numeric4 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Numeric4.Factory.fromString(content, namespaceUri);
				} else {
					return Numeric4.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Numeric4 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Numeric4 object = new Numeric4();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "numeric4"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setNumeric4(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Numeric1 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "numeric1", "ns2");

		/**
		 * field for Numeric1
		 */

		protected java.lang.String localNumeric1;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getNumeric1() {
			return localNumeric1;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Numeric1
		 */
		public void setNumeric1(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("\\d*")) {
				this.localNumeric1 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localNumeric1.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":numeric1", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "numeric1", xmlWriter);
				}
			}

			if (localNumeric1 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"numeric1 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localNumeric1);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNumeric1) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Numeric1 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Numeric1 returnValue = new Numeric1();

				returnValue
						.setNumeric1(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Numeric1 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Numeric1.Factory.fromString(content, namespaceUri);
				} else {
					return Numeric1.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Numeric1 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Numeric1 object = new Numeric1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "numeric1"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setNumeric1(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Numeric2 implements
			org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "numeric2", "ns2");

		/**
		 * field for Numeric2
		 */

		protected java.lang.String localNumeric2;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getNumeric2() {
			return localNumeric2;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Numeric2
		 */
		public void setNumeric2(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("\\d*")) {
				this.localNumeric2 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localNumeric2.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":numeric2", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "numeric2", xmlWriter);
				}
			}

			if (localNumeric2 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"numeric2 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localNumeric2);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localNumeric2) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Numeric2 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Numeric2 returnValue = new Numeric2();

				returnValue
						.setNumeric2(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Numeric2 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Numeric2.Factory.fromString(content, namespaceUri);
				} else {
					return Numeric2.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Numeric2 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Numeric2 object = new Numeric2();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "numeric2"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setNumeric2(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Char130 implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "char130", "ns2");

		/**
		 * field for Char130
		 */

		protected java.lang.String localChar130;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getChar130() {
			return localChar130;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Char130
		 */
		public void setChar130(java.lang.String param) {

			if ((java.lang.String.valueOf(param).length() <= 130)) {
				this.localChar130 = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localChar130.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":char130", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "char130", xmlWriter);
				}
			}

			if (localChar130 == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"char130 cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localChar130);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localChar130) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Char130 fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Char130 returnValue = new Char130();

				returnValue
						.setChar130(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Char130 fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Char130.Factory.fromString(content, namespaceUri);
				} else {
					return Char130.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Char130 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Char130 object = new Char130();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "char130"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setChar130(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Knb1 implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name = Knb1
		 * Namespace URI = urn:sap-com:document:sap:soap:functions:mc-style
		 * Namespace Prefix = ns1
		 */

		/**
		 * field for Mandt
		 */

		protected Clnt3 localMandt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Clnt3
		 */
		public Clnt3 getMandt() {
			return localMandt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mandt
		 */
		public void setMandt(Clnt3 param) {

			this.localMandt = param;

		}

		/**
		 * field for Kunnr
		 */

		protected Char10 localKunnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKunnr() {
			return localKunnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kunnr
		 */
		public void setKunnr(Char10 param) {

			this.localKunnr = param;

		}

		/**
		 * field for Bukrs
		 */

		protected Char4 localBukrs;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getBukrs() {
			return localBukrs;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bukrs
		 */
		public void setBukrs(Char4 param) {

			this.localBukrs = param;

		}

		/**
		 * field for Pernr
		 */

		protected Numeric8 localPernr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric8
		 */
		public Numeric8 getPernr() {
			return localPernr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Pernr
		 */
		public void setPernr(Numeric8 param) {

			this.localPernr = param;

		}

		/**
		 * field for Erdat
		 */

		protected Date localErdat;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getErdat() {
			return localErdat;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Erdat
		 */
		public void setErdat(Date param) {

			this.localErdat = param;

		}

		/**
		 * field for Ernam
		 */

		protected Char12 localErnam;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char12
		 */
		public Char12 getErnam() {
			return localErnam;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Ernam
		 */
		public void setErnam(Char12 param) {

			this.localErnam = param;

		}

		/**
		 * field for Sperr
		 */

		protected Char1 localSperr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getSperr() {
			return localSperr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sperr
		 */
		public void setSperr(Char1 param) {

			this.localSperr = param;

		}

		/**
		 * field for Loevm
		 */

		protected Char1 localLoevm;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getLoevm() {
			return localLoevm;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Loevm
		 */
		public void setLoevm(Char1 param) {

			this.localLoevm = param;

		}

		/**
		 * field for Zuawa
		 */

		protected Char3 localZuawa;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getZuawa() {
			return localZuawa;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Zuawa
		 */
		public void setZuawa(Char3 param) {

			this.localZuawa = param;

		}

		/**
		 * field for Busab
		 */

		protected Char2 localBusab;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getBusab() {
			return localBusab;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Busab
		 */
		public void setBusab(Char2 param) {

			this.localBusab = param;

		}

		/**
		 * field for Akont
		 */

		protected Char10 localAkont;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getAkont() {
			return localAkont;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Akont
		 */
		public void setAkont(Char10 param) {

			this.localAkont = param;

		}

		/**
		 * field for Begru
		 */

		protected Char4 localBegru;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getBegru() {
			return localBegru;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Begru
		 */
		public void setBegru(Char4 param) {

			this.localBegru = param;

		}

		/**
		 * field for Knrze
		 */

		protected Char10 localKnrze;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKnrze() {
			return localKnrze;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Knrze
		 */
		public void setKnrze(Char10 param) {

			this.localKnrze = param;

		}

		/**
		 * field for Knrzb
		 */

		protected Char10 localKnrzb;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKnrzb() {
			return localKnrzb;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Knrzb
		 */
		public void setKnrzb(Char10 param) {

			this.localKnrzb = param;

		}

		/**
		 * field for Zamim
		 */

		protected Char1 localZamim;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getZamim() {
			return localZamim;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Zamim
		 */
		public void setZamim(Char1 param) {

			this.localZamim = param;

		}

		/**
		 * field for Zamiv
		 */

		protected Char1 localZamiv;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getZamiv() {
			return localZamiv;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Zamiv
		 */
		public void setZamiv(Char1 param) {

			this.localZamiv = param;

		}

		/**
		 * field for Zamir
		 */

		protected Char1 localZamir;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getZamir() {
			return localZamir;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Zamir
		 */
		public void setZamir(Char1 param) {

			this.localZamir = param;

		}

		/**
		 * field for Zamib
		 */

		protected Char1 localZamib;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getZamib() {
			return localZamib;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Zamib
		 */
		public void setZamib(Char1 param) {

			this.localZamib = param;

		}

		/**
		 * field for Zamio
		 */

		protected Char1 localZamio;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getZamio() {
			return localZamio;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Zamio
		 */
		public void setZamio(Char1 param) {

			this.localZamio = param;

		}

		/**
		 * field for Zwels
		 */

		protected Char10 localZwels;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getZwels() {
			return localZwels;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Zwels
		 */
		public void setZwels(Char10 param) {

			this.localZwels = param;

		}

		/**
		 * field for Xverr
		 */

		protected Char1 localXverr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getXverr() {
			return localXverr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Xverr
		 */
		public void setXverr(Char1 param) {

			this.localXverr = param;

		}

		/**
		 * field for Zahls
		 */

		protected Char1 localZahls;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getZahls() {
			return localZahls;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Zahls
		 */
		public void setZahls(Char1 param) {

			this.localZahls = param;

		}

		/**
		 * field for Zterm
		 */

		protected Char4 localZterm;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getZterm() {
			return localZterm;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Zterm
		 */
		public void setZterm(Char4 param) {

			this.localZterm = param;

		}

		/**
		 * field for Wakon
		 */

		protected Char4 localWakon;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getWakon() {
			return localWakon;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Wakon
		 */
		public void setWakon(Char4 param) {

			this.localWakon = param;

		}

		/**
		 * field for Vzskz
		 */

		protected Char2 localVzskz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getVzskz() {
			return localVzskz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vzskz
		 */
		public void setVzskz(Char2 param) {

			this.localVzskz = param;

		}

		/**
		 * field for Zindt
		 */

		protected Date localZindt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getZindt() {
			return localZindt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Zindt
		 */
		public void setZindt(Date param) {

			this.localZindt = param;

		}

		/**
		 * field for Zinrt
		 */

		protected Numeric2 localZinrt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Numeric2
		 */
		public Numeric2 getZinrt() {
			return localZinrt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Zinrt
		 */
		public void setZinrt(Numeric2 param) {

			this.localZinrt = param;

		}

		/**
		 * field for Eikto
		 */

		protected Char12 localEikto;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char12
		 */
		public Char12 getEikto() {
			return localEikto;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Eikto
		 */
		public void setEikto(Char12 param) {

			this.localEikto = param;

		}

		/**
		 * field for Zsabe
		 */

		protected Char15 localZsabe;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char15
		 */
		public Char15 getZsabe() {
			return localZsabe;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Zsabe
		 */
		public void setZsabe(Char15 param) {

			this.localZsabe = param;

		}

		/**
		 * field for Kverm
		 */

		protected Char30 localKverm;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char30
		 */
		public Char30 getKverm() {
			return localKverm;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kverm
		 */
		public void setKverm(Char30 param) {

			this.localKverm = param;

		}

		/**
		 * field for Fdgrv
		 */

		protected Char10 localFdgrv;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getFdgrv() {
			return localFdgrv;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Fdgrv
		 */
		public void setFdgrv(Char10 param) {

			this.localFdgrv = param;

		}

		/**
		 * field for Vrbkz
		 */

		protected Char2 localVrbkz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getVrbkz() {
			return localVrbkz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vrbkz
		 */
		public void setVrbkz(Char2 param) {

			this.localVrbkz = param;

		}

		/**
		 * field for Vlibb
		 */

		protected Curr132 localVlibb;

		/**
		 * Auto generated getter method
		 * 
		 * @return Curr132
		 */
		public Curr132 getVlibb() {
			return localVlibb;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vlibb
		 */
		public void setVlibb(Curr132 param) {

			this.localVlibb = param;

		}

		/**
		 * field for Vrszl
		 */

		protected Decimal30 localVrszl;

		/**
		 * Auto generated getter method
		 * 
		 * @return Decimal30
		 */
		public Decimal30 getVrszl() {
			return localVrszl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vrszl
		 */
		public void setVrszl(Decimal30 param) {

			this.localVrszl = param;

		}

		/**
		 * field for Vrspr
		 */

		protected Decimal30 localVrspr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Decimal30
		 */
		public Decimal30 getVrspr() {
			return localVrspr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vrspr
		 */
		public void setVrspr(Decimal30 param) {

			this.localVrspr = param;

		}

		/**
		 * field for Vrsnr
		 */

		protected Char10 localVrsnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getVrsnr() {
			return localVrsnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vrsnr
		 */
		public void setVrsnr(Char10 param) {

			this.localVrsnr = param;

		}

		/**
		 * field for Verdt
		 */

		protected Date localVerdt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getVerdt() {
			return localVerdt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Verdt
		 */
		public void setVerdt(Date param) {

			this.localVerdt = param;

		}

		/**
		 * field for Perkz
		 */

		protected Char1 localPerkz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getPerkz() {
			return localPerkz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Perkz
		 */
		public void setPerkz(Char1 param) {

			this.localPerkz = param;

		}

		/**
		 * field for Xdezv
		 */

		protected Char1 localXdezv;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getXdezv() {
			return localXdezv;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Xdezv
		 */
		public void setXdezv(Char1 param) {

			this.localXdezv = param;

		}

		/**
		 * field for Xausz
		 */

		protected Char1 localXausz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getXausz() {
			return localXausz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Xausz
		 */
		public void setXausz(Char1 param) {

			this.localXausz = param;

		}

		/**
		 * field for Webtr
		 */

		protected Curr132 localWebtr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Curr132
		 */
		public Curr132 getWebtr() {
			return localWebtr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Webtr
		 */
		public void setWebtr(Curr132 param) {

			this.localWebtr = param;

		}

		/**
		 * field for Remit
		 */

		protected Char10 localRemit;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getRemit() {
			return localRemit;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Remit
		 */
		public void setRemit(Char10 param) {

			this.localRemit = param;

		}

		/**
		 * field for Datlz
		 */

		protected Date localDatlz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getDatlz() {
			return localDatlz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Datlz
		 */
		public void setDatlz(Date param) {

			this.localDatlz = param;

		}

		/**
		 * field for Xzver
		 */

		protected Char1 localXzver;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getXzver() {
			return localXzver;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Xzver
		 */
		public void setXzver(Char1 param) {

			this.localXzver = param;

		}

		/**
		 * field for Togru
		 */

		protected Char4 localTogru;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getTogru() {
			return localTogru;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Togru
		 */
		public void setTogru(Char4 param) {

			this.localTogru = param;

		}

		/**
		 * field for Kultg
		 */

		protected Decimal30 localKultg;

		/**
		 * Auto generated getter method
		 * 
		 * @return Decimal30
		 */
		public Decimal30 getKultg() {
			return localKultg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kultg
		 */
		public void setKultg(Decimal30 param) {

			this.localKultg = param;

		}

		/**
		 * field for Hbkid
		 */

		protected Char5 localHbkid;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char5
		 */
		public Char5 getHbkid() {
			return localHbkid;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Hbkid
		 */
		public void setHbkid(Char5 param) {

			this.localHbkid = param;

		}

		/**
		 * field for Xpore
		 */

		protected Char1 localXpore;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getXpore() {
			return localXpore;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Xpore
		 */
		public void setXpore(Char1 param) {

			this.localXpore = param;

		}

		/**
		 * field for Blnkz
		 */

		protected Char2 localBlnkz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getBlnkz() {
			return localBlnkz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Blnkz
		 */
		public void setBlnkz(Char2 param) {

			this.localBlnkz = param;

		}

		/**
		 * field for Altkn
		 */

		protected Char10 localAltkn;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getAltkn() {
			return localAltkn;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Altkn
		 */
		public void setAltkn(Char10 param) {

			this.localAltkn = param;

		}

		/**
		 * field for Zgrup
		 */

		protected Char2 localZgrup;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getZgrup() {
			return localZgrup;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Zgrup
		 */
		public void setZgrup(Char2 param) {

			this.localZgrup = param;

		}

		/**
		 * field for Urlid
		 */

		protected Char4 localUrlid;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getUrlid() {
			return localUrlid;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Urlid
		 */
		public void setUrlid(Char4 param) {

			this.localUrlid = param;

		}

		/**
		 * field for Mgrup
		 */

		protected Char2 localMgrup;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getMgrup() {
			return localMgrup;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mgrup
		 */
		public void setMgrup(Char2 param) {

			this.localMgrup = param;

		}

		/**
		 * field for Lockb
		 */

		protected Char7 localLockb;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char7
		 */
		public Char7 getLockb() {
			return localLockb;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Lockb
		 */
		public void setLockb(Char7 param) {

			this.localLockb = param;

		}

		/**
		 * field for Uzawe
		 */

		protected Char2 localUzawe;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getUzawe() {
			return localUzawe;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Uzawe
		 */
		public void setUzawe(Char2 param) {

			this.localUzawe = param;

		}

		/**
		 * field for Ekvbd
		 */

		protected Char10 localEkvbd;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getEkvbd() {
			return localEkvbd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Ekvbd
		 */
		public void setEkvbd(Char10 param) {

			this.localEkvbd = param;

		}

		/**
		 * field for Sregl
		 */

		protected Char3 localSregl;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getSregl() {
			return localSregl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sregl
		 */
		public void setSregl(Char3 param) {

			this.localSregl = param;

		}

		/**
		 * field for Xedip
		 */

		protected Char1 localXedip;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getXedip() {
			return localXedip;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Xedip
		 */
		public void setXedip(Char1 param) {

			this.localXedip = param;

		}

		/**
		 * field for Frgrp
		 */

		protected Char4 localFrgrp;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getFrgrp() {
			return localFrgrp;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Frgrp
		 */
		public void setFrgrp(Char4 param) {

			this.localFrgrp = param;

		}

		/**
		 * field for Vrsdg
		 */

		protected Char3 localVrsdg;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getVrsdg() {
			return localVrsdg;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Vrsdg
		 */
		public void setVrsdg(Char3 param) {

			this.localVrsdg = param;

		}

		/**
		 * field for Tlfxs
		 */

		protected Char31 localTlfxs;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char31
		 */
		public Char31 getTlfxs() {
			return localTlfxs;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Tlfxs
		 */
		public void setTlfxs(Char31 param) {

			this.localTlfxs = param;

		}

		/**
		 * field for Intad
		 */

		protected Char130 localIntad;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char130
		 */
		public Char130 getIntad() {
			return localIntad;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Intad
		 */
		public void setIntad(Char130 param) {

			this.localIntad = param;

		}

		/**
		 * field for Xknzb
		 */

		protected Char1 localXknzb;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getXknzb() {
			return localXknzb;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Xknzb
		 */
		public void setXknzb(Char1 param) {

			this.localXknzb = param;

		}

		/**
		 * field for Guzte
		 */

		protected Char4 localGuzte;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char4
		 */
		public Char4 getGuzte() {
			return localGuzte;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Guzte
		 */
		public void setGuzte(Char4 param) {

			this.localGuzte = param;

		}

		/**
		 * field for Gricd
		 */

		protected Char2 localGricd;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getGricd() {
			return localGricd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Gricd
		 */
		public void setGricd(Char2 param) {

			this.localGricd = param;

		}

		/**
		 * field for Gridt
		 */

		protected Char2 localGridt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getGridt() {
			return localGridt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Gridt
		 */
		public void setGridt(Char2 param) {

			this.localGridt = param;

		}

		/**
		 * field for Wbrsl
		 */

		protected Char2 localWbrsl;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getWbrsl() {
			return localWbrsl;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Wbrsl
		 */
		public void setWbrsl(Char2 param) {

			this.localWbrsl = param;

		}

		/**
		 * field for Confs
		 */

		protected Char1 localConfs;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getConfs() {
			return localConfs;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Confs
		 */
		public void setConfs(Char1 param) {

			this.localConfs = param;

		}

		/**
		 * field for Updat
		 */

		protected Date localUpdat;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getUpdat() {
			return localUpdat;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Updat
		 */
		public void setUpdat(Date param) {

			this.localUpdat = param;

		}

		/**
		 * field for Uptim
		 */

		protected Time localUptim;

		/**
		 * Auto generated getter method
		 * 
		 * @return Time
		 */
		public Time getUptim() {
			return localUptim;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Uptim
		 */
		public void setUptim(Time param) {

			this.localUptim = param;

		}

		/**
		 * field for Nodel
		 */

		protected Char1 localNodel;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getNodel() {
			return localNodel;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Nodel
		 */
		public void setNodel(Char1 param) {

			this.localNodel = param;

		}

		/**
		 * field for Tlfns
		 */

		protected Char30 localTlfns;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char30
		 */
		public Char30 getTlfns() {
			return localTlfns;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Tlfns
		 */
		public void setTlfns(Char30 param) {

			this.localTlfns = param;

		}

		/**
		 * field for CessionKz
		 */

		protected Char2 localCessionKz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char2
		 */
		public Char2 getCessionKz() {
			return localCessionKz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            CessionKz
		 */
		public void setCessionKz(Char2 param) {

			this.localCessionKz = param;

		}

		/**
		 * field for Gmvkzd
		 */

		protected Char1 localGmvkzd;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getGmvkzd() {
			return localGmvkzd;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Gmvkzd
		 */
		public void setGmvkzd(Char1 param) {

			this.localGmvkzd = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Knb1", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Knb1", xmlWriter);
				}

			}

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			localMandt.serialize(new javax.xml.namespace.QName("", "Mandt"),
					xmlWriter);

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			localKunnr.serialize(new javax.xml.namespace.QName("", "Kunnr"),
					xmlWriter);

			if (localBukrs == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bukrs cannot be null!!");
			}
			localBukrs.serialize(new javax.xml.namespace.QName("", "Bukrs"),
					xmlWriter);

			if (localPernr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pernr cannot be null!!");
			}
			localPernr.serialize(new javax.xml.namespace.QName("", "Pernr"),
					xmlWriter);

			if (localErdat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Erdat cannot be null!!");
			}
			localErdat.serialize(new javax.xml.namespace.QName("", "Erdat"),
					xmlWriter);

			if (localErnam == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ernam cannot be null!!");
			}
			localErnam.serialize(new javax.xml.namespace.QName("", "Ernam"),
					xmlWriter);

			if (localSperr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sperr cannot be null!!");
			}
			localSperr.serialize(new javax.xml.namespace.QName("", "Sperr"),
					xmlWriter);

			if (localLoevm == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Loevm cannot be null!!");
			}
			localLoevm.serialize(new javax.xml.namespace.QName("", "Loevm"),
					xmlWriter);

			if (localZuawa == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zuawa cannot be null!!");
			}
			localZuawa.serialize(new javax.xml.namespace.QName("", "Zuawa"),
					xmlWriter);

			if (localBusab == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Busab cannot be null!!");
			}
			localBusab.serialize(new javax.xml.namespace.QName("", "Busab"),
					xmlWriter);

			if (localAkont == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Akont cannot be null!!");
			}
			localAkont.serialize(new javax.xml.namespace.QName("", "Akont"),
					xmlWriter);

			if (localBegru == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Begru cannot be null!!");
			}
			localBegru.serialize(new javax.xml.namespace.QName("", "Begru"),
					xmlWriter);

			if (localKnrze == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Knrze cannot be null!!");
			}
			localKnrze.serialize(new javax.xml.namespace.QName("", "Knrze"),
					xmlWriter);

			if (localKnrzb == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Knrzb cannot be null!!");
			}
			localKnrzb.serialize(new javax.xml.namespace.QName("", "Knrzb"),
					xmlWriter);

			if (localZamim == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zamim cannot be null!!");
			}
			localZamim.serialize(new javax.xml.namespace.QName("", "Zamim"),
					xmlWriter);

			if (localZamiv == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zamiv cannot be null!!");
			}
			localZamiv.serialize(new javax.xml.namespace.QName("", "Zamiv"),
					xmlWriter);

			if (localZamir == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zamir cannot be null!!");
			}
			localZamir.serialize(new javax.xml.namespace.QName("", "Zamir"),
					xmlWriter);

			if (localZamib == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zamib cannot be null!!");
			}
			localZamib.serialize(new javax.xml.namespace.QName("", "Zamib"),
					xmlWriter);

			if (localZamio == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zamio cannot be null!!");
			}
			localZamio.serialize(new javax.xml.namespace.QName("", "Zamio"),
					xmlWriter);

			if (localZwels == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zwels cannot be null!!");
			}
			localZwels.serialize(new javax.xml.namespace.QName("", "Zwels"),
					xmlWriter);

			if (localXverr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xverr cannot be null!!");
			}
			localXverr.serialize(new javax.xml.namespace.QName("", "Xverr"),
					xmlWriter);

			if (localZahls == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zahls cannot be null!!");
			}
			localZahls.serialize(new javax.xml.namespace.QName("", "Zahls"),
					xmlWriter);

			if (localZterm == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zterm cannot be null!!");
			}
			localZterm.serialize(new javax.xml.namespace.QName("", "Zterm"),
					xmlWriter);

			if (localWakon == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Wakon cannot be null!!");
			}
			localWakon.serialize(new javax.xml.namespace.QName("", "Wakon"),
					xmlWriter);

			if (localVzskz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vzskz cannot be null!!");
			}
			localVzskz.serialize(new javax.xml.namespace.QName("", "Vzskz"),
					xmlWriter);

			if (localZindt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zindt cannot be null!!");
			}
			localZindt.serialize(new javax.xml.namespace.QName("", "Zindt"),
					xmlWriter);

			if (localZinrt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zinrt cannot be null!!");
			}
			localZinrt.serialize(new javax.xml.namespace.QName("", "Zinrt"),
					xmlWriter);

			if (localEikto == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Eikto cannot be null!!");
			}
			localEikto.serialize(new javax.xml.namespace.QName("", "Eikto"),
					xmlWriter);

			if (localZsabe == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zsabe cannot be null!!");
			}
			localZsabe.serialize(new javax.xml.namespace.QName("", "Zsabe"),
					xmlWriter);

			if (localKverm == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kverm cannot be null!!");
			}
			localKverm.serialize(new javax.xml.namespace.QName("", "Kverm"),
					xmlWriter);

			if (localFdgrv == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Fdgrv cannot be null!!");
			}
			localFdgrv.serialize(new javax.xml.namespace.QName("", "Fdgrv"),
					xmlWriter);

			if (localVrbkz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vrbkz cannot be null!!");
			}
			localVrbkz.serialize(new javax.xml.namespace.QName("", "Vrbkz"),
					xmlWriter);

			if (localVlibb == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vlibb cannot be null!!");
			}
			localVlibb.serialize(new javax.xml.namespace.QName("", "Vlibb"),
					xmlWriter);

			if (localVrszl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vrszl cannot be null!!");
			}
			localVrszl.serialize(new javax.xml.namespace.QName("", "Vrszl"),
					xmlWriter);

			if (localVrspr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vrspr cannot be null!!");
			}
			localVrspr.serialize(new javax.xml.namespace.QName("", "Vrspr"),
					xmlWriter);

			if (localVrsnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vrsnr cannot be null!!");
			}
			localVrsnr.serialize(new javax.xml.namespace.QName("", "Vrsnr"),
					xmlWriter);

			if (localVerdt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Verdt cannot be null!!");
			}
			localVerdt.serialize(new javax.xml.namespace.QName("", "Verdt"),
					xmlWriter);

			if (localPerkz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Perkz cannot be null!!");
			}
			localPerkz.serialize(new javax.xml.namespace.QName("", "Perkz"),
					xmlWriter);

			if (localXdezv == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xdezv cannot be null!!");
			}
			localXdezv.serialize(new javax.xml.namespace.QName("", "Xdezv"),
					xmlWriter);

			if (localXausz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xausz cannot be null!!");
			}
			localXausz.serialize(new javax.xml.namespace.QName("", "Xausz"),
					xmlWriter);

			if (localWebtr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Webtr cannot be null!!");
			}
			localWebtr.serialize(new javax.xml.namespace.QName("", "Webtr"),
					xmlWriter);

			if (localRemit == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Remit cannot be null!!");
			}
			localRemit.serialize(new javax.xml.namespace.QName("", "Remit"),
					xmlWriter);

			if (localDatlz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Datlz cannot be null!!");
			}
			localDatlz.serialize(new javax.xml.namespace.QName("", "Datlz"),
					xmlWriter);

			if (localXzver == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xzver cannot be null!!");
			}
			localXzver.serialize(new javax.xml.namespace.QName("", "Xzver"),
					xmlWriter);

			if (localTogru == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Togru cannot be null!!");
			}
			localTogru.serialize(new javax.xml.namespace.QName("", "Togru"),
					xmlWriter);

			if (localKultg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kultg cannot be null!!");
			}
			localKultg.serialize(new javax.xml.namespace.QName("", "Kultg"),
					xmlWriter);

			if (localHbkid == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Hbkid cannot be null!!");
			}
			localHbkid.serialize(new javax.xml.namespace.QName("", "Hbkid"),
					xmlWriter);

			if (localXpore == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xpore cannot be null!!");
			}
			localXpore.serialize(new javax.xml.namespace.QName("", "Xpore"),
					xmlWriter);

			if (localBlnkz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Blnkz cannot be null!!");
			}
			localBlnkz.serialize(new javax.xml.namespace.QName("", "Blnkz"),
					xmlWriter);

			if (localAltkn == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Altkn cannot be null!!");
			}
			localAltkn.serialize(new javax.xml.namespace.QName("", "Altkn"),
					xmlWriter);

			if (localZgrup == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zgrup cannot be null!!");
			}
			localZgrup.serialize(new javax.xml.namespace.QName("", "Zgrup"),
					xmlWriter);

			if (localUrlid == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Urlid cannot be null!!");
			}
			localUrlid.serialize(new javax.xml.namespace.QName("", "Urlid"),
					xmlWriter);

			if (localMgrup == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mgrup cannot be null!!");
			}
			localMgrup.serialize(new javax.xml.namespace.QName("", "Mgrup"),
					xmlWriter);

			if (localLockb == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lockb cannot be null!!");
			}
			localLockb.serialize(new javax.xml.namespace.QName("", "Lockb"),
					xmlWriter);

			if (localUzawe == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Uzawe cannot be null!!");
			}
			localUzawe.serialize(new javax.xml.namespace.QName("", "Uzawe"),
					xmlWriter);

			if (localEkvbd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ekvbd cannot be null!!");
			}
			localEkvbd.serialize(new javax.xml.namespace.QName("", "Ekvbd"),
					xmlWriter);

			if (localSregl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sregl cannot be null!!");
			}
			localSregl.serialize(new javax.xml.namespace.QName("", "Sregl"),
					xmlWriter);

			if (localXedip == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xedip cannot be null!!");
			}
			localXedip.serialize(new javax.xml.namespace.QName("", "Xedip"),
					xmlWriter);

			if (localFrgrp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Frgrp cannot be null!!");
			}
			localFrgrp.serialize(new javax.xml.namespace.QName("", "Frgrp"),
					xmlWriter);

			if (localVrsdg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vrsdg cannot be null!!");
			}
			localVrsdg.serialize(new javax.xml.namespace.QName("", "Vrsdg"),
					xmlWriter);

			if (localTlfxs == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tlfxs cannot be null!!");
			}
			localTlfxs.serialize(new javax.xml.namespace.QName("", "Tlfxs"),
					xmlWriter);

			if (localIntad == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Intad cannot be null!!");
			}
			localIntad.serialize(new javax.xml.namespace.QName("", "Intad"),
					xmlWriter);

			if (localXknzb == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xknzb cannot be null!!");
			}
			localXknzb.serialize(new javax.xml.namespace.QName("", "Xknzb"),
					xmlWriter);

			if (localGuzte == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Guzte cannot be null!!");
			}
			localGuzte.serialize(new javax.xml.namespace.QName("", "Guzte"),
					xmlWriter);

			if (localGricd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Gricd cannot be null!!");
			}
			localGricd.serialize(new javax.xml.namespace.QName("", "Gricd"),
					xmlWriter);

			if (localGridt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Gridt cannot be null!!");
			}
			localGridt.serialize(new javax.xml.namespace.QName("", "Gridt"),
					xmlWriter);

			if (localWbrsl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Wbrsl cannot be null!!");
			}
			localWbrsl.serialize(new javax.xml.namespace.QName("", "Wbrsl"),
					xmlWriter);

			if (localConfs == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Confs cannot be null!!");
			}
			localConfs.serialize(new javax.xml.namespace.QName("", "Confs"),
					xmlWriter);

			if (localUpdat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Updat cannot be null!!");
			}
			localUpdat.serialize(new javax.xml.namespace.QName("", "Updat"),
					xmlWriter);

			if (localUptim == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Uptim cannot be null!!");
			}
			localUptim.serialize(new javax.xml.namespace.QName("", "Uptim"),
					xmlWriter);

			if (localNodel == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Nodel cannot be null!!");
			}
			localNodel.serialize(new javax.xml.namespace.QName("", "Nodel"),
					xmlWriter);

			if (localTlfns == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tlfns cannot be null!!");
			}
			localTlfns.serialize(new javax.xml.namespace.QName("", "Tlfns"),
					xmlWriter);

			if (localCessionKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"CessionKz cannot be null!!");
			}
			localCessionKz.serialize(new javax.xml.namespace.QName("",
					"CessionKz"), xmlWriter);

			if (localGmvkzd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Gmvkzd cannot be null!!");
			}
			localGmvkzd.serialize(new javax.xml.namespace.QName("", "Gmvkzd"),
					xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "Mandt"));

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			elementList.add(localMandt);

			elementList.add(new javax.xml.namespace.QName("", "Kunnr"));

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			elementList.add(localKunnr);

			elementList.add(new javax.xml.namespace.QName("", "Bukrs"));

			if (localBukrs == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bukrs cannot be null!!");
			}
			elementList.add(localBukrs);

			elementList.add(new javax.xml.namespace.QName("", "Pernr"));

			if (localPernr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Pernr cannot be null!!");
			}
			elementList.add(localPernr);

			elementList.add(new javax.xml.namespace.QName("", "Erdat"));

			if (localErdat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Erdat cannot be null!!");
			}
			elementList.add(localErdat);

			elementList.add(new javax.xml.namespace.QName("", "Ernam"));

			if (localErnam == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ernam cannot be null!!");
			}
			elementList.add(localErnam);

			elementList.add(new javax.xml.namespace.QName("", "Sperr"));

			if (localSperr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sperr cannot be null!!");
			}
			elementList.add(localSperr);

			elementList.add(new javax.xml.namespace.QName("", "Loevm"));

			if (localLoevm == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Loevm cannot be null!!");
			}
			elementList.add(localLoevm);

			elementList.add(new javax.xml.namespace.QName("", "Zuawa"));

			if (localZuawa == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zuawa cannot be null!!");
			}
			elementList.add(localZuawa);

			elementList.add(new javax.xml.namespace.QName("", "Busab"));

			if (localBusab == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Busab cannot be null!!");
			}
			elementList.add(localBusab);

			elementList.add(new javax.xml.namespace.QName("", "Akont"));

			if (localAkont == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Akont cannot be null!!");
			}
			elementList.add(localAkont);

			elementList.add(new javax.xml.namespace.QName("", "Begru"));

			if (localBegru == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Begru cannot be null!!");
			}
			elementList.add(localBegru);

			elementList.add(new javax.xml.namespace.QName("", "Knrze"));

			if (localKnrze == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Knrze cannot be null!!");
			}
			elementList.add(localKnrze);

			elementList.add(new javax.xml.namespace.QName("", "Knrzb"));

			if (localKnrzb == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Knrzb cannot be null!!");
			}
			elementList.add(localKnrzb);

			elementList.add(new javax.xml.namespace.QName("", "Zamim"));

			if (localZamim == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zamim cannot be null!!");
			}
			elementList.add(localZamim);

			elementList.add(new javax.xml.namespace.QName("", "Zamiv"));

			if (localZamiv == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zamiv cannot be null!!");
			}
			elementList.add(localZamiv);

			elementList.add(new javax.xml.namespace.QName("", "Zamir"));

			if (localZamir == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zamir cannot be null!!");
			}
			elementList.add(localZamir);

			elementList.add(new javax.xml.namespace.QName("", "Zamib"));

			if (localZamib == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zamib cannot be null!!");
			}
			elementList.add(localZamib);

			elementList.add(new javax.xml.namespace.QName("", "Zamio"));

			if (localZamio == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zamio cannot be null!!");
			}
			elementList.add(localZamio);

			elementList.add(new javax.xml.namespace.QName("", "Zwels"));

			if (localZwels == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zwels cannot be null!!");
			}
			elementList.add(localZwels);

			elementList.add(new javax.xml.namespace.QName("", "Xverr"));

			if (localXverr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xverr cannot be null!!");
			}
			elementList.add(localXverr);

			elementList.add(new javax.xml.namespace.QName("", "Zahls"));

			if (localZahls == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zahls cannot be null!!");
			}
			elementList.add(localZahls);

			elementList.add(new javax.xml.namespace.QName("", "Zterm"));

			if (localZterm == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zterm cannot be null!!");
			}
			elementList.add(localZterm);

			elementList.add(new javax.xml.namespace.QName("", "Wakon"));

			if (localWakon == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Wakon cannot be null!!");
			}
			elementList.add(localWakon);

			elementList.add(new javax.xml.namespace.QName("", "Vzskz"));

			if (localVzskz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vzskz cannot be null!!");
			}
			elementList.add(localVzskz);

			elementList.add(new javax.xml.namespace.QName("", "Zindt"));

			if (localZindt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zindt cannot be null!!");
			}
			elementList.add(localZindt);

			elementList.add(new javax.xml.namespace.QName("", "Zinrt"));

			if (localZinrt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zinrt cannot be null!!");
			}
			elementList.add(localZinrt);

			elementList.add(new javax.xml.namespace.QName("", "Eikto"));

			if (localEikto == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Eikto cannot be null!!");
			}
			elementList.add(localEikto);

			elementList.add(new javax.xml.namespace.QName("", "Zsabe"));

			if (localZsabe == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zsabe cannot be null!!");
			}
			elementList.add(localZsabe);

			elementList.add(new javax.xml.namespace.QName("", "Kverm"));

			if (localKverm == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kverm cannot be null!!");
			}
			elementList.add(localKverm);

			elementList.add(new javax.xml.namespace.QName("", "Fdgrv"));

			if (localFdgrv == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Fdgrv cannot be null!!");
			}
			elementList.add(localFdgrv);

			elementList.add(new javax.xml.namespace.QName("", "Vrbkz"));

			if (localVrbkz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vrbkz cannot be null!!");
			}
			elementList.add(localVrbkz);

			elementList.add(new javax.xml.namespace.QName("", "Vlibb"));

			if (localVlibb == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vlibb cannot be null!!");
			}
			elementList.add(localVlibb);

			elementList.add(new javax.xml.namespace.QName("", "Vrszl"));

			if (localVrszl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vrszl cannot be null!!");
			}
			elementList.add(localVrszl);

			elementList.add(new javax.xml.namespace.QName("", "Vrspr"));

			if (localVrspr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vrspr cannot be null!!");
			}
			elementList.add(localVrspr);

			elementList.add(new javax.xml.namespace.QName("", "Vrsnr"));

			if (localVrsnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vrsnr cannot be null!!");
			}
			elementList.add(localVrsnr);

			elementList.add(new javax.xml.namespace.QName("", "Verdt"));

			if (localVerdt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Verdt cannot be null!!");
			}
			elementList.add(localVerdt);

			elementList.add(new javax.xml.namespace.QName("", "Perkz"));

			if (localPerkz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Perkz cannot be null!!");
			}
			elementList.add(localPerkz);

			elementList.add(new javax.xml.namespace.QName("", "Xdezv"));

			if (localXdezv == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xdezv cannot be null!!");
			}
			elementList.add(localXdezv);

			elementList.add(new javax.xml.namespace.QName("", "Xausz"));

			if (localXausz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xausz cannot be null!!");
			}
			elementList.add(localXausz);

			elementList.add(new javax.xml.namespace.QName("", "Webtr"));

			if (localWebtr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Webtr cannot be null!!");
			}
			elementList.add(localWebtr);

			elementList.add(new javax.xml.namespace.QName("", "Remit"));

			if (localRemit == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Remit cannot be null!!");
			}
			elementList.add(localRemit);

			elementList.add(new javax.xml.namespace.QName("", "Datlz"));

			if (localDatlz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Datlz cannot be null!!");
			}
			elementList.add(localDatlz);

			elementList.add(new javax.xml.namespace.QName("", "Xzver"));

			if (localXzver == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xzver cannot be null!!");
			}
			elementList.add(localXzver);

			elementList.add(new javax.xml.namespace.QName("", "Togru"));

			if (localTogru == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Togru cannot be null!!");
			}
			elementList.add(localTogru);

			elementList.add(new javax.xml.namespace.QName("", "Kultg"));

			if (localKultg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kultg cannot be null!!");
			}
			elementList.add(localKultg);

			elementList.add(new javax.xml.namespace.QName("", "Hbkid"));

			if (localHbkid == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Hbkid cannot be null!!");
			}
			elementList.add(localHbkid);

			elementList.add(new javax.xml.namespace.QName("", "Xpore"));

			if (localXpore == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xpore cannot be null!!");
			}
			elementList.add(localXpore);

			elementList.add(new javax.xml.namespace.QName("", "Blnkz"));

			if (localBlnkz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Blnkz cannot be null!!");
			}
			elementList.add(localBlnkz);

			elementList.add(new javax.xml.namespace.QName("", "Altkn"));

			if (localAltkn == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Altkn cannot be null!!");
			}
			elementList.add(localAltkn);

			elementList.add(new javax.xml.namespace.QName("", "Zgrup"));

			if (localZgrup == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Zgrup cannot be null!!");
			}
			elementList.add(localZgrup);

			elementList.add(new javax.xml.namespace.QName("", "Urlid"));

			if (localUrlid == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Urlid cannot be null!!");
			}
			elementList.add(localUrlid);

			elementList.add(new javax.xml.namespace.QName("", "Mgrup"));

			if (localMgrup == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mgrup cannot be null!!");
			}
			elementList.add(localMgrup);

			elementList.add(new javax.xml.namespace.QName("", "Lockb"));

			if (localLockb == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lockb cannot be null!!");
			}
			elementList.add(localLockb);

			elementList.add(new javax.xml.namespace.QName("", "Uzawe"));

			if (localUzawe == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Uzawe cannot be null!!");
			}
			elementList.add(localUzawe);

			elementList.add(new javax.xml.namespace.QName("", "Ekvbd"));

			if (localEkvbd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Ekvbd cannot be null!!");
			}
			elementList.add(localEkvbd);

			elementList.add(new javax.xml.namespace.QName("", "Sregl"));

			if (localSregl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sregl cannot be null!!");
			}
			elementList.add(localSregl);

			elementList.add(new javax.xml.namespace.QName("", "Xedip"));

			if (localXedip == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xedip cannot be null!!");
			}
			elementList.add(localXedip);

			elementList.add(new javax.xml.namespace.QName("", "Frgrp"));

			if (localFrgrp == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Frgrp cannot be null!!");
			}
			elementList.add(localFrgrp);

			elementList.add(new javax.xml.namespace.QName("", "Vrsdg"));

			if (localVrsdg == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Vrsdg cannot be null!!");
			}
			elementList.add(localVrsdg);

			elementList.add(new javax.xml.namespace.QName("", "Tlfxs"));

			if (localTlfxs == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tlfxs cannot be null!!");
			}
			elementList.add(localTlfxs);

			elementList.add(new javax.xml.namespace.QName("", "Intad"));

			if (localIntad == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Intad cannot be null!!");
			}
			elementList.add(localIntad);

			elementList.add(new javax.xml.namespace.QName("", "Xknzb"));

			if (localXknzb == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Xknzb cannot be null!!");
			}
			elementList.add(localXknzb);

			elementList.add(new javax.xml.namespace.QName("", "Guzte"));

			if (localGuzte == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Guzte cannot be null!!");
			}
			elementList.add(localGuzte);

			elementList.add(new javax.xml.namespace.QName("", "Gricd"));

			if (localGricd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Gricd cannot be null!!");
			}
			elementList.add(localGricd);

			elementList.add(new javax.xml.namespace.QName("", "Gridt"));

			if (localGridt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Gridt cannot be null!!");
			}
			elementList.add(localGridt);

			elementList.add(new javax.xml.namespace.QName("", "Wbrsl"));

			if (localWbrsl == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Wbrsl cannot be null!!");
			}
			elementList.add(localWbrsl);

			elementList.add(new javax.xml.namespace.QName("", "Confs"));

			if (localConfs == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Confs cannot be null!!");
			}
			elementList.add(localConfs);

			elementList.add(new javax.xml.namespace.QName("", "Updat"));

			if (localUpdat == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Updat cannot be null!!");
			}
			elementList.add(localUpdat);

			elementList.add(new javax.xml.namespace.QName("", "Uptim"));

			if (localUptim == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Uptim cannot be null!!");
			}
			elementList.add(localUptim);

			elementList.add(new javax.xml.namespace.QName("", "Nodel"));

			if (localNodel == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Nodel cannot be null!!");
			}
			elementList.add(localNodel);

			elementList.add(new javax.xml.namespace.QName("", "Tlfns"));

			if (localTlfns == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tlfns cannot be null!!");
			}
			elementList.add(localTlfns);

			elementList.add(new javax.xml.namespace.QName("", "CessionKz"));

			if (localCessionKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"CessionKz cannot be null!!");
			}
			elementList.add(localCessionKz);

			elementList.add(new javax.xml.namespace.QName("", "Gmvkzd"));

			if (localGmvkzd == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Gmvkzd cannot be null!!");
			}
			elementList.add(localGmvkzd);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Knb1 parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Knb1 object = new Knb1();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"Knb1".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Knb1) ExtensionMapper.getTypeObject(
										nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mandt")
									.equals(reader.getName())) {

						object.setMandt(Clnt3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kunnr")
									.equals(reader.getName())) {

						object.setKunnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bukrs")
									.equals(reader.getName())) {

						object.setBukrs(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Pernr")
									.equals(reader.getName())) {

						object.setPernr(Numeric8.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Erdat")
									.equals(reader.getName())) {

						object.setErdat(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Ernam")
									.equals(reader.getName())) {

						object.setErnam(Char12.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sperr")
									.equals(reader.getName())) {

						object.setSperr(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Loevm")
									.equals(reader.getName())) {

						object.setLoevm(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Zuawa")
									.equals(reader.getName())) {

						object.setZuawa(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Busab")
									.equals(reader.getName())) {

						object.setBusab(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Akont")
									.equals(reader.getName())) {

						object.setAkont(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Begru")
									.equals(reader.getName())) {

						object.setBegru(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Knrze")
									.equals(reader.getName())) {

						object.setKnrze(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Knrzb")
									.equals(reader.getName())) {

						object.setKnrzb(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Zamim")
									.equals(reader.getName())) {

						object.setZamim(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Zamiv")
									.equals(reader.getName())) {

						object.setZamiv(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Zamir")
									.equals(reader.getName())) {

						object.setZamir(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Zamib")
									.equals(reader.getName())) {

						object.setZamib(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Zamio")
									.equals(reader.getName())) {

						object.setZamio(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Zwels")
									.equals(reader.getName())) {

						object.setZwels(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Xverr")
									.equals(reader.getName())) {

						object.setXverr(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Zahls")
									.equals(reader.getName())) {

						object.setZahls(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Zterm")
									.equals(reader.getName())) {

						object.setZterm(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Wakon")
									.equals(reader.getName())) {

						object.setWakon(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vzskz")
									.equals(reader.getName())) {

						object.setVzskz(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Zindt")
									.equals(reader.getName())) {

						object.setZindt(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Zinrt")
									.equals(reader.getName())) {

						object.setZinrt(Numeric2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Eikto")
									.equals(reader.getName())) {

						object.setEikto(Char12.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Zsabe")
									.equals(reader.getName())) {

						object.setZsabe(Char15.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kverm")
									.equals(reader.getName())) {

						object.setKverm(Char30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Fdgrv")
									.equals(reader.getName())) {

						object.setFdgrv(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vrbkz")
									.equals(reader.getName())) {

						object.setVrbkz(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vlibb")
									.equals(reader.getName())) {

						object.setVlibb(Curr132.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vrszl")
									.equals(reader.getName())) {

						object.setVrszl(Decimal30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vrspr")
									.equals(reader.getName())) {

						object.setVrspr(Decimal30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vrsnr")
									.equals(reader.getName())) {

						object.setVrsnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Verdt")
									.equals(reader.getName())) {

						object.setVerdt(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Perkz")
									.equals(reader.getName())) {

						object.setPerkz(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Xdezv")
									.equals(reader.getName())) {

						object.setXdezv(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Xausz")
									.equals(reader.getName())) {

						object.setXausz(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Webtr")
									.equals(reader.getName())) {

						object.setWebtr(Curr132.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Remit")
									.equals(reader.getName())) {

						object.setRemit(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Datlz")
									.equals(reader.getName())) {

						object.setDatlz(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Xzver")
									.equals(reader.getName())) {

						object.setXzver(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Togru")
									.equals(reader.getName())) {

						object.setTogru(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kultg")
									.equals(reader.getName())) {

						object.setKultg(Decimal30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Hbkid")
									.equals(reader.getName())) {

						object.setHbkid(Char5.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Xpore")
									.equals(reader.getName())) {

						object.setXpore(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Blnkz")
									.equals(reader.getName())) {

						object.setBlnkz(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Altkn")
									.equals(reader.getName())) {

						object.setAltkn(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Zgrup")
									.equals(reader.getName())) {

						object.setZgrup(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Urlid")
									.equals(reader.getName())) {

						object.setUrlid(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mgrup")
									.equals(reader.getName())) {

						object.setMgrup(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Lockb")
									.equals(reader.getName())) {

						object.setLockb(Char7.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Uzawe")
									.equals(reader.getName())) {

						object.setUzawe(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Ekvbd")
									.equals(reader.getName())) {

						object.setEkvbd(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sregl")
									.equals(reader.getName())) {

						object.setSregl(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Xedip")
									.equals(reader.getName())) {

						object.setXedip(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Frgrp")
									.equals(reader.getName())) {

						object.setFrgrp(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Vrsdg")
									.equals(reader.getName())) {

						object.setVrsdg(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Tlfxs")
									.equals(reader.getName())) {

						object.setTlfxs(Char31.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Intad")
									.equals(reader.getName())) {

						object.setIntad(Char130.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Xknzb")
									.equals(reader.getName())) {

						object.setXknzb(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Guzte")
									.equals(reader.getName())) {

						object.setGuzte(Char4.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Gricd")
									.equals(reader.getName())) {

						object.setGricd(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Gridt")
									.equals(reader.getName())) {

						object.setGridt(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Wbrsl")
									.equals(reader.getName())) {

						object.setWbrsl(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Confs")
									.equals(reader.getName())) {

						object.setConfs(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Updat")
									.equals(reader.getName())) {

						object.setUpdat(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Uptim")
									.equals(reader.getName())) {

						object.setUptim(Time.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Nodel")
									.equals(reader.getName())) {

						object.setNodel(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Tlfns")
									.equals(reader.getName())) {

						object.setTlfns(Char30.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "CessionKz")
									.equals(reader.getName())) {

						object.setCessionKz(Char2.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Gmvkzd")
									.equals(reader.getName())) {

						object.setGmvkzd(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Time implements org.apache.axis2.databinding.ADBBean {

		public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
				"urn:sap-com:document:sap:rfc:functions", "time", "ns2");

		/**
		 * field for Time
		 */

		protected java.lang.String localTime;

		/**
		 * Auto generated getter method
		 * 
		 * @return java.lang.String
		 */
		public java.lang.String getTime() {
			return localTime;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Time
		 */
		public void setTime(java.lang.String param) {

			if (org.apache.axis2.databinding.utils.ConverterUtil
					.convertToString(param).matches("\\d\\d:\\d\\d:\\d\\d")) {
				this.localTime = param;
			} else {
				throw new java.lang.RuntimeException();
			}

		}

		public java.lang.String toString() {

			return localTime.toString();

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, MY_QNAME);
			return factory.createOMElement(dataSource, MY_QNAME);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it

			java.lang.String namespace = parentQName.getNamespaceURI();
			java.lang.String _localName = parentQName.getLocalPart();

			writeStartElement(null, namespace, _localName, xmlWriter);

			// add the type details if this is used in a simple type
			if (serializeType) {
				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:rfc:functions");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":time", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "time", xmlWriter);
				}
			}

			if (localTime == null) {

				throw new org.apache.axis2.databinding.ADBException(
						"time cannot be null !!");

			} else {

				xmlWriter.writeCharacters(localTime);

			}

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace.equals("urn:sap-com:document:sap:rfc:functions")) {
				return "ns2";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			// We can safely assume an element has only one type associated with
			// it
			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					MY_QNAME,
					new java.lang.Object[] {
							org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
							org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(localTime) }, null);

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			public static Time fromString(java.lang.String value,
					java.lang.String namespaceURI) {
				Time returnValue = new Time();

				returnValue
						.setTime(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(value));

				return returnValue;
			}

			public static Time fromString(
					javax.xml.stream.XMLStreamReader xmlStreamReader,
					java.lang.String content) {
				if (content.indexOf(":") > -1) {
					java.lang.String prefix = content.substring(0,
							content.indexOf(":"));
					java.lang.String namespaceUri = xmlStreamReader
							.getNamespaceContext().getNamespaceURI(prefix);
					return Time.Factory.fromString(content, namespaceUri);
				} else {
					return Time.Factory.fromString(content, "");
				}
			}

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Time parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Time object = new Time();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					while (!reader.isEndElement()) {
						if (reader.isStartElement() || reader.hasText()) {

							if (reader.isStartElement() || reader.hasText()) {

								nillableValue = reader
										.getAttributeValue(
												"http://www.w3.org/2001/XMLSchema-instance",
												"nil");
								if ("true".equals(nillableValue)
										|| "1".equals(nillableValue)) {
									throw new org.apache.axis2.databinding.ADBException(
											"The element: " + "time"
													+ "  cannot be null");
								}

								java.lang.String content = reader
										.getElementText();

								object.setTime(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(content));

							} // End of if for expected property start element

							else {
								// A start element we are not expecting
								// indicates an invalid parameter was passed
								throw new org.apache.axis2.databinding.ADBException(
										"Unexpected subelement "
												+ reader.getName());
							}

						} else {
							reader.next();
						}
					} // end of while loop

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	public static class Fknex implements org.apache.axis2.databinding.ADBBean {
		/*
		 * This type was generated from the piece of schema that had name =
		 * Fknex Namespace URI =
		 * urn:sap-com:document:sap:soap:functions:mc-style Namespace Prefix =
		 * ns1
		 */

		/**
		 * field for Mandt
		 */

		protected Clnt3 localMandt;

		/**
		 * Auto generated getter method
		 * 
		 * @return Clnt3
		 */
		public Clnt3 getMandt() {
			return localMandt;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Mandt
		 */
		public void setMandt(Clnt3 param) {

			this.localMandt = param;

		}

		/**
		 * field for Kunnr
		 */

		protected Char10 localKunnr;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char10
		 */
		public Char10 getKunnr() {
			return localKunnr;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kunnr
		 */
		public void setKunnr(Char10 param) {

			this.localKunnr = param;

		}

		/**
		 * field for Lndex
		 */

		protected Char3 localLndex;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char3
		 */
		public Char3 getLndex() {
			return localLndex;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Lndex
		 */
		public void setLndex(Char3 param) {

			this.localLndex = param;

		}

		/**
		 * field for Tdoco
		 */

		protected Char1 localTdoco;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getTdoco() {
			return localTdoco;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Tdoco
		 */
		public void setTdoco(Char1 param) {

			this.localTdoco = param;

		}

		/**
		 * field for Tdoda
		 */

		protected Date localTdoda;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getTdoda() {
			return localTdoda;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Tdoda
		 */
		public void setTdoda(Date param) {

			this.localTdoda = param;

		}

		/**
		 * field for Sdnco
		 */

		protected Char1 localSdnco;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getSdnco() {
			return localSdnco;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sdnco
		 */
		public void setSdnco(Char1 param) {

			this.localSdnco = param;

		}

		/**
		 * field for Sdnda
		 */

		protected Date localSdnda;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getSdnda() {
			return localSdnda;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sdnda
		 */
		public void setSdnda(Date param) {

			this.localSdnda = param;

		}

		/**
		 * field for Dhrco
		 */

		protected Char1 localDhrco;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getDhrco() {
			return localDhrco;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dhrco
		 */
		public void setDhrco(Char1 param) {

			this.localDhrco = param;

		}

		/**
		 * field for Dhrda
		 */

		protected Date localDhrda;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getDhrda() {
			return localDhrda;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dhrda
		 */
		public void setDhrda(Date param) {

			this.localDhrda = param;

		}

		/**
		 * field for Bl1Co
		 */

		protected Char1 localBl1Co;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getBl1Co() {
			return localBl1Co;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bl1Co
		 */
		public void setBl1Co(Char1 param) {

			this.localBl1Co = param;

		}

		/**
		 * field for Bl1Da
		 */

		protected Date localBl1Da;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getBl1Da() {
			return localBl1Da;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bl1Da
		 */
		public void setBl1Da(Date param) {

			this.localBl1Da = param;

		}

		/**
		 * field for Bl2Co
		 */

		protected Char1 localBl2Co;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getBl2Co() {
			return localBl2Co;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bl2Co
		 */
		public void setBl2Co(Char1 param) {

			this.localBl2Co = param;

		}

		/**
		 * field for Bl2Da
		 */

		protected Date localBl2Da;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getBl2Da() {
			return localBl2Da;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bl2Da
		 */
		public void setBl2Da(Date param) {

			this.localBl2Da = param;

		}

		/**
		 * field for Slsco
		 */

		protected Char1 localSlsco;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getSlsco() {
			return localSlsco;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Slsco
		 */
		public void setSlsco(Char1 param) {

			this.localSlsco = param;

		}

		/**
		 * field for Sldck
		 */

		protected Date localSldck;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getSldck() {
			return localSldck;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sldck
		 */
		public void setSldck(Date param) {

			this.localSldck = param;

		}

		/**
		 * field for Sldst
		 */

		protected Date localSldst;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getSldst() {
			return localSldst;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sldst
		 */
		public void setSldst(Date param) {

			this.localSldst = param;

		}

		/**
		 * field for Slden
		 */

		protected Date localSlden;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getSlden() {
			return localSlden;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Slden
		 */
		public void setSlden(Date param) {

			this.localSlden = param;

		}

		/**
		 * field for Tdost
		 */

		protected Date localTdost;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getTdost() {
			return localTdost;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Tdost
		 */
		public void setTdost(Date param) {

			this.localTdost = param;

		}

		/**
		 * field for Tdoen
		 */

		protected Date localTdoen;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getTdoen() {
			return localTdoen;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Tdoen
		 */
		public void setTdoen(Date param) {

			this.localTdoen = param;

		}

		/**
		 * field for Sdnst
		 */

		protected Date localSdnst;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getSdnst() {
			return localSdnst;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sdnst
		 */
		public void setSdnst(Date param) {

			this.localSdnst = param;

		}

		/**
		 * field for Sdnen
		 */

		protected Date localSdnen;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getSdnen() {
			return localSdnen;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Sdnen
		 */
		public void setSdnen(Date param) {

			this.localSdnen = param;

		}

		/**
		 * field for Dhrst
		 */

		protected Date localDhrst;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getDhrst() {
			return localDhrst;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dhrst
		 */
		public void setDhrst(Date param) {

			this.localDhrst = param;

		}

		/**
		 * field for Dhren
		 */

		protected Date localDhren;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getDhren() {
			return localDhren;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Dhren
		 */
		public void setDhren(Date param) {

			this.localDhren = param;

		}

		/**
		 * field for Bl1St
		 */

		protected Date localBl1St;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getBl1St() {
			return localBl1St;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bl1St
		 */
		public void setBl1St(Date param) {

			this.localBl1St = param;

		}

		/**
		 * field for Bl1En
		 */

		protected Date localBl1En;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getBl1En() {
			return localBl1En;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bl1En
		 */
		public void setBl1En(Date param) {

			this.localBl1En = param;

		}

		/**
		 * field for Bl2St
		 */

		protected Date localBl2St;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getBl2St() {
			return localBl2St;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bl2St
		 */
		public void setBl2St(Date param) {

			this.localBl2St = param;

		}

		/**
		 * field for Bl2En
		 */

		protected Date localBl2En;

		/**
		 * Auto generated getter method
		 * 
		 * @return Date
		 */
		public Date getBl2En() {
			return localBl2En;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Bl2En
		 */
		public void setBl2En(Date param) {

			this.localBl2En = param;

		}

		/**
		 * field for Kz
		 */

		protected Char1 localKz;

		/**
		 * Auto generated getter method
		 * 
		 * @return Char1
		 */
		public Char1 getKz() {
			return localKz;
		}

		/**
		 * Auto generated setter method
		 * 
		 * @param param
		 *            Kz
		 */
		public void setKz(Char1 param) {

			this.localKz = param;

		}

		/**
		 * 
		 * @param parentQName
		 * @param factory
		 * @return org.apache.axiom.om.OMElement
		 */
		public org.apache.axiom.om.OMElement getOMElement(
				final javax.xml.namespace.QName parentQName,
				final org.apache.axiom.om.OMFactory factory)
				throws org.apache.axis2.databinding.ADBException {

			org.apache.axiom.om.OMDataSource dataSource = new org.apache.axis2.databinding.ADBDataSource(
					this, parentQName);
			return factory.createOMElement(dataSource, parentQName);

		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {
			serialize(parentQName, xmlWriter, false);
		}

		public void serialize(final javax.xml.namespace.QName parentQName,
				javax.xml.stream.XMLStreamWriter xmlWriter,
				boolean serializeType)
				throws javax.xml.stream.XMLStreamException,
				org.apache.axis2.databinding.ADBException {

			java.lang.String prefix = null;
			java.lang.String namespace = null;

			prefix = parentQName.getPrefix();
			namespace = parentQName.getNamespaceURI();
			writeStartElement(prefix, namespace, parentQName.getLocalPart(),
					xmlWriter);

			if (serializeType) {

				java.lang.String namespacePrefix = registerPrefix(xmlWriter,
						"urn:sap-com:document:sap:soap:functions:mc-style");
				if ((namespacePrefix != null)
						&& (namespacePrefix.trim().length() > 0)) {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", namespacePrefix + ":Fknex", xmlWriter);
				} else {
					writeAttribute("xsi",
							"http://www.w3.org/2001/XMLSchema-instance",
							"type", "Fknex", xmlWriter);
				}

			}

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			localMandt.serialize(new javax.xml.namespace.QName("", "Mandt"),
					xmlWriter);

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			localKunnr.serialize(new javax.xml.namespace.QName("", "Kunnr"),
					xmlWriter);

			if (localLndex == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lndex cannot be null!!");
			}
			localLndex.serialize(new javax.xml.namespace.QName("", "Lndex"),
					xmlWriter);

			if (localTdoco == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tdoco cannot be null!!");
			}
			localTdoco.serialize(new javax.xml.namespace.QName("", "Tdoco"),
					xmlWriter);

			if (localTdoda == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tdoda cannot be null!!");
			}
			localTdoda.serialize(new javax.xml.namespace.QName("", "Tdoda"),
					xmlWriter);

			if (localSdnco == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sdnco cannot be null!!");
			}
			localSdnco.serialize(new javax.xml.namespace.QName("", "Sdnco"),
					xmlWriter);

			if (localSdnda == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sdnda cannot be null!!");
			}
			localSdnda.serialize(new javax.xml.namespace.QName("", "Sdnda"),
					xmlWriter);

			if (localDhrco == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dhrco cannot be null!!");
			}
			localDhrco.serialize(new javax.xml.namespace.QName("", "Dhrco"),
					xmlWriter);

			if (localDhrda == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dhrda cannot be null!!");
			}
			localDhrda.serialize(new javax.xml.namespace.QName("", "Dhrda"),
					xmlWriter);

			if (localBl1Co == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bl1co cannot be null!!");
			}
			localBl1Co.serialize(new javax.xml.namespace.QName("", "Bl1co"),
					xmlWriter);

			if (localBl1Da == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bl1da cannot be null!!");
			}
			localBl1Da.serialize(new javax.xml.namespace.QName("", "Bl1da"),
					xmlWriter);

			if (localBl2Co == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bl2co cannot be null!!");
			}
			localBl2Co.serialize(new javax.xml.namespace.QName("", "Bl2co"),
					xmlWriter);

			if (localBl2Da == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bl2da cannot be null!!");
			}
			localBl2Da.serialize(new javax.xml.namespace.QName("", "Bl2da"),
					xmlWriter);

			if (localSlsco == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Slsco cannot be null!!");
			}
			localSlsco.serialize(new javax.xml.namespace.QName("", "Slsco"),
					xmlWriter);

			if (localSldck == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sldck cannot be null!!");
			}
			localSldck.serialize(new javax.xml.namespace.QName("", "Sldck"),
					xmlWriter);

			if (localSldst == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sldst cannot be null!!");
			}
			localSldst.serialize(new javax.xml.namespace.QName("", "Sldst"),
					xmlWriter);

			if (localSlden == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Slden cannot be null!!");
			}
			localSlden.serialize(new javax.xml.namespace.QName("", "Slden"),
					xmlWriter);

			if (localTdost == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tdost cannot be null!!");
			}
			localTdost.serialize(new javax.xml.namespace.QName("", "Tdost"),
					xmlWriter);

			if (localTdoen == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tdoen cannot be null!!");
			}
			localTdoen.serialize(new javax.xml.namespace.QName("", "Tdoen"),
					xmlWriter);

			if (localSdnst == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sdnst cannot be null!!");
			}
			localSdnst.serialize(new javax.xml.namespace.QName("", "Sdnst"),
					xmlWriter);

			if (localSdnen == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sdnen cannot be null!!");
			}
			localSdnen.serialize(new javax.xml.namespace.QName("", "Sdnen"),
					xmlWriter);

			if (localDhrst == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dhrst cannot be null!!");
			}
			localDhrst.serialize(new javax.xml.namespace.QName("", "Dhrst"),
					xmlWriter);

			if (localDhren == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dhren cannot be null!!");
			}
			localDhren.serialize(new javax.xml.namespace.QName("", "Dhren"),
					xmlWriter);

			if (localBl1St == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bl1st cannot be null!!");
			}
			localBl1St.serialize(new javax.xml.namespace.QName("", "Bl1st"),
					xmlWriter);

			if (localBl1En == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bl1en cannot be null!!");
			}
			localBl1En.serialize(new javax.xml.namespace.QName("", "Bl1en"),
					xmlWriter);

			if (localBl2St == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bl2st cannot be null!!");
			}
			localBl2St.serialize(new javax.xml.namespace.QName("", "Bl2st"),
					xmlWriter);

			if (localBl2En == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bl2en cannot be null!!");
			}
			localBl2En.serialize(new javax.xml.namespace.QName("", "Bl2en"),
					xmlWriter);

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			localKz.serialize(new javax.xml.namespace.QName("", "Kz"),
					xmlWriter);

			xmlWriter.writeEndElement();

		}

		private static java.lang.String generatePrefix(
				java.lang.String namespace) {
			if (namespace
					.equals("urn:sap-com:document:sap:soap:functions:mc-style")) {
				return "ns1";
			}
			return org.apache.axis2.databinding.utils.BeanUtil
					.getUniquePrefix();
		}

		/**
		 * Utility method to write an element start tag.
		 */
		private void writeStartElement(java.lang.String prefix,
				java.lang.String namespace, java.lang.String localPart,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
			if (writerPrefix != null) {
				xmlWriter.writeStartElement(namespace, localPart);
			} else {
				if (namespace.length() == 0) {
					prefix = "";
				} else if (prefix == null) {
					prefix = generatePrefix(namespace);
				}

				xmlWriter.writeStartElement(prefix, localPart, namespace);
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
		}

		/**
		 * Util method to write an attribute with the ns prefix
		 */
		private void writeAttribute(java.lang.String prefix,
				java.lang.String namespace, java.lang.String attName,
				java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (xmlWriter.getPrefix(namespace) == null) {
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			xmlWriter.writeAttribute(namespace, attName, attValue);
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeAttribute(java.lang.String namespace,
				java.lang.String attName, java.lang.String attValue,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attValue);
			}
		}

		/**
		 * Util method to write an attribute without the ns prefix
		 */
		private void writeQNameAttribute(java.lang.String namespace,
				java.lang.String attName, javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			java.lang.String attributeNamespace = qname.getNamespaceURI();
			java.lang.String attributePrefix = xmlWriter
					.getPrefix(attributeNamespace);
			if (attributePrefix == null) {
				attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
			}
			java.lang.String attributeValue;
			if (attributePrefix.trim().length() > 0) {
				attributeValue = attributePrefix + ":" + qname.getLocalPart();
			} else {
				attributeValue = qname.getLocalPart();
			}

			if (namespace.equals("")) {
				xmlWriter.writeAttribute(attName, attributeValue);
			} else {
				registerPrefix(xmlWriter, namespace);
				xmlWriter.writeAttribute(namespace, attName, attributeValue);
			}
		}

		/**
		 * method to handle Qnames
		 */

		private void writeQName(javax.xml.namespace.QName qname,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String namespaceURI = qname.getNamespaceURI();
			if (namespaceURI != null) {
				java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
				if (prefix == null) {
					prefix = generatePrefix(namespaceURI);
					xmlWriter.writeNamespace(prefix, namespaceURI);
					xmlWriter.setPrefix(prefix, namespaceURI);
				}

				if (prefix.trim().length() > 0) {
					xmlWriter.writeCharacters(prefix
							+ ":"
							+ org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				} else {
					// i.e this is the default namespace
					xmlWriter
							.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
									.convertToString(qname));
				}

			} else {
				xmlWriter
						.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil
								.convertToString(qname));
			}
		}

		private void writeQNames(javax.xml.namespace.QName[] qnames,
				javax.xml.stream.XMLStreamWriter xmlWriter)
				throws javax.xml.stream.XMLStreamException {

			if (qnames != null) {
				// we have to store this data until last moment since it is not
				// possible to write any
				// namespace data after writing the charactor data
				java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
				java.lang.String namespaceURI = null;
				java.lang.String prefix = null;

				for (int i = 0; i < qnames.length; i++) {
					if (i > 0) {
						stringToWrite.append(" ");
					}
					namespaceURI = qnames[i].getNamespaceURI();
					if (namespaceURI != null) {
						prefix = xmlWriter.getPrefix(namespaceURI);
						if ((prefix == null) || (prefix.length() == 0)) {
							prefix = generatePrefix(namespaceURI);
							xmlWriter.writeNamespace(prefix, namespaceURI);
							xmlWriter.setPrefix(prefix, namespaceURI);
						}

						if (prefix.trim().length() > 0) {
							stringToWrite
									.append(prefix)
									.append(":")
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						} else {
							stringToWrite
									.append(org.apache.axis2.databinding.utils.ConverterUtil
											.convertToString(qnames[i]));
						}
					} else {
						stringToWrite
								.append(org.apache.axis2.databinding.utils.ConverterUtil
										.convertToString(qnames[i]));
					}
				}
				xmlWriter.writeCharacters(stringToWrite.toString());
			}

		}

		/**
		 * Register a namespace prefix
		 */
		private java.lang.String registerPrefix(
				javax.xml.stream.XMLStreamWriter xmlWriter,
				java.lang.String namespace)
				throws javax.xml.stream.XMLStreamException {
			java.lang.String prefix = xmlWriter.getPrefix(namespace);
			if (prefix == null) {
				prefix = generatePrefix(namespace);
				javax.xml.namespace.NamespaceContext nsContext = xmlWriter
						.getNamespaceContext();
				while (true) {
					java.lang.String uri = nsContext.getNamespaceURI(prefix);
					if (uri == null || uri.length() == 0) {
						break;
					}
					prefix = org.apache.axis2.databinding.utils.BeanUtil
							.getUniquePrefix();
				}
				xmlWriter.writeNamespace(prefix, namespace);
				xmlWriter.setPrefix(prefix, namespace);
			}
			return prefix;
		}

		/**
		 * databinding method to get an XML representation of this object
		 * 
		 */
		public javax.xml.stream.XMLStreamReader getPullParser(
				javax.xml.namespace.QName qName)
				throws org.apache.axis2.databinding.ADBException {

			java.util.ArrayList elementList = new java.util.ArrayList();
			java.util.ArrayList attribList = new java.util.ArrayList();

			elementList.add(new javax.xml.namespace.QName("", "Mandt"));

			if (localMandt == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Mandt cannot be null!!");
			}
			elementList.add(localMandt);

			elementList.add(new javax.xml.namespace.QName("", "Kunnr"));

			if (localKunnr == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kunnr cannot be null!!");
			}
			elementList.add(localKunnr);

			elementList.add(new javax.xml.namespace.QName("", "Lndex"));

			if (localLndex == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Lndex cannot be null!!");
			}
			elementList.add(localLndex);

			elementList.add(new javax.xml.namespace.QName("", "Tdoco"));

			if (localTdoco == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tdoco cannot be null!!");
			}
			elementList.add(localTdoco);

			elementList.add(new javax.xml.namespace.QName("", "Tdoda"));

			if (localTdoda == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tdoda cannot be null!!");
			}
			elementList.add(localTdoda);

			elementList.add(new javax.xml.namespace.QName("", "Sdnco"));

			if (localSdnco == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sdnco cannot be null!!");
			}
			elementList.add(localSdnco);

			elementList.add(new javax.xml.namespace.QName("", "Sdnda"));

			if (localSdnda == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sdnda cannot be null!!");
			}
			elementList.add(localSdnda);

			elementList.add(new javax.xml.namespace.QName("", "Dhrco"));

			if (localDhrco == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dhrco cannot be null!!");
			}
			elementList.add(localDhrco);

			elementList.add(new javax.xml.namespace.QName("", "Dhrda"));

			if (localDhrda == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dhrda cannot be null!!");
			}
			elementList.add(localDhrda);

			elementList.add(new javax.xml.namespace.QName("", "Bl1co"));

			if (localBl1Co == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bl1co cannot be null!!");
			}
			elementList.add(localBl1Co);

			elementList.add(new javax.xml.namespace.QName("", "Bl1da"));

			if (localBl1Da == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bl1da cannot be null!!");
			}
			elementList.add(localBl1Da);

			elementList.add(new javax.xml.namespace.QName("", "Bl2co"));

			if (localBl2Co == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bl2co cannot be null!!");
			}
			elementList.add(localBl2Co);

			elementList.add(new javax.xml.namespace.QName("", "Bl2da"));

			if (localBl2Da == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bl2da cannot be null!!");
			}
			elementList.add(localBl2Da);

			elementList.add(new javax.xml.namespace.QName("", "Slsco"));

			if (localSlsco == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Slsco cannot be null!!");
			}
			elementList.add(localSlsco);

			elementList.add(new javax.xml.namespace.QName("", "Sldck"));

			if (localSldck == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sldck cannot be null!!");
			}
			elementList.add(localSldck);

			elementList.add(new javax.xml.namespace.QName("", "Sldst"));

			if (localSldst == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sldst cannot be null!!");
			}
			elementList.add(localSldst);

			elementList.add(new javax.xml.namespace.QName("", "Slden"));

			if (localSlden == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Slden cannot be null!!");
			}
			elementList.add(localSlden);

			elementList.add(new javax.xml.namespace.QName("", "Tdost"));

			if (localTdost == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tdost cannot be null!!");
			}
			elementList.add(localTdost);

			elementList.add(new javax.xml.namespace.QName("", "Tdoen"));

			if (localTdoen == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Tdoen cannot be null!!");
			}
			elementList.add(localTdoen);

			elementList.add(new javax.xml.namespace.QName("", "Sdnst"));

			if (localSdnst == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sdnst cannot be null!!");
			}
			elementList.add(localSdnst);

			elementList.add(new javax.xml.namespace.QName("", "Sdnen"));

			if (localSdnen == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Sdnen cannot be null!!");
			}
			elementList.add(localSdnen);

			elementList.add(new javax.xml.namespace.QName("", "Dhrst"));

			if (localDhrst == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dhrst cannot be null!!");
			}
			elementList.add(localDhrst);

			elementList.add(new javax.xml.namespace.QName("", "Dhren"));

			if (localDhren == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Dhren cannot be null!!");
			}
			elementList.add(localDhren);

			elementList.add(new javax.xml.namespace.QName("", "Bl1st"));

			if (localBl1St == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bl1st cannot be null!!");
			}
			elementList.add(localBl1St);

			elementList.add(new javax.xml.namespace.QName("", "Bl1en"));

			if (localBl1En == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bl1en cannot be null!!");
			}
			elementList.add(localBl1En);

			elementList.add(new javax.xml.namespace.QName("", "Bl2st"));

			if (localBl2St == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bl2st cannot be null!!");
			}
			elementList.add(localBl2St);

			elementList.add(new javax.xml.namespace.QName("", "Bl2en"));

			if (localBl2En == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Bl2en cannot be null!!");
			}
			elementList.add(localBl2En);

			elementList.add(new javax.xml.namespace.QName("", "Kz"));

			if (localKz == null) {
				throw new org.apache.axis2.databinding.ADBException(
						"Kz cannot be null!!");
			}
			elementList.add(localKz);

			return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(
					qName, elementList.toArray(), attribList.toArray());

		}

		/**
		 * Factory class that keeps the parse method
		 */
		public static class Factory {

			/**
			 * static method to create the object Precondition: If this object
			 * is an element, the current or next start element starts this
			 * object and any intervening reader events are ignorable If this
			 * object is not an element, it is a complex type and the reader is
			 * at the event just after the outer start element Postcondition: If
			 * this object is an element, the reader is positioned at its end
			 * element If this object is a complex type, the reader is
			 * positioned at the end element of its outer element
			 */
			public static Fknex parse(javax.xml.stream.XMLStreamReader reader)
					throws java.lang.Exception {
				Fknex object = new Fknex();

				int event;
				java.lang.String nillableValue = null;
				java.lang.String prefix = "";
				java.lang.String namespaceuri = "";
				try {

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader
							.getAttributeValue(
									"http://www.w3.org/2001/XMLSchema-instance",
									"type") != null) {
						java.lang.String fullTypeName = reader
								.getAttributeValue(
										"http://www.w3.org/2001/XMLSchema-instance",
										"type");
						if (fullTypeName != null) {
							java.lang.String nsPrefix = null;
							if (fullTypeName.indexOf(":") > -1) {
								nsPrefix = fullTypeName.substring(0,
										fullTypeName.indexOf(":"));
							}
							nsPrefix = nsPrefix == null ? "" : nsPrefix;

							java.lang.String type = fullTypeName
									.substring(fullTypeName.indexOf(":") + 1);

							if (!"Fknex".equals(type)) {
								// find namespace for the prefix
								java.lang.String nsUri = reader
										.getNamespaceContext().getNamespaceURI(
												nsPrefix);
								return (Fknex) ExtensionMapper.getTypeObject(
										nsUri, type, reader);
							}

						}

					}

					// Note all attributes that were handled. Used to differ
					// normal attributes
					// from anyAttributes.
					java.util.Vector handledAttributes = new java.util.Vector();

					reader.next();

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Mandt")
									.equals(reader.getName())) {

						object.setMandt(Clnt3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kunnr")
									.equals(reader.getName())) {

						object.setKunnr(Char10.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Lndex")
									.equals(reader.getName())) {

						object.setLndex(Char3.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Tdoco")
									.equals(reader.getName())) {

						object.setTdoco(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Tdoda")
									.equals(reader.getName())) {

						object.setTdoda(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sdnco")
									.equals(reader.getName())) {

						object.setSdnco(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sdnda")
									.equals(reader.getName())) {

						object.setSdnda(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dhrco")
									.equals(reader.getName())) {

						object.setDhrco(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dhrda")
									.equals(reader.getName())) {

						object.setDhrda(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bl1co")
									.equals(reader.getName())) {

						object.setBl1Co(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bl1da")
									.equals(reader.getName())) {

						object.setBl1Da(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bl2co")
									.equals(reader.getName())) {

						object.setBl2Co(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bl2da")
									.equals(reader.getName())) {

						object.setBl2Da(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Slsco")
									.equals(reader.getName())) {

						object.setSlsco(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sldck")
									.equals(reader.getName())) {

						object.setSldck(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sldst")
									.equals(reader.getName())) {

						object.setSldst(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Slden")
									.equals(reader.getName())) {

						object.setSlden(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Tdost")
									.equals(reader.getName())) {

						object.setTdost(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Tdoen")
									.equals(reader.getName())) {

						object.setTdoen(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sdnst")
									.equals(reader.getName())) {

						object.setSdnst(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Sdnen")
									.equals(reader.getName())) {

						object.setSdnen(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dhrst")
									.equals(reader.getName())) {

						object.setDhrst(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Dhren")
									.equals(reader.getName())) {

						object.setDhren(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bl1st")
									.equals(reader.getName())) {

						object.setBl1St(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bl1en")
									.equals(reader.getName())) {

						object.setBl1En(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bl2st")
									.equals(reader.getName())) {

						object.setBl2St(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Bl2en")
									.equals(reader.getName())) {

						object.setBl2En(Date.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement()
							&& new javax.xml.namespace.QName("", "Kz")
									.equals(reader.getName())) {

						object.setKz(Char1.Factory.parse(reader));

						reader.next();

					} // End of if for expected property start element

					else {
						// A start element we are not expecting indicates an
						// invalid parameter was passed
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());
					}

					while (!reader.isStartElement() && !reader.isEndElement())
						reader.next();

					if (reader.isStartElement())
						// A start element we are not expecting indicates a
						// trailing invalid property
						throw new org.apache.axis2.databinding.ADBException(
								"Unexpected subelement " + reader.getName());

				} catch (javax.xml.stream.XMLStreamException e) {
					throw new java.lang.Exception(e);
				}

				return object;
			}

		}// end of factory class

	}

	private org.apache.axiom.om.OMElement toOM(
			com.tactusoft.webservice.client.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALLStub.ZsdCustomerMaintainAll param,
			boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param
					.getOMElement(
							com.tactusoft.webservice.client.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALLStub.ZsdCustomerMaintainAll.MY_QNAME,
							org.apache.axiom.om.OMAbstractFactory
									.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.om.OMElement toOM(
			com.tactusoft.webservice.client.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALLStub.ZsdCustomerMaintainAllResponse param,
			boolean optimizeContent) throws org.apache.axis2.AxisFault {

		try {
			return param
					.getOMElement(
							com.tactusoft.webservice.client.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALLStub.ZsdCustomerMaintainAllResponse.MY_QNAME,
							org.apache.axiom.om.OMAbstractFactory
									.getOMFactory());
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
			org.apache.axiom.soap.SOAPFactory factory,
			com.tactusoft.webservice.client.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALLStub.ZsdCustomerMaintainAll param,
			boolean optimizeContent, javax.xml.namespace.QName methodQName)
			throws org.apache.axis2.AxisFault {

		try {

			org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory
					.getDefaultEnvelope();
			emptyEnvelope
					.getBody()
					.addChild(
							param.getOMElement(
									com.tactusoft.webservice.client.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALLStub.ZsdCustomerMaintainAll.MY_QNAME,
									factory));
			return emptyEnvelope;
		} catch (org.apache.axis2.databinding.ADBException e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}

	}

	/* methods to provide back word compatibility */

	/**
	 * get the default envelope
	 */
	private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
			org.apache.axiom.soap.SOAPFactory factory) {
		return factory.getDefaultEnvelope();
	}

	private java.lang.Object fromOM(org.apache.axiom.om.OMElement param,
			java.lang.Class type, java.util.Map extraNamespaces)
			throws org.apache.axis2.AxisFault {

		try {

			if (com.tactusoft.webservice.client.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALLStub.ZsdCustomerMaintainAll.class
					.equals(type)) {

				return com.tactusoft.webservice.client.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALLStub.ZsdCustomerMaintainAll.Factory
						.parse(param.getXMLStreamReaderWithoutCaching());

			}

			if (com.tactusoft.webservice.client.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALLStub.ZsdCustomerMaintainAllResponse.class
					.equals(type)) {

				return com.tactusoft.webservice.client.zsdcustomermaintainall.Z_SD_CUSTOMER_MAINTAIN_ALLStub.ZsdCustomerMaintainAllResponse.Factory
						.parse(param.getXMLStreamReaderWithoutCaching());

			}

		} catch (java.lang.Exception e) {
			throw org.apache.axis2.AxisFault.makeFault(e);
		}
		return null;
	}

}
