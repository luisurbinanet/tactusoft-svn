package co.com.tactusoft.medical.model.entities;

// Generated 15/03/2012 04:01:48 PM by Hibernate Tools 3.4.0.CR1

import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import co.com.tactusoft.medical.util.Constant;
import co.com.tactusoft.medical.util.FacesUtil;
import co.com.tactusoft.medical.view.backing.ParameterBacking;

/**
 * MedQuestion generated by hbm2java
 */
@Entity
@Table(name = "med_question", catalog = "medical_db")
public class MedQuestion implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private BigDecimal id;
	private MedTopic medTopic;
	private String name;
	private String typeQuestion;
	private String resourceType;
	private String urlLink;
	private String image;
	private String typeVideo;
	private String loadMode;
	private BigDecimal positive;
	private BigDecimal negative;
	private Integer orderQuestion;
	private Set<MedCombination> medCombinationsForIdQuestion = new HashSet<MedCombination>(
			0);
	private Set<MedCombination> medCombinationsForNextQuestion = new HashSet<MedCombination>(
			0);
	private Set<MedAnswer> medAnswers = new HashSet<MedAnswer>(0);

	public MedQuestion() {
	}

	public MedQuestion(BigDecimal id, MedTopic medTopic, String name,
			String typeQuestion) {
		this.id = id;
		this.medTopic = medTopic;
		this.name = name;
		this.typeQuestion = typeQuestion;
	}

	public MedQuestion(BigDecimal id, MedTopic medTopic, String name,
			String typeQuestion, String resourceType, String urlLink,
			String image, String typeVideo, String loadMode,
			BigDecimal positive, BigDecimal negative, Integer orderQuestion,
			Set<MedCombination> medCombinationsForIdQuestion,
			Set<MedCombination> medCombinationsForNextQuestion,
			Set<MedAnswer> medAnswers) {
		this.id = id;
		this.medTopic = medTopic;
		this.name = name;
		this.typeQuestion = typeQuestion;
		this.resourceType = resourceType;
		this.urlLink = urlLink;
		this.image = image;
		this.typeVideo = typeVideo;
		this.loadMode = loadMode;
		this.positive = positive;
		this.negative = negative;
		this.orderQuestion = orderQuestion;
		this.medCombinationsForIdQuestion = medCombinationsForIdQuestion;
		this.medCombinationsForNextQuestion = medCombinationsForNextQuestion;
		this.medAnswers = medAnswers;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false, scale = 0)
	public BigDecimal getId() {
		return this.id;
	}

	public void setId(BigDecimal id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_topic", nullable = false)
	public MedTopic getMedTopic() {
		return this.medTopic;
	}

	public void setMedTopic(MedTopic medTopic) {
		this.medTopic = medTopic;
	}

	@Column(name = "name", nullable = false, length = 65535)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "type_question", nullable = false, length = 45)
	public String getTypeQuestion() {
		return this.typeQuestion;
	}

	public void setTypeQuestion(String typeQuestion) {
		this.typeQuestion = typeQuestion;
	}

	@Column(name = "resource_type", length = 15)
	public String getResourceType() {
		return this.resourceType;
	}

	public void setResourceType(String resourceType) {
		this.resourceType = resourceType;
	}

	@Column(name = "url_link")
	public String getUrlLink() {
		return this.urlLink;
	}

	public void setUrlLink(String urlLink) {
		this.urlLink = urlLink;
	}

	@Column(name = "image")
	public String getImage() {
		return this.image;
	}

	public void setImage(String image) {
		this.image = image;
	}

	@Column(name = "type_video", length = 45)
	public String getTypeVideo() {
		return this.typeVideo;
	}

	public void setTypeVideo(String typeVideo) {
		this.typeVideo = typeVideo;
	}

	@Column(name = "load_mode", length = 15)
	public String getLoadMode() {
		return this.loadMode;
	}

	public void setLoadMode(String loadMode) {
		this.loadMode = loadMode;
	}

	@Column(name = "positive", scale = 0)
	public BigDecimal getPositive() {
		return this.positive;
	}

	public void setPositive(BigDecimal positive) {
		this.positive = positive;
	}

	@Column(name = "negative", scale = 0)
	public BigDecimal getNegative() {
		return this.negative;
	}

	public void setNegative(BigDecimal negative) {
		this.negative = negative;
	}

	@Column(name = "order_question")
	public Integer getOrderQuestion() {
		return this.orderQuestion;
	}

	public void setOrderQuestion(Integer orderQuestion) {
		this.orderQuestion = orderQuestion;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "medQuestionByIdQuestion", cascade = { CascadeType.REMOVE })
	public Set<MedCombination> getMedCombinationsForIdQuestion() {
		return this.medCombinationsForIdQuestion;
	}

	public void setMedCombinationsForIdQuestion(
			Set<MedCombination> medCombinationsForIdQuestion) {
		this.medCombinationsForIdQuestion = medCombinationsForIdQuestion;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "medQuestionByNextQuestion")
	public Set<MedCombination> getMedCombinationsForNextQuestion() {
		return this.medCombinationsForNextQuestion;
	}

	public void setMedCombinationsForNextQuestion(
			Set<MedCombination> medCombinationsForNextQuestion) {
		this.medCombinationsForNextQuestion = medCombinationsForNextQuestion;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "medQuestion")
	public Set<MedAnswer> getMedAnswers() {
		return this.medAnswers;
	}

	public void setMedAnswers(Set<MedAnswer> medAnswers) {
		this.medAnswers = medAnswers;
	}

	@Transient
	public String getDetType() {
		String detType = null;

		if (typeQuestion.equals(Constant.QUESTION_TYPE_MESSAGE)) {
			detType = FacesUtil.getMessage("que_type_message");
		} else if (typeQuestion.equals(Constant.QUESTION_TYPE_ASSERTIVE)) {
			detType = FacesUtil.getMessage("que_type_assertive");
		} else if (typeQuestion.equals(Constant.QUESTION_TYPE_UNIQUE)) {
			detType = FacesUtil.getMessage("que_type_unique");
		} else if (typeQuestion.equals(Constant.QUESTION_TYPE_MULTIPLE)) {
			detType = FacesUtil.getMessage("que_type_multiple");
		} else if (typeQuestion.equals(Constant.QUESTION_TYPE_FINAL)) {
			detType = FacesUtil.getMessage("que_type_final");
		}

		return detType;
	}

	@Transient
	public String getDetResourceType() {
		String detType = null;

		if (typeQuestion != null
				&& typeQuestion.equals(Constant.QUESTION_TYPE_FINAL)) {
			if (resourceType.equals(Constant.RESOURCE_TYPE_VIDEO)) {
				if (loadMode.equals(Constant.LOAD_MODE_ON_LINE)) {
					detType = "VIDEO_ON_LINE";
				} else {
					detType = "VIDEO_OFF_LINE";
				}
			} else if (resourceType.equals(Constant.RESOURCE_TYPE_IMAGE)) {
				if (loadMode.equals(Constant.LOAD_MODE_ON_LINE)) {
					detType = "IMAGE_ON_LINE";
				} else {
					detType = "IMAGE_OFF_LINE";
				}
			} else {
				detType = loadMode;
			}
		}
		return detType;
	}

	@Transient
	public boolean isImageVideoONLINE() {
		boolean detType = false;

		if (typeQuestion != null
				&& typeQuestion.equals(Constant.QUESTION_TYPE_FINAL)) {
			if (resourceType.equals(Constant.RESOURCE_TYPE_VIDEO)) {
				if (loadMode.equals(Constant.LOAD_MODE_ON_LINE)) {
					detType = true;
				}
			} else if (resourceType.equals(Constant.RESOURCE_TYPE_IMAGE)) {
				if (loadMode.equals(Constant.LOAD_MODE_ON_LINE)) {
					detType = true;
				}
			}
		} else {
			detType = true;
		}
		return detType;
	}

	@Transient
	public String getUrlVideo() {
		String url = null;

		if (typeQuestion != null
				&& typeQuestion.equals(Constant.QUESTION_TYPE_FINAL)) {
			if (resourceType.equals(Constant.RESOURCE_TYPE_VIDEO)) {
				if (loadMode.equals(Constant.LOAD_MODE_ON_LINE)) {
					url = this.urlLink;
				} else {
					ParameterBacking parameterBacking = FacesUtil
							.findBean("parameterBacking");
					url = parameterBacking.getUrlImages() + this.image;
				}
			}
		}
		return url;
	}

}
